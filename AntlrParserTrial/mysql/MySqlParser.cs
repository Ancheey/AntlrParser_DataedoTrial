//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MySqlParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class MySqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, EXIT=58, 
		EXPLAIN=59, FALSE=60, FETCH=61, FOR=62, FORCE=63, FOREIGN=64, FROM=65, 
		FULLTEXT=66, GENERATED=67, GET=68, GRANT=69, GROUP=70, HAVING=71, HIGH_PRIORITY=72, 
		HISTOGRAM=73, IF=74, IGNORE=75, IGNORED=76, IN=77, INDEX=78, INFILE=79, 
		INNER=80, INOUT=81, INSERT=82, INTERVAL=83, INTO=84, IS=85, ITERATE=86, 
		JOIN=87, KEY=88, KEYS=89, KILL=90, LEADING=91, LEAVE=92, LEFT=93, LIKE=94, 
		LIMIT=95, LINEAR=96, LINES=97, LOAD=98, LOCK=99, LOCKED=100, LOOP=101, 
		LOW_PRIORITY=102, MASTER_BIND=103, MASTER_SSL_VERIFY_SERVER_CERT=104, 
		MATCH=105, MAXVALUE=106, MINVALUE=107, MODIFIES=108, NATURAL=109, NOT=110, 
		NO_WRITE_TO_BINLOG=111, NULL_LITERAL=112, NUMBER=113, ON=114, OPTIMIZE=115, 
		OPTION=116, OPTIONAL=117, OPTIONALLY=118, OR=119, ORDER=120, OUT=121, 
		OVER=122, OUTER=123, OUTFILE=124, PARTITION=125, PRIMARY=126, PROCEDURE=127, 
		PURGE=128, RANGE=129, READ=130, READS=131, REFERENCES=132, REGEXP=133, 
		RELEASE=134, RENAME=135, REPEAT=136, REPLACE=137, REQUIRE=138, RESIGNAL=139, 
		RESTRICT=140, RETAIN=141, RETURN=142, REVOKE=143, RIGHT=144, RLIKE=145, 
		SCHEMA=146, SCHEMAS=147, SELECT=148, SET=149, SEPARATOR=150, SHOW=151, 
		SIGNAL=152, SKIP_=153, SPATIAL=154, SQL=155, SQLEXCEPTION=156, SQLSTATE=157, 
		SQLWARNING=158, SQL_BIG_RESULT=159, SQL_CALC_FOUND_ROWS=160, SQL_SMALL_RESULT=161, 
		SSL=162, STACKED=163, STARTING=164, STRAIGHT_JOIN=165, TABLE=166, TERMINATED=167, 
		THEN=168, TO=169, TRAILING=170, TRIGGER=171, TRUE=172, UNDO=173, UNION=174, 
		UNIQUE=175, UNLOCK=176, UNSIGNED=177, UPDATE=178, USAGE=179, USE=180, 
		USING=181, VALUES=182, WHEN=183, WHERE=184, WHILE=185, WITH=186, WRITE=187, 
		XOR=188, ZEROFILL=189, TINYINT=190, SMALLINT=191, MEDIUMINT=192, MIDDLEINT=193, 
		INT=194, INT1=195, INT2=196, INT3=197, INT4=198, INT8=199, INTEGER=200, 
		BIGINT=201, REAL=202, DOUBLE=203, PRECISION=204, FLOAT=205, FLOAT4=206, 
		FLOAT8=207, DECIMAL=208, DEC=209, NUMERIC=210, DATE=211, TIME=212, TIMESTAMP=213, 
		DATETIME=214, YEAR=215, CHAR=216, VARCHAR=217, NVARCHAR=218, NATIONAL=219, 
		BINARY=220, VARBINARY=221, TINYBLOB=222, BLOB=223, MEDIUMBLOB=224, LONG=225, 
		LONGBLOB=226, TINYTEXT=227, TEXT=228, MEDIUMTEXT=229, LONGTEXT=230, ENUM=231, 
		VARYING=232, SERIAL=233, YEAR_MONTH=234, DAY_HOUR=235, DAY_MINUTE=236, 
		DAY_SECOND=237, HOUR_MINUTE=238, HOUR_SECOND=239, MINUTE_SECOND=240, SECOND_MICROSECOND=241, 
		MINUTE_MICROSECOND=242, HOUR_MICROSECOND=243, DAY_MICROSECOND=244, JSON_ARRAY=245, 
		JSON_OBJECT=246, JSON_QUOTE=247, JSON_CONTAINS=248, JSON_CONTAINS_PATH=249, 
		JSON_EXTRACT=250, JSON_KEYS=251, JSON_OVERLAPS=252, JSON_SEARCH=253, JSON_VALUE=254, 
		JSON_ARRAY_APPEND=255, JSON_ARRAY_INSERT=256, JSON_INSERT=257, JSON_MERGE=258, 
		JSON_MERGE_PATCH=259, JSON_MERGE_PRESERVE=260, JSON_REMOVE=261, JSON_REPLACE=262, 
		JSON_SET=263, JSON_UNQUOTE=264, JSON_DEPTH=265, JSON_LENGTH=266, JSON_TYPE=267, 
		JSON_VALID=268, JSON_TABLE=269, JSON_SCHEMA_VALID=270, JSON_SCHEMA_VALIDATION_REPORT=271, 
		JSON_PRETTY=272, JSON_STORAGE_FREE=273, JSON_STORAGE_SIZE=274, JSON_ARRAYAGG=275, 
		JSON_OBJECTAGG=276, AVG=277, BIT_AND=278, BIT_OR=279, BIT_XOR=280, COUNT=281, 
		CUME_DIST=282, DENSE_RANK=283, FIRST_VALUE=284, GROUP_CONCAT=285, LAG=286, 
		LAST_VALUE=287, LEAD=288, MAX=289, MIN=290, NTILE=291, NTH_VALUE=292, 
		PERCENT_RANK=293, RANK=294, ROW_NUMBER=295, STD=296, STDDEV=297, STDDEV_POP=298, 
		STDDEV_SAMP=299, SUM=300, VAR_POP=301, VAR_SAMP=302, VARIANCE=303, CURRENT_DATE=304, 
		CURRENT_TIME=305, CURRENT_TIMESTAMP=306, LOCALTIME=307, CURDATE=308, CURTIME=309, 
		DATE_ADD=310, DATE_SUB=311, EXTRACT=312, LOCALTIMESTAMP=313, NOW=314, 
		POSITION=315, SUBSTR=316, SUBSTRING=317, SYSDATE=318, TRIM=319, UTC_DATE=320, 
		UTC_TIME=321, UTC_TIMESTAMP=322, ACCOUNT=323, ACTION=324, AFTER=325, AGGREGATE=326, 
		ALGORITHM=327, ANY=328, AT=329, AUTHORS=330, AUTOCOMMIT=331, AUTOEXTEND_SIZE=332, 
		AUTO_INCREMENT=333, AVG_ROW_LENGTH=334, BEGIN=335, BINLOG=336, BIT=337, 
		BLOCK=338, BOOL=339, BOOLEAN=340, BTREE=341, CACHE=342, CASCADED=343, 
		CHAIN=344, CHANGED=345, CHANNEL=346, CHECKSUM=347, PAGE_CHECKSUM=348, 
		CIPHER=349, CLASS_ORIGIN=350, CLIENT=351, CLOSE=352, CLUSTERING=353, COALESCE=354, 
		CODE=355, COLUMNS=356, COLUMN_FORMAT=357, COLUMN_NAME=358, COMMENT=359, 
		COMMIT=360, COMPACT=361, COMPLETION=362, COMPRESSED=363, COMPRESSION=364, 
		CONCURRENT=365, CONNECT=366, CONNECTION=367, CONSISTENT=368, CONSTRAINT_CATALOG=369, 
		CONSTRAINT_SCHEMA=370, CONSTRAINT_NAME=371, CONTAINS=372, CONTEXT=373, 
		CONTRIBUTORS=374, COPY=375, CPU=376, CYCLE=377, CURSOR_NAME=378, DATA=379, 
		DATAFILE=380, DEALLOCATE=381, DEFAULT_AUTH=382, DEFINER=383, DELAY_KEY_WRITE=384, 
		DES_KEY_FILE=385, DIRECTORY=386, DISABLE=387, DISCARD=388, DISK=389, DO=390, 
		DUMPFILE=391, DUPLICATE=392, DYNAMIC=393, ENABLE=394, ENCRYPTION=395, 
		END=396, ENDS=397, ENGINE=398, ENGINES=399, ERROR=400, ERRORS=401, ESCAPE=402, 
		EVEN=403, EVENT=404, EVENTS=405, EVERY=406, EXCHANGE=407, EXCLUSIVE=408, 
		EXPIRE=409, EXPORT=410, EXTENDED=411, EXTENT_SIZE=412, FAST=413, FAULTS=414, 
		FIELDS=415, FILE_BLOCK_SIZE=416, FILTER=417, FIRST=418, FIXED=419, FLUSH=420, 
		FOLLOWING=421, FOLLOWS=422, FOUND=423, FULL=424, FUNCTION=425, GENERAL=426, 
		GLOBAL=427, GRANTS=428, GROUP_REPLICATION=429, HANDLER=430, HASH=431, 
		HELP=432, HOST=433, HOSTS=434, IDENTIFIED=435, IGNORE_SERVER_IDS=436, 
		IMPORT=437, INCREMENT=438, INDEXES=439, INITIAL_SIZE=440, INPLACE=441, 
		INSERT_METHOD=442, INSTALL=443, INSTANCE=444, INSTANT=445, INVISIBLE=446, 
		INVOKER=447, IO=448, IO_THREAD=449, IPC=450, ISOLATION=451, ISSUER=452, 
		JSON=453, KEY_BLOCK_SIZE=454, LANGUAGE=455, LAST=456, LEAVES=457, LESS=458, 
		LEVEL=459, LIST=460, LOCAL=461, LOGFILE=462, LOGS=463, MASTER=464, MASTER_AUTO_POSITION=465, 
		MASTER_CONNECT_RETRY=466, MASTER_DELAY=467, MASTER_HEARTBEAT_PERIOD=468, 
		MASTER_HOST=469, MASTER_LOG_FILE=470, MASTER_LOG_POS=471, MASTER_PASSWORD=472, 
		MASTER_PORT=473, MASTER_RETRY_COUNT=474, MASTER_SSL=475, MASTER_SSL_CA=476, 
		MASTER_SSL_CAPATH=477, MASTER_SSL_CERT=478, MASTER_SSL_CIPHER=479, MASTER_SSL_CRL=480, 
		MASTER_SSL_CRLPATH=481, MASTER_SSL_KEY=482, MASTER_TLS_VERSION=483, MASTER_USER=484, 
		MAX_CONNECTIONS_PER_HOUR=485, MAX_QUERIES_PER_HOUR=486, MAX_ROWS=487, 
		MAX_SIZE=488, MAX_UPDATES_PER_HOUR=489, MAX_USER_CONNECTIONS=490, MEDIUM=491, 
		MEMBER=492, MERGE=493, MESSAGE_TEXT=494, MID=495, MIGRATE=496, MIN_ROWS=497, 
		MODE=498, MODIFY=499, MUTEX=500, MYSQL=501, MYSQL_ERRNO=502, NAME=503, 
		NAMES=504, NCHAR=505, NEVER=506, NEXT=507, NO=508, NOCACHE=509, NOCOPY=510, 
		NOCYCLE=511, NOMAXVALUE=512, NOMINVALUE=513, NOWAIT=514, NODEGROUP=515, 
		NONE=516, ODBC=517, OFFLINE=518, OFFSET=519, OF=520, OJ=521, OLD_PASSWORD=522, 
		ONE=523, ONLINE=524, ONLY=525, OPEN=526, OPTIMIZER_COSTS=527, OPTIONS=528, 
		OWNER=529, PACK_KEYS=530, PAGE=531, PARSER=532, PARTIAL=533, PARTITIONING=534, 
		PARTITIONS=535, PASSWORD=536, PHASE=537, PLUGIN=538, PLUGIN_DIR=539, PLUGINS=540, 
		PORT=541, PRECEDES=542, PRECEDING=543, PREPARE=544, PRESERVE=545, PREV=546, 
		PROCESSLIST=547, PROFILE=548, PROFILES=549, PROXY=550, QUERY=551, QUICK=552, 
		REBUILD=553, RECOVER=554, RECURSIVE=555, REDO_BUFFER_SIZE=556, REDUNDANT=557, 
		RELAY=558, RELAY_LOG_FILE=559, RELAY_LOG_POS=560, RELAYLOG=561, REMOVE=562, 
		REORGANIZE=563, REPAIR=564, REPLICATE_DO_DB=565, REPLICATE_DO_TABLE=566, 
		REPLICATE_IGNORE_DB=567, REPLICATE_IGNORE_TABLE=568, REPLICATE_REWRITE_DB=569, 
		REPLICATE_WILD_DO_TABLE=570, REPLICATE_WILD_IGNORE_TABLE=571, REPLICATION=572, 
		RESET=573, RESTART=574, RESUME=575, RETURNED_SQLSTATE=576, RETURNING=577, 
		RETURNS=578, ROLE=579, ROLLBACK=580, ROLLUP=581, ROTATE=582, ROW=583, 
		ROWS=584, ROW_FORMAT=585, RTREE=586, SAVEPOINT=587, SCHEDULE=588, SECURITY=589, 
		SEQUENCE=590, SERVER=591, SESSION=592, SHARE=593, SHARED=594, SIGNED=595, 
		SIMPLE=596, SLAVE=597, SLOW=598, SNAPSHOT=599, SOCKET=600, SOME=601, SONAME=602, 
		SOUNDS=603, SOURCE=604, SQL_AFTER_GTIDS=605, SQL_AFTER_MTS_GAPS=606, SQL_BEFORE_GTIDS=607, 
		SQL_BUFFER_RESULT=608, SQL_CACHE=609, SQL_NO_CACHE=610, SQL_THREAD=611, 
		START=612, STARTS=613, STATS_AUTO_RECALC=614, STATS_PERSISTENT=615, STATS_SAMPLE_PAGES=616, 
		STATUS=617, STOP=618, STORAGE=619, STORED=620, STRING=621, SUBCLASS_ORIGIN=622, 
		SUBJECT=623, SUBPARTITION=624, SUBPARTITIONS=625, SUSPEND=626, SWAPS=627, 
		SWITCHES=628, TABLE_NAME=629, TABLESPACE=630, TABLE_TYPE=631, TEMPORARY=632, 
		TEMPTABLE=633, THAN=634, TRADITIONAL=635, TRANSACTION=636, TRANSACTIONAL=637, 
		TRIGGERS=638, TRUNCATE=639, UNBOUNDED=640, UNDEFINED=641, UNDOFILE=642, 
		UNDO_BUFFER_SIZE=643, UNINSTALL=644, UNKNOWN=645, UNTIL=646, UPGRADE=647, 
		USER=648, USE_FRM=649, USER_RESOURCES=650, VALIDATION=651, VALUE=652, 
		VARIABLES=653, VIEW=654, VIRTUAL=655, VISIBLE=656, WAIT=657, WARNINGS=658, 
		WINDOW=659, WITHOUT=660, WORK=661, WRAPPER=662, X509=663, XA=664, XML=665, 
		YES=666, EUR=667, USA=668, JIS=669, ISO=670, INTERNAL=671, QUARTER=672, 
		MONTH=673, DAY=674, HOUR=675, MINUTE=676, WEEK=677, SECOND=678, MICROSECOND=679, 
		TABLES=680, ROUTINE=681, EXECUTE=682, FILE=683, PROCESS=684, RELOAD=685, 
		SHUTDOWN=686, SUPER=687, PRIVILEGES=688, APPLICATION_PASSWORD_ADMIN=689, 
		AUDIT_ADMIN=690, BACKUP_ADMIN=691, BINLOG_ADMIN=692, BINLOG_ENCRYPTION_ADMIN=693, 
		CLONE_ADMIN=694, CONNECTION_ADMIN=695, ENCRYPTION_KEY_ADMIN=696, FIREWALL_ADMIN=697, 
		FIREWALL_USER=698, FLUSH_OPTIMIZER_COSTS=699, FLUSH_STATUS=700, FLUSH_TABLES=701, 
		FLUSH_USER_RESOURCES=702, ADMIN=703, GROUP_REPLICATION_ADMIN=704, INNODB_REDO_LOG_ARCHIVE=705, 
		INNODB_REDO_LOG_ENABLE=706, NDB_STORED_USER=707, PASSWORDLESS_USER_ADMIN=708, 
		PERSIST_RO_VARIABLES_ADMIN=709, REPLICATION_APPLIER=710, REPLICATION_SLAVE_ADMIN=711, 
		RESOURCE_GROUP_ADMIN=712, RESOURCE_GROUP_USER=713, ROLE_ADMIN=714, SERVICE_CONNECTION_ADMIN=715, 
		SESSION_VARIABLES_ADMIN=716, SET_USER_ID=717, SHOW_ROUTINE=718, SYSTEM_VARIABLES_ADMIN=719, 
		TABLE_ENCRYPTION_ADMIN=720, VERSION_TOKEN_ADMIN=721, XA_RECOVER_ADMIN=722, 
		ARMSCII8=723, ASCII=724, BIG5=725, CP1250=726, CP1251=727, CP1256=728, 
		CP1257=729, CP850=730, CP852=731, CP866=732, CP932=733, DEC8=734, EUCJPMS=735, 
		EUCKR=736, GB18030=737, GB2312=738, GBK=739, GEOSTD8=740, GREEK=741, HEBREW=742, 
		HP8=743, KEYBCS2=744, KOI8R=745, KOI8U=746, LATIN1=747, LATIN2=748, LATIN5=749, 
		LATIN7=750, MACCE=751, MACROMAN=752, SJIS=753, SWE7=754, TIS620=755, UCS2=756, 
		UJIS=757, UTF16=758, UTF16LE=759, UTF32=760, UTF8=761, UTF8MB3=762, UTF8MB4=763, 
		ARCHIVE=764, BLACKHOLE=765, CSV=766, FEDERATED=767, INNODB=768, MEMORY=769, 
		MRG_MYISAM=770, MYISAM=771, NDB=772, NDBCLUSTER=773, PERFORMANCE_SCHEMA=774, 
		TOKUDB=775, REPEATABLE=776, COMMITTED=777, UNCOMMITTED=778, SERIALIZABLE=779, 
		GEOMETRYCOLLECTION=780, GEOMCOLLECTION=781, GEOMETRY=782, LINESTRING=783, 
		MULTILINESTRING=784, MULTIPOINT=785, MULTIPOLYGON=786, POINT=787, POLYGON=788, 
		ABS=789, ACOS=790, ADDDATE=791, ADDTIME=792, AES_DECRYPT=793, AES_ENCRYPT=794, 
		AREA=795, ASBINARY=796, ASIN=797, ASTEXT=798, ASWKB=799, ASWKT=800, ASYMMETRIC_DECRYPT=801, 
		ASYMMETRIC_DERIVE=802, ASYMMETRIC_ENCRYPT=803, ASYMMETRIC_SIGN=804, ASYMMETRIC_VERIFY=805, 
		ATAN=806, ATAN2=807, BENCHMARK=808, BIN=809, BIT_COUNT=810, BIT_LENGTH=811, 
		BUFFER=812, CATALOG_NAME=813, CEIL=814, CEILING=815, CENTROID=816, CHARACTER_LENGTH=817, 
		CHARSET=818, CHAR_LENGTH=819, COERCIBILITY=820, COLLATION=821, COMPRESS=822, 
		CONCAT=823, CONCAT_WS=824, CONNECTION_ID=825, CONV=826, CONVERT_TZ=827, 
		COS=828, COT=829, CRC32=830, CREATE_ASYMMETRIC_PRIV_KEY=831, CREATE_ASYMMETRIC_PUB_KEY=832, 
		CREATE_DH_PARAMETERS=833, CREATE_DIGEST=834, CROSSES=835, DATEDIFF=836, 
		DATE_FORMAT=837, DAYNAME=838, DAYOFMONTH=839, DAYOFWEEK=840, DAYOFYEAR=841, 
		DECODE=842, DEGREES=843, DES_DECRYPT=844, DES_ENCRYPT=845, DIMENSION=846, 
		DISJOINT=847, ELT=848, ENCODE=849, ENCRYPT=850, ENDPOINT=851, ENGINE_ATTRIBUTE=852, 
		ENVELOPE=853, EQUALS=854, EXP=855, EXPORT_SET=856, EXTERIORRING=857, EXTRACTVALUE=858, 
		FIELD=859, FIND_IN_SET=860, FLOOR=861, FORMAT=862, FOUND_ROWS=863, FROM_BASE64=864, 
		FROM_DAYS=865, FROM_UNIXTIME=866, GEOMCOLLFROMTEXT=867, GEOMCOLLFROMWKB=868, 
		GEOMETRYCOLLECTIONFROMTEXT=869, GEOMETRYCOLLECTIONFROMWKB=870, GEOMETRYFROMTEXT=871, 
		GEOMETRYFROMWKB=872, GEOMETRYN=873, GEOMETRYTYPE=874, GEOMFROMTEXT=875, 
		GEOMFROMWKB=876, GET_FORMAT=877, GET_LOCK=878, GLENGTH=879, GREATEST=880, 
		GTID_SUBSET=881, GTID_SUBTRACT=882, HEX=883, IFNULL=884, INET6_ATON=885, 
		INET6_NTOA=886, INET_ATON=887, INET_NTOA=888, INSTR=889, INTERIORRINGN=890, 
		INTERSECTS=891, ISCLOSED=892, ISEMPTY=893, ISNULL=894, ISSIMPLE=895, IS_FREE_LOCK=896, 
		IS_IPV4=897, IS_IPV4_COMPAT=898, IS_IPV4_MAPPED=899, IS_IPV6=900, IS_USED_LOCK=901, 
		LAST_INSERT_ID=902, LCASE=903, LEAST=904, LENGTH=905, LINEFROMTEXT=906, 
		LINEFROMWKB=907, LINESTRINGFROMTEXT=908, LINESTRINGFROMWKB=909, LN=910, 
		LOAD_FILE=911, LOCATE=912, LOG=913, LOG10=914, LOG2=915, LOWER=916, LPAD=917, 
		LTRIM=918, MAKEDATE=919, MAKETIME=920, MAKE_SET=921, MASTER_POS_WAIT=922, 
		MBRCONTAINS=923, MBRDISJOINT=924, MBREQUAL=925, MBRINTERSECTS=926, MBROVERLAPS=927, 
		MBRTOUCHES=928, MBRWITHIN=929, MD5=930, MLINEFROMTEXT=931, MLINEFROMWKB=932, 
		MONTHNAME=933, MPOINTFROMTEXT=934, MPOINTFROMWKB=935, MPOLYFROMTEXT=936, 
		MPOLYFROMWKB=937, MULTILINESTRINGFROMTEXT=938, MULTILINESTRINGFROMWKB=939, 
		MULTIPOINTFROMTEXT=940, MULTIPOINTFROMWKB=941, MULTIPOLYGONFROMTEXT=942, 
		MULTIPOLYGONFROMWKB=943, NAME_CONST=944, NULLIF=945, NUMGEOMETRIES=946, 
		NUMINTERIORRINGS=947, NUMPOINTS=948, OCT=949, OCTET_LENGTH=950, ORD=951, 
		OVERLAPS=952, PERIOD_ADD=953, PERIOD_DIFF=954, PI=955, POINTFROMTEXT=956, 
		POINTFROMWKB=957, POINTN=958, POLYFROMTEXT=959, POLYFROMWKB=960, POLYGONFROMTEXT=961, 
		POLYGONFROMWKB=962, POW=963, POWER=964, QUOTE=965, RADIANS=966, RAND=967, 
		RANDOM_BYTES=968, RELEASE_LOCK=969, REVERSE=970, ROUND=971, ROW_COUNT=972, 
		RPAD=973, RTRIM=974, SEC_TO_TIME=975, SECONDARY_ENGINE_ATTRIBUTE=976, 
		SESSION_USER=977, SHA=978, SHA1=979, SHA2=980, SCHEMA_NAME=981, SIGN=982, 
		SIN=983, SLEEP=984, SOUNDEX=985, SQL_THREAD_WAIT_AFTER_GTIDS=986, SQRT=987, 
		SRID=988, STARTPOINT=989, STRCMP=990, STR_TO_DATE=991, ST_AREA=992, ST_ASBINARY=993, 
		ST_ASTEXT=994, ST_ASWKB=995, ST_ASWKT=996, ST_BUFFER=997, ST_CENTROID=998, 
		ST_CONTAINS=999, ST_CROSSES=1000, ST_DIFFERENCE=1001, ST_DIMENSION=1002, 
		ST_DISJOINT=1003, ST_DISTANCE=1004, ST_ENDPOINT=1005, ST_ENVELOPE=1006, 
		ST_EQUALS=1007, ST_EXTERIORRING=1008, ST_GEOMCOLLFROMTEXT=1009, ST_GEOMCOLLFROMTXT=1010, 
		ST_GEOMCOLLFROMWKB=1011, ST_GEOMETRYCOLLECTIONFROMTEXT=1012, ST_GEOMETRYCOLLECTIONFROMWKB=1013, 
		ST_GEOMETRYFROMTEXT=1014, ST_GEOMETRYFROMWKB=1015, ST_GEOMETRYN=1016, 
		ST_GEOMETRYTYPE=1017, ST_GEOMFROMTEXT=1018, ST_GEOMFROMWKB=1019, ST_INTERIORRINGN=1020, 
		ST_INTERSECTION=1021, ST_INTERSECTS=1022, ST_ISCLOSED=1023, ST_ISEMPTY=1024, 
		ST_ISSIMPLE=1025, ST_LINEFROMTEXT=1026, ST_LINEFROMWKB=1027, ST_LINESTRINGFROMTEXT=1028, 
		ST_LINESTRINGFROMWKB=1029, ST_NUMGEOMETRIES=1030, ST_NUMINTERIORRING=1031, 
		ST_NUMINTERIORRINGS=1032, ST_NUMPOINTS=1033, ST_OVERLAPS=1034, ST_POINTFROMTEXT=1035, 
		ST_POINTFROMWKB=1036, ST_POINTN=1037, ST_POLYFROMTEXT=1038, ST_POLYFROMWKB=1039, 
		ST_POLYGONFROMTEXT=1040, ST_POLYGONFROMWKB=1041, ST_SRID=1042, ST_STARTPOINT=1043, 
		ST_SYMDIFFERENCE=1044, ST_TOUCHES=1045, ST_UNION=1046, ST_WITHIN=1047, 
		ST_X=1048, ST_Y=1049, SUBDATE=1050, SUBSTRING_INDEX=1051, SUBTIME=1052, 
		SYSTEM_USER=1053, TAN=1054, TIMEDIFF=1055, TIMESTAMPADD=1056, TIMESTAMPDIFF=1057, 
		TIME_FORMAT=1058, TIME_TO_SEC=1059, TOUCHES=1060, TO_BASE64=1061, TO_DAYS=1062, 
		TO_SECONDS=1063, UCASE=1064, UNCOMPRESS=1065, UNCOMPRESSED_LENGTH=1066, 
		UNHEX=1067, UNIX_TIMESTAMP=1068, UPDATEXML=1069, UPPER=1070, UUID=1071, 
		UUID_SHORT=1072, VALIDATE_PASSWORD_STRENGTH=1073, VERSION=1074, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1075, 
		WEEKDAY=1076, WEEKOFYEAR=1077, WEIGHT_STRING=1078, WITHIN=1079, YEARWEEK=1080, 
		Y_FUNCTION=1081, X_FUNCTION=1082, VIA=1083, LASTVAL=1084, NEXTVAL=1085, 
		SETVAL=1086, PREVIOUS=1087, PERSISTENT=1088, BINLOG_MONITOR=1089, BINLOG_REPLAY=1090, 
		FEDERATED_ADMIN=1091, READ_ONLY_ADMIN=1092, REPLICA=1093, REPLICATION_MASTER_ADMIN=1094, 
		VAR_ASSIGN=1095, PLUS_ASSIGN=1096, MINUS_ASSIGN=1097, MULT_ASSIGN=1098, 
		DIV_ASSIGN=1099, MOD_ASSIGN=1100, AND_ASSIGN=1101, XOR_ASSIGN=1102, OR_ASSIGN=1103, 
		STAR=1104, DIVIDE=1105, MODULE=1106, PLUS=1107, MINUS=1108, DIV=1109, 
		MOD=1110, EQUAL_SYMBOL=1111, GREATER_SYMBOL=1112, LESS_SYMBOL=1113, EXCLAMATION_SYMBOL=1114, 
		BIT_NOT_OP=1115, BIT_OR_OP=1116, BIT_AND_OP=1117, BIT_XOR_OP=1118, DOT=1119, 
		LR_BRACKET=1120, RR_BRACKET=1121, COMMA=1122, SEMI=1123, AT_SIGN=1124, 
		ZERO_DECIMAL=1125, ONE_DECIMAL=1126, TWO_DECIMAL=1127, SINGLE_QUOTE_SYMB=1128, 
		DOUBLE_QUOTE_SYMB=1129, REVERSE_QUOTE_SYMB=1130, COLON_SYMB=1131, CHARSET_REVERSE_QOUTE_STRING=1132, 
		FILESIZE_LITERAL=1133, START_NATIONAL_STRING_LITERAL=1134, STRING_LITERAL=1135, 
		DECIMAL_LITERAL=1136, HEXADECIMAL_LITERAL=1137, REAL_LITERAL=1138, NULL_SPEC_LITERAL=1139, 
		BIT_STRING=1140, STRING_CHARSET_NAME=1141, DOT_ID=1142, ID=1143, REVERSE_QUOTE_ID=1144, 
		STRING_USER_NAME=1145, IP_ADDRESS=1146, STRING_USER_NAME_MARIADB=1147, 
		LOCAL_ID=1148, GLOBAL_ID=1149, ERROR_RECONGNIGION=1150;
	public const int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createRole = 18, 
		RULE_createServer = 19, RULE_createTable = 20, RULE_createTablespaceInnodb = 21, 
		RULE_createTablespaceNdb = 22, RULE_createTrigger = 23, RULE_withClause = 24, 
		RULE_commonTableExpressions = 25, RULE_cteName = 26, RULE_cteColumnName = 27, 
		RULE_createView = 28, RULE_createSequence = 29, RULE_sequenceSpec = 30, 
		RULE_createDatabaseOption = 31, RULE_charSet = 32, RULE_ownerStatement = 33, 
		RULE_scheduleExpression = 34, RULE_timestampValue = 35, RULE_intervalExpr = 36, 
		RULE_intervalType = 37, RULE_enableType = 38, RULE_indexType = 39, RULE_indexOption = 40, 
		RULE_procedureParameter = 41, RULE_functionParameter = 42, RULE_routineOption = 43, 
		RULE_serverOption = 44, RULE_createDefinitions = 45, RULE_createDefinition = 46, 
		RULE_columnDefinition = 47, RULE_columnConstraint = 48, RULE_tableConstraint = 49, 
		RULE_referenceDefinition = 50, RULE_referenceAction = 51, RULE_referenceControlType = 52, 
		RULE_indexColumnDefinition = 53, RULE_tableOption = 54, RULE_tableType = 55, 
		RULE_tablespaceStorage = 56, RULE_partitionDefinitions = 57, RULE_partitionFunctionDefinition = 58, 
		RULE_subpartitionFunctionDefinition = 59, RULE_partitionDefinition = 60, 
		RULE_partitionDefinerAtom = 61, RULE_partitionDefinerVector = 62, RULE_subpartitionDefinition = 63, 
		RULE_partitionOption = 64, RULE_alterDatabase = 65, RULE_alterEvent = 66, 
		RULE_alterFunction = 67, RULE_alterInstance = 68, RULE_alterLogfileGroup = 69, 
		RULE_alterProcedure = 70, RULE_alterServer = 71, RULE_alterTable = 72, 
		RULE_alterTablespace = 73, RULE_alterView = 74, RULE_alterSequence = 75, 
		RULE_alterSpecification = 76, RULE_dropDatabase = 77, RULE_dropEvent = 78, 
		RULE_dropIndex = 79, RULE_dropLogfileGroup = 80, RULE_dropProcedure = 81, 
		RULE_dropFunction = 82, RULE_dropServer = 83, RULE_dropTable = 84, RULE_dropTablespace = 85, 
		RULE_dropTrigger = 86, RULE_dropView = 87, RULE_dropRole = 88, RULE_setRole = 89, 
		RULE_dropSequence = 90, RULE_renameTable = 91, RULE_renameTableClause = 92, 
		RULE_truncateTable = 93, RULE_callStatement = 94, RULE_deleteStatement = 95, 
		RULE_doStatement = 96, RULE_handlerStatement = 97, RULE_insertStatement = 98, 
		RULE_loadDataStatement = 99, RULE_loadXmlStatement = 100, RULE_replaceStatement = 101, 
		RULE_selectStatement = 102, RULE_updateStatement = 103, RULE_insertStatementValue = 104, 
		RULE_updatedElement = 105, RULE_assignmentField = 106, RULE_lockClause = 107, 
		RULE_singleDeleteStatement = 108, RULE_multipleDeleteStatement = 109, 
		RULE_handlerOpenStatement = 110, RULE_handlerReadIndexStatement = 111, 
		RULE_handlerReadStatement = 112, RULE_handlerCloseStatement = 113, RULE_singleUpdateStatement = 114, 
		RULE_multipleUpdateStatement = 115, RULE_orderByClause = 116, RULE_orderByExpression = 117, 
		RULE_tableSources = 118, RULE_tableSource = 119, RULE_tableSourceItem = 120, 
		RULE_indexHint = 121, RULE_indexHintType = 122, RULE_joinPart = 123, RULE_queryExpression = 124, 
		RULE_queryExpressionNointo = 125, RULE_querySpecification = 126, RULE_querySpecificationNointo = 127, 
		RULE_unionParenthesis = 128, RULE_unionStatement = 129, RULE_selectSpec = 130, 
		RULE_selectElements = 131, RULE_selectElement = 132, RULE_selectIntoExpression = 133, 
		RULE_selectFieldsInto = 134, RULE_selectLinesInto = 135, RULE_fromClause = 136, 
		RULE_groupByClause = 137, RULE_havingClause = 138, RULE_windowClause = 139, 
		RULE_groupByItem = 140, RULE_limitClause = 141, RULE_limitClauseAtom = 142, 
		RULE_startTransaction = 143, RULE_beginWork = 144, RULE_commitWork = 145, 
		RULE_rollbackWork = 146, RULE_savepointStatement = 147, RULE_rollbackStatement = 148, 
		RULE_releaseStatement = 149, RULE_lockTables = 150, RULE_unlockTables = 151, 
		RULE_setAutocommitStatement = 152, RULE_setTransactionStatement = 153, 
		RULE_transactionMode = 154, RULE_lockTableElement = 155, RULE_lockAction = 156, 
		RULE_transactionOption = 157, RULE_transactionLevel = 158, RULE_changeMaster = 159, 
		RULE_changeReplicationFilter = 160, RULE_purgeBinaryLogs = 161, RULE_resetMaster = 162, 
		RULE_resetSlave = 163, RULE_startSlave = 164, RULE_stopSlave = 165, RULE_startGroupReplication = 166, 
		RULE_stopGroupReplication = 167, RULE_masterOption = 168, RULE_stringMasterOption = 169, 
		RULE_decimalMasterOption = 170, RULE_boolMasterOption = 171, RULE_channelOption = 172, 
		RULE_replicationFilter = 173, RULE_tablePair = 174, RULE_threadType = 175, 
		RULE_untilOption = 176, RULE_connectionOption = 177, RULE_gtuidSet = 178, 
		RULE_xaStartTransaction = 179, RULE_xaEndTransaction = 180, RULE_xaPrepareStatement = 181, 
		RULE_xaCommitWork = 182, RULE_xaRollbackWork = 183, RULE_xaRecoverWork = 184, 
		RULE_prepareStatement = 185, RULE_executeStatement = 186, RULE_deallocatePrepare = 187, 
		RULE_routineBody = 188, RULE_blockStatement = 189, RULE_caseStatement = 190, 
		RULE_ifStatement = 191, RULE_iterateStatement = 192, RULE_leaveStatement = 193, 
		RULE_loopStatement = 194, RULE_repeatStatement = 195, RULE_returnStatement = 196, 
		RULE_whileStatement = 197, RULE_cursorStatement = 198, RULE_declareVariable = 199, 
		RULE_declareCondition = 200, RULE_declareCursor = 201, RULE_declareHandler = 202, 
		RULE_handlerConditionValue = 203, RULE_procedureSqlStatement = 204, RULE_caseAlternative = 205, 
		RULE_elifAlternative = 206, RULE_alterUser = 207, RULE_createUser = 208, 
		RULE_dropUser = 209, RULE_grantStatement = 210, RULE_roleOption = 211, 
		RULE_grantProxy = 212, RULE_renameUser = 213, RULE_revokeStatement = 214, 
		RULE_revokeProxy = 215, RULE_setPasswordStatement = 216, RULE_userSpecification = 217, 
		RULE_userAuthOption = 218, RULE_tlsOption = 219, RULE_userResourceOption = 220, 
		RULE_userPasswordOption = 221, RULE_userLockOption = 222, RULE_privelegeClause = 223, 
		RULE_privilege = 224, RULE_privilegeLevel = 225, RULE_renameUserClause = 226, 
		RULE_analyzeTable = 227, RULE_checkTable = 228, RULE_checksumTable = 229, 
		RULE_optimizeTable = 230, RULE_repairTable = 231, RULE_checkTableOption = 232, 
		RULE_createUdfunction = 233, RULE_installPlugin = 234, RULE_uninstallPlugin = 235, 
		RULE_setStatement = 236, RULE_showStatement = 237, RULE_variableClause = 238, 
		RULE_showCommonEntity = 239, RULE_showFilter = 240, RULE_showGlobalInfoClause = 241, 
		RULE_showSchemaEntity = 242, RULE_showProfileType = 243, RULE_binlogStatement = 244, 
		RULE_cacheIndexStatement = 245, RULE_flushStatement = 246, RULE_killStatement = 247, 
		RULE_loadIndexIntoCache = 248, RULE_resetStatement = 249, RULE_shutdownStatement = 250, 
		RULE_tableIndexes = 251, RULE_flushOption = 252, RULE_flushTableOption = 253, 
		RULE_loadedTableIndexes = 254, RULE_simpleDescribeStatement = 255, RULE_fullDescribeStatement = 256, 
		RULE_helpStatement = 257, RULE_useStatement = 258, RULE_signalStatement = 259, 
		RULE_resignalStatement = 260, RULE_signalConditionInformation = 261, RULE_diagnosticsStatement = 262, 
		RULE_diagnosticsConditionInformationName = 263, RULE_describeObjectClause = 264, 
		RULE_fullId = 265, RULE_tableName = 266, RULE_roleName = 267, RULE_fullColumnName = 268, 
		RULE_indexColumnName = 269, RULE_userName = 270, RULE_mysqlVariable = 271, 
		RULE_charsetName = 272, RULE_collationName = 273, RULE_engineName = 274, 
		RULE_uuidSet = 275, RULE_xid = 276, RULE_xuidStringId = 277, RULE_authPlugin = 278, 
		RULE_uid = 279, RULE_simpleId = 280, RULE_dottedId = 281, RULE_decimalLiteral = 282, 
		RULE_fileSizeLiteral = 283, RULE_stringLiteral = 284, RULE_booleanLiteral = 285, 
		RULE_hexadecimalLiteral = 286, RULE_nullNotnull = 287, RULE_constant = 288, 
		RULE_dataType = 289, RULE_collectionOptions = 290, RULE_convertedDataType = 291, 
		RULE_lengthOneDimension = 292, RULE_lengthTwoDimension = 293, RULE_lengthTwoOptionalDimension = 294, 
		RULE_uidList = 295, RULE_tables = 296, RULE_indexColumnNames = 297, RULE_expressions = 298, 
		RULE_expressionsWithDefaults = 299, RULE_constants = 300, RULE_simpleStrings = 301, 
		RULE_userVariables = 302, RULE_defaultValue = 303, RULE_currentTimestamp = 304, 
		RULE_expressionOrDefault = 305, RULE_ifExists = 306, RULE_ifNotExists = 307, 
		RULE_waitNowaitClause = 308, RULE_lockOption = 309, RULE_functionCall = 310, 
		RULE_specificFunction = 311, RULE_caseFuncAlternative = 312, RULE_levelsInWeightString = 313, 
		RULE_levelInWeightListElement = 314, RULE_aggregateWindowedFunction = 315, 
		RULE_nonAggregateWindowedFunction = 316, RULE_overClause = 317, RULE_windowSpec = 318, 
		RULE_windowName = 319, RULE_frameClause = 320, RULE_frameUnits = 321, 
		RULE_frameExtent = 322, RULE_frameBetween = 323, RULE_frameRange = 324, 
		RULE_partitionClause = 325, RULE_scalarFunctionName = 326, RULE_passwordFunctionClause = 327, 
		RULE_functionArgs = 328, RULE_functionArg = 329, RULE_expression = 330, 
		RULE_predicate = 331, RULE_expressionAtom = 332, RULE_unaryOperator = 333, 
		RULE_comparisonOperator = 334, RULE_logicalOperator = 335, RULE_bitOperator = 336, 
		RULE_mathOperator = 337, RULE_jsonOperator = 338, RULE_charsetNameBase = 339, 
		RULE_transactionLevelBase = 340, RULE_privilegesBase = 341, RULE_intervalTypeBase = 342, 
		RULE_dataTypeBase = 343, RULE_keywordsCanBeId = 344, RULE_functionNameBase = 345;
	public static readonly string[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
		"cteName", "cteColumnName", "createView", "createSequence", "sequenceSpec", 
		"createDatabaseOption", "charSet", "ownerStatement", "scheduleExpression", 
		"timestampValue", "intervalExpr", "intervalType", "enableType", "indexType", 
		"indexOption", "procedureParameter", "functionParameter", "routineOption", 
		"serverOption", "createDefinitions", "createDefinition", "columnDefinition", 
		"columnConstraint", "tableConstraint", "referenceDefinition", "referenceAction", 
		"referenceControlType", "indexColumnDefinition", "tableOption", "tableType", 
		"tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
		"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
		"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
		"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
		"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
		"alterSequence", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
		"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
		"dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "dropSequence", 
		"renameTable", "renameTableClause", "truncateTable", "callStatement", 
		"deleteStatement", "doStatement", "handlerStatement", "insertStatement", 
		"loadDataStatement", "loadXmlStatement", "replaceStatement", "selectStatement", 
		"updateStatement", "insertStatementValue", "updatedElement", "assignmentField", 
		"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
		"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
		"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", "orderByExpression", 
		"tableSources", "tableSource", "tableSourceItem", "indexHint", "indexHintType", 
		"joinPart", "queryExpression", "queryExpressionNointo", "querySpecification", 
		"querySpecificationNointo", "unionParenthesis", "unionStatement", "selectSpec", 
		"selectElements", "selectElement", "selectIntoExpression", "selectFieldsInto", 
		"selectLinesInto", "fromClause", "groupByClause", "havingClause", "windowClause", 
		"groupByItem", "limitClause", "limitClauseAtom", "startTransaction", "beginWork", 
		"commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
		"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
		"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
		"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
		"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
		"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
		"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
		"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
		"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
		"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
		"deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
		"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
		"repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
		"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
		"handlerConditionValue", "procedureSqlStatement", "caseAlternative", "elifAlternative", 
		"alterUser", "createUser", "dropUser", "grantStatement", "roleOption", 
		"grantProxy", "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
		"userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
		"userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
		"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
		"optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
		"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
		"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
		"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
		"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
		"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
		"signalStatement", "resignalStatement", "signalConditionInformation", 
		"diagnosticsStatement", "diagnosticsConditionInformationName", "describeObjectClause", 
		"fullId", "tableName", "roleName", "fullColumnName", "indexColumnName", 
		"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
		"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
		"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
		"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "collectionOptions", 
		"convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
		"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "waitNowaitClause", 
		"lockOption", "functionCall", "specificFunction", "caseFuncAlternative", 
		"levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", 
		"nonAggregateWindowedFunction", "overClause", "windowSpec", "windowName", 
		"frameClause", "frameUnits", "frameExtent", "frameBetween", "frameRange", 
		"partitionClause", "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
		"functionArg", "expression", "predicate", "expressionAtom", "unaryOperator", 
		"comparisonOperator", "logicalOperator", "bitOperator", "mathOperator", 
		"jsonOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
		"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
		"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
		"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
		"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
		"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
		"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
		"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
		"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
		"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", 
		"'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
		"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
		"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
		"'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
		"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MINVALUE'", 
		"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
		"'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'", 
		"'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
		"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
		"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
		"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", 
		"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
		"'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
		"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
		"'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", 
		"'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", 
		"'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", 
		"'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
		"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
		"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
		"'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", 
		"'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
		"'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
		"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
		"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
		"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
		"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
		"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
		"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
		"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
		"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
		"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
		"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", 
		"'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
		"'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
		"'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", 
		"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", "'CURSOR_NAME'", "'DATA'", 
		"'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
		"'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", 
		"'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
		"'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
		"'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
		"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", 
		"'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
		"'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", 
		"'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
		"'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
		"'IMPORT'", "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
		"'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", 
		"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
		"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
		"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
		"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
		"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
		"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
		"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
		"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
		"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
		"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
		"'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
		"'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", 
		"'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCACHE'", "'NOCOPY'", 
		"'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NOWAIT'", "'NODEGROUP'", 
		"'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", 
		"'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", 
		"'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
		"'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
		"'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", 
		"'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", 
		"'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", 
		"'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", 
		"'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
		"'RETURNS'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", 
		"'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
		"'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
		"'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", 
		"'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
		"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
		"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", 
		"'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", 
		"'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", 
		"'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
		"'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
		"'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", 
		"'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
		"'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
		"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
		"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
		"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
		"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
		"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
		"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
		"'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
		"'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", 
		"'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
		"'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'", 
		null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", 
		"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
		"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", "'GB2312'", 
		"'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
		"'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", 
		"'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
		"'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", 
		"'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
		"'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", 
		"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		"'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
		"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
		"'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
		"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
		"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
		"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
		"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
		"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
		"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", "'NEXTVAL'", 
		"'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", "'BINLOG_REPLAY'", 
		"'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", "'REPLICATION_MASTER_ADMIN'", 
		"':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", 
		"'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", 
		"'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
		"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
		"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
		"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
		"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
		"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
		"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
		"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
		"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", 
		"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
		"LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
		"MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", 
		"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
		"OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", "OUT", 
		"OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
		"RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
		"REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", "RETURN", 
		"REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
		"SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
		"SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
		"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
		"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
		"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
		"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
		"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
		"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
		"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", "JSON_CONTAINS_PATH", 
		"JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", "JSON_VALUE", 
		"JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", "JSON_MERGE", 
		"JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", "JSON_REPLACE", 
		"JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", "JSON_TYPE", 
		"JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
		"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
		"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
		"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
		"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
		"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
		"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
		"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
		"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
		"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
		"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
		"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
		"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", 
		"CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", 
		"CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
		"COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", 
		"CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
		"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
		"COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", 
		"DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
		"DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
		"ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
		"ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
		"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
		"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", 
		"FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		"IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
		"INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", "MID", 
		"MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
		"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", 
		"NOCYCLE", "NOMAXVALUE", "NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", 
		"ODBC", "OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", 
		"ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", 
		"PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", 
		"PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", "PREPARE", 
		"PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
		"QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", 
		"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", 
		"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESTART", "RESUME", 
		"RETURNED_SQLSTATE", "RETURNING", "RETURNS", "ROLE", "ROLLBACK", "ROLLUP", 
		"ROTATE", "ROW", "ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", "SCHEDULE", 
		"SECURITY", "SEQUENCE", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
		"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
		"TABLESPACE", "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", 
		"TRANSACTION", "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", "UNDEFINED", 
		"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		"VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", "WINDOW", "WITHOUT", 
		"WORK", "WRAPPER", "X509", "XA", "XML", "YES", "EUR", "USA", "JIS", "ISO", 
		"INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", 
		"MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", 
		"SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", 
		"BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", 
		"CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", "FIREWALL_USER", 
		"FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", 
		"ADMIN", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", 
		"NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", "PERSIST_RO_VARIABLES_ADMIN", 
		"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
		"RESOURCE_GROUP_USER", "ROLE_ADMIN", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
		"SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", 
		"VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
		"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
		"DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", 
		"HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", 
		"LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", 
		"UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", 
		"BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", 
		"NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
		"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
		"GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
		"AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT", 
		"ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", 
		"ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
		"BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
		"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
		"GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", 
		"GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
		"GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", 
		"INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", 
		"ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
		"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
		"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
		"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
		"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
		"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
		"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
		"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
		"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
		"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
		"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
		"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
		"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
		"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
		"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
		"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
		"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
		"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
		"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
		"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
		"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
		"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
		"X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", 
		"BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", 
		"REPLICA", "REPLICATION_MASTER_ADMIN", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
		"OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", 
		"EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
		"BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
		"RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
		"TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
		"COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
		"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
		"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
		"REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "STRING_USER_NAME_MARIADB", 
		"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MySqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementsContext sqlStatements() {
			return GetRuleContext<SqlStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (GET - 68)) | (1L << (GRANT - 68)) | (1L << (INSERT - 68)) | (1L << (KILL - 68)) | (1L << (LOAD - 68)) | (1L << (LOCK - 68)) | (1L << (OPTIMIZE - 68)) | (1L << (PURGE - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (RELEASE - 134)) | (1L << (RENAME - 134)) | (1L << (REPLACE - 134)) | (1L << (RESIGNAL - 134)) | (1L << (REVOKE - 134)) | (1L << (SELECT - 134)) | (1L << (SET - 134)) | (1L << (SHOW - 134)) | (1L << (SIGNAL - 134)) | (1L << (UNLOCK - 134)) | (1L << (UPDATE - 134)) | (1L << (USE - 134)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (BEGIN - 335)) | (1L << (BINLOG - 335)) | (1L << (CACHE - 335)) | (1L << (CHECKSUM - 335)) | (1L << (COMMIT - 335)) | (1L << (DEALLOCATE - 335)) | (1L << (DO - 335)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (FLUSH - 420)) | (1L << (HANDLER - 420)) | (1L << (HELP - 420)) | (1L << (INSTALL - 420)))) != 0) || ((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (PREPARE - 544)) | (1L << (REPAIR - 544)) | (1L << (RESET - 544)) | (1L << (ROLLBACK - 544)) | (1L << (SAVEPOINT - 544)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (START - 612)) | (1L << (STOP - 612)) | (1L << (TRUNCATE - 612)) | (1L << (UNINSTALL - 612)) | (1L << (XA - 612)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				State = 692;
				sqlStatements();
				}
			}

			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 695;
				Match(MINUS);
				State = 696;
				Match(MINUS);
				}
			}

			State = 699;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext[] sqlStatement() {
			return GetRuleContexts<SqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement(int i) {
			return GetRuleContext<SqlStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlStatements(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementsContext sqlStatements() {
		SqlStatementsContext _localctx = new SqlStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 710;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						State = 701;
						sqlStatement();
						State = 704;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MINUS) {
							{
							State = 702;
							Match(MINUS);
							State = 703;
							Match(MINUS);
							}
						}

						State = 707;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
						case 1:
							{
							State = 706;
							Match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						State = 709;
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 714;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				State = 715;
				sqlStatement();
				State = 721;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 718;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 716;
						Match(MINUS);
						State = 717;
						Match(MINUS);
						}
					}

					State = 720;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				State = 723;
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DdlStatementContext ddlStatement() {
			return GetRuleContext<DdlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationStatementContext administrationStatement() {
			return GetRuleContext<AdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlStatement(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementContext sqlStatement() {
		SqlStatementContext _localctx = new SqlStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sqlStatement);
		try {
			State = 733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726;
				ddlStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727;
				dmlStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 728;
				transactionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 729;
				replicationStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 730;
				preparedStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 731;
				administrationStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 732;
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return GetRuleContext<CreateTablespaceInnodbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceNdbContext createTablespaceNdb() {
			return GetRuleContext<CreateTablespaceNdbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSequenceContext createSequence() {
			return GetRuleContext<CreateSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterFunctionContext alterFunction() {
			return GetRuleContext<AlterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterInstanceContext alterInstance() {
			return GetRuleContext<AlterInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterProcedureContext alterProcedure() {
			return GetRuleContext<AlterProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSequenceContext alterSequence() {
			return GetRuleContext<AlterSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTablespaceContext dropTablespace() {
			return GetRuleContext<DropTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropSequenceContext dropSequence() {
			return GetRuleContext<DropSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetRoleContext setRole() {
			return GetRuleContext<SetRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableContext renameTable() {
			return GetRuleContext<RenameTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDdlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDdlStatement(this);
		}
	}

	[RuleVersion(0)]
	public DdlStatementContext ddlStatement() {
		DdlStatementContext _localctx = new DdlStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ddlStatement);
		try {
			State = 778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737;
				createDatabase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 738;
				createEvent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 739;
				createIndex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 740;
				createLogfileGroup();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 741;
				createProcedure();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 742;
				createFunction();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 743;
				createServer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 744;
				createTable();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 745;
				createTablespaceInnodb();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 746;
				createTablespaceNdb();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 747;
				createTrigger();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 748;
				createView();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 749;
				createRole();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 750;
				createSequence();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 751;
				alterDatabase();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 752;
				alterEvent();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 753;
				alterFunction();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 754;
				alterInstance();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 755;
				alterLogfileGroup();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 756;
				alterProcedure();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 757;
				alterServer();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 758;
				alterTable();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 759;
				alterTablespace();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 760;
				alterView();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 761;
				alterSequence();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 762;
				dropDatabase();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 763;
				dropEvent();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 764;
				dropIndex();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 765;
				dropLogfileGroup();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 766;
				dropProcedure();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 767;
				dropFunction();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 768;
				dropServer();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 769;
				dropTable();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 770;
				dropTablespace();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 771;
				dropTrigger();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 772;
				dropView();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 773;
				dropRole();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 774;
				dropSequence();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 775;
				setRole();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 776;
				renameTable();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 777;
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataStatementContext loadDataStatement() {
			return GetRuleContext<LoadDataStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadXmlStatementContext loadXmlStatement() {
			return GetRuleContext<LoadXmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDmlStatement(this);
		}
	}

	[RuleVersion(0)]
	public DmlStatementContext dmlStatement() {
		DmlStatementContext _localctx = new DmlStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_dmlStatement);
		try {
			State = 790;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 780;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 781;
				insertStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 782;
				updateStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 783;
				deleteStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 784;
				replaceStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 785;
				callStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 786;
				loadDataStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 787;
				loadXmlStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 788;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 789;
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionContext startTransaction() {
			return GetRuleContext<StartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommitWorkContext commitWork() {
			return GetRuleContext<CommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackWorkContext rollbackWork() {
			return GetRuleContext<RollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackStatementContext rollbackStatement() {
			return GetRuleContext<RollbackStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReleaseStatementContext releaseStatement() {
			return GetRuleContext<ReleaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTablesContext lockTables() {
			return GetRuleContext<LockTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlockTablesContext unlockTables() {
			return GetRuleContext<UnlockTablesContext>(0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_transactionStatement);
		try {
			State = 801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 792;
				startTransaction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 793;
				beginWork();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 794;
				commitWork();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 795;
				rollbackWork();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 796;
				savepointStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 797;
				rollbackStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 798;
				releaseStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 799;
				lockTables();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 800;
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationFilterContext changeReplicationFilter() {
			return GetRuleContext<ChangeReplicationFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurgeBinaryLogsContext purgeBinaryLogs() {
			return GetRuleContext<PurgeBinaryLogsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetMasterContext resetMaster() {
			return GetRuleContext<ResetMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetSlaveContext resetSlave() {
			return GetRuleContext<ResetSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartSlaveContext startSlave() {
			return GetRuleContext<StartSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopSlaveContext stopSlave() {
			return GetRuleContext<StopSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartGroupReplicationContext startGroupReplication() {
			return GetRuleContext<StartGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopGroupReplicationContext stopGroupReplication() {
			return GetRuleContext<StopGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStartTransactionContext xaStartTransaction() {
			return GetRuleContext<XaStartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaEndTransactionContext xaEndTransaction() {
			return GetRuleContext<XaEndTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaPrepareStatementContext xaPrepareStatement() {
			return GetRuleContext<XaPrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaCommitWorkContext xaCommitWork() {
			return GetRuleContext<XaCommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRollbackWorkContext xaRollbackWork() {
			return GetRuleContext<XaRollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRecoverWorkContext xaRecoverWork() {
			return GetRuleContext<XaRecoverWorkContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_replicationStatement);
		try {
			State = 818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				changeMaster();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 804;
				changeReplicationFilter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 805;
				purgeBinaryLogs();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 806;
				resetMaster();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 807;
				resetSlave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 808;
				startSlave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 809;
				stopSlave();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 810;
				startGroupReplication();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 811;
				stopGroupReplication();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 812;
				xaStartTransaction();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 813;
				xaEndTransaction();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 814;
				xaPrepareStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 815;
				xaCommitWork();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 816;
				xaRollbackWork();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 817;
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrepareStatementContext prepareStatement() {
			return GetRuleContext<PrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatePrepareContext deallocatePrepare() {
			return GetRuleContext<DeallocatePrepareContext>(0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_preparedStatement);
		try {
			State = 823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 820;
				prepareStatement();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 821;
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 822;
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_compoundStatement);
		try {
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 825;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 826;
				caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 827;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 828;
				leaveStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 829;
				loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 830;
				repeatStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 831;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 832;
				iterateStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 833;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 834;
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantProxyContext grantProxy() {
			return GetRuleContext<GrantProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeProxyContext revokeProxy() {
			return GetRuleContext<RevokeProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzeTableContext analyzeTable() {
			return GetRuleContext<AnalyzeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableContext checkTable() {
			return GetRuleContext<CheckTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChecksumTableContext checksumTable() {
			return GetRuleContext<ChecksumTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptimizeTableContext optimizeTable() {
			return GetRuleContext<OptimizeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTableContext repairTable() {
			return GetRuleContext<RepairTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfunctionContext createUdfunction() {
			return GetRuleContext<CreateUdfunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallPluginContext installPlugin() {
			return GetRuleContext<InstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallPluginContext uninstallPlugin() {
			return GetRuleContext<UninstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinlogStatementContext binlogStatement() {
			return GetRuleContext<BinlogStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheIndexStatementContext cacheIndexStatement() {
			return GetRuleContext<CacheIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushStatementContext flushStatement() {
			return GetRuleContext<FlushStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KillStatementContext killStatement() {
			return GetRuleContext<KillStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return GetRuleContext<LoadIndexIntoCacheContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetStatementContext resetStatement() {
			return GetRuleContext<ResetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShutdownStatementContext shutdownStatement() {
			return GetRuleContext<ShutdownStatementContext>(0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAdministrationStatement(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationStatementContext administrationStatement() {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_administrationStatement);
		try {
			State = 862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 837;
				alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 838;
				createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 839;
				dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 840;
				grantStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 841;
				grantProxy();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 842;
				renameUser();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 843;
				revokeStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 844;
				revokeProxy();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 845;
				analyzeTable();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 846;
				checkTable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 847;
				checksumTable();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 848;
				optimizeTable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 849;
				repairTable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 850;
				createUdfunction();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 851;
				installPlugin();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 852;
				uninstallPlugin();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 853;
				setStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 854;
				showStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 855;
				binlogStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 856;
				cacheIndexStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 857;
				flushStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 858;
				killStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 859;
				loadIndexIntoCache();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 860;
				resetStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 861;
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDescribeStatementContext simpleDescribeStatement() {
			return GetRuleContext<SimpleDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullDescribeStatementContext fullDescribeStatement() {
			return GetRuleContext<FullDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpStatementContext helpStatement() {
			return GetRuleContext<HelpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext useStatement() {
			return GetRuleContext<UseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsStatementContext diagnosticsStatement() {
			return GetRuleContext<DiagnosticsStatementContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_utilityStatement);
		try {
			State = 871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864;
				simpleDescribeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865;
				fullDescribeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 866;
				helpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 867;
				useStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 868;
				signalStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 869;
				resignalStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 870;
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			Match(CREATE);
			State = 874;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 875;
				ifNotExists();
				}
			}

			State = 878;
			uid();
			State = 882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET) {
				{
				{
				State = 879;
				createDatabaseOption();
				}
				}
				State = 884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			Match(CREATE);
			State = 887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 886;
				ownerStatement();
				}
			}

			State = 889;
			Match(EVENT);
			State = 891;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 890;
				ifNotExists();
				}
			}

			State = 893;
			fullId();
			State = 894;
			Match(ON);
			State = 895;
			Match(SCHEDULE);
			State = 896;
			scheduleExpression();
			State = 903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 897;
				Match(ON);
				State = 898;
				Match(COMPLETION);
				State = 900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 899;
					Match(NOT);
					}
				}

				State = 902;
				Match(PRESERVE);
				}
			}

			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 905;
				enableType();
				}
			}

			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 908;
				Match(COMMENT);
				State = 909;
				Match(STRING_LITERAL);
				}
			}

			State = 912;
			Match(DO);
			State = 913;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken indexCategory;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOCOPY() { return GetTokens(MySqlParser.NOCOPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY(int i) {
			return GetToken(MySqlParser.NOCOPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSTANT() { return GetTokens(MySqlParser.INSTANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT(int i) {
			return GetToken(MySqlParser.INSTANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(CREATE);
			State = 918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 916;
				Match(OR);
				State = 917;
				Match(REPLACE);
				}
			}

			State = 921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 920;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				State = 923;
				_localctx.indexCategory = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					_localctx.indexCategory = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 926;
			Match(INDEX);
			State = 930;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 927;
				Match(IF);
				State = 928;
				Match(NOT);
				State = 929;
				Match(EXISTS);
				}
			}

			State = 932;
			uid();
			State = 934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 933;
				indexType();
				}
			}

			State = 936;
			Match(ON);
			State = 937;
			tableName();
			State = 938;
			indexColumnNames();
			State = 940;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 939;
				waitNowaitClause();
				}
			}

			State = 945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				State = 942;
				indexOption();
				}
				}
				State = 947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 960;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 958;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 948;
						Match(ALGORITHM);
						State = 950;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 949;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 952;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT || _la==NOCOPY) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 953;
						Match(LOCK);
						State = 955;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 954;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 957;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 962;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public IToken undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			Match(CREATE);
			State = 964;
			Match(LOGFILE);
			State = 965;
			Match(GROUP);
			State = 966;
			uid();
			State = 967;
			Match(ADD);
			State = 968;
			Match(UNDOFILE);
			State = 969;
			_localctx.undoFile = Match(STRING_LITERAL);
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 970;
				Match(INITIAL_SIZE);
				State = 972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 971;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 974;
				_localctx.initSize = fileSizeLiteral();
				}
			}

			State = 982;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				State = 977;
				Match(UNDO_BUFFER_SIZE);
				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 978;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 981;
				_localctx.undoSize = fileSizeLiteral();
				}
			}

			State = 989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				State = 984;
				Match(REDO_BUFFER_SIZE);
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 985;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 988;
				_localctx.redoSize = fileSizeLiteral();
				}
			}

			State = 996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 991;
				Match(NODEGROUP);
				State = 993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 992;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 995;
				uid();
				}
			}

			State = 999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 998;
				Match(WAIT);
				}
			}

			State = 1006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1001;
				Match(COMMENT);
				State = 1003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1002;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1005;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1008;
			Match(ENGINE);
			State = 1010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1009;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1012;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014;
			Match(CREATE);
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1015;
				ownerStatement();
				}
			}

			State = 1018;
			Match(PROCEDURE);
			State = 1019;
			fullId();
			State = 1020;
			Match(LR_BRACKET);
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (IN - 70)) | (1L << (INOUT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (OUT - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 1021;
				procedureParameter();
				}
			}

			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1024;
				Match(COMMA);
				State = 1025;
				procedureParameter();
				}
				}
				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1031;
			Match(RR_BRACKET);
			State = 1035;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1032;
					routineOption();
					}
					} 
				}
				State = 1037;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 1038;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			Match(CREATE);
			State = 1042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1041;
				ownerStatement();
				}
			}

			State = 1044;
			Match(FUNCTION);
			State = 1045;
			fullId();
			State = 1046;
			Match(LR_BRACKET);
			State = 1048;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 1047;
				functionParameter();
				}
			}

			State = 1054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1050;
				Match(COMMA);
				State = 1051;
				functionParameter();
				}
				}
				State = 1056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1057;
			Match(RR_BRACKET);
			State = 1058;
			Match(RETURNS);
			State = 1059;
			dataType();
			State = 1063;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1060;
					routineOption();
					}
					} 
				}
				State = 1065;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			State = 1068;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case BUCKETS:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IGNORED:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case SKIP_:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 1066;
				routineBody();
				}
				break;
			case RETURN:
				{
				State = 1067;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateRole(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 36, RULE_createRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(CREATE);
			State = 1071;
			Match(ROLE);
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1072;
				Match(IF);
				State = 1073;
				Match(NOT);
				State = 1074;
				Match(EXISTS);
				}
			}

			State = 1077;
			roleName();
			State = 1082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1078;
				Match(COMMA);
				State = 1079;
				roleName();
				}
				}
				State = 1084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public IToken wrapperName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 38, RULE_createServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			Match(CREATE);
			State = 1086;
			Match(SERVER);
			State = 1087;
			uid();
			State = 1088;
			Match(FOREIGN);
			State = 1089;
			Match(DATA);
			State = 1090;
			Match(WRAPPER);
			State = 1091;
			_localctx.wrapperName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				_localctx.wrapperName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1092;
			Match(OPTIONS);
			State = 1093;
			Match(LR_BRACKET);
			State = 1094;
			serverOption();
			State = 1099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1095;
				Match(COMMA);
				State = 1096;
				serverOption();
				}
				}
				State = 1101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1102;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
	 
		public CreateTableContext() { }
		public virtual void CopyFrom(CreateTableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CopyCreateTableContext : CreateTableContext {
		public TableNameContext parenthesisTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CopyCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCopyCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCopyCreateTable(this);
		}
	}
	public partial class ColumnCreateTableContext : CreateTableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnCreateTable(this);
		}
	}
	public partial class QueryCreateTableContext : CreateTableContext {
		public IToken keyViolate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPLACE() { return GetTokens(MySqlParser.REPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE(int i) {
			return GetToken(MySqlParser.REPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryCreateTable(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 40, RULE_createTable);
		int _la;
		try {
			int _alt;
			State = 1194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1104;
				Match(CREATE);
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1105;
					Match(OR);
					State = 1106;
					Match(REPLACE);
					}
				}

				State = 1110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1109;
					Match(TEMPORARY);
					}
				}

				State = 1112;
				Match(TABLE);
				State = 1114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1113;
					ifNotExists();
					}
				}

				State = 1116;
				tableName();
				State = 1124;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 1117;
					Match(LIKE);
					State = 1118;
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					State = 1119;
					Match(LR_BRACKET);
					State = 1120;
					Match(LIKE);
					State = 1121;
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					State = 1122;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1126;
				Match(CREATE);
				State = 1129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1127;
					Match(OR);
					State = 1128;
					Match(REPLACE);
					}
				}

				State = 1132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1131;
					Match(TEMPORARY);
					}
				}

				State = 1134;
				Match(TABLE);
				State = 1136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1135;
					ifNotExists();
					}
				}

				State = 1138;
				tableName();
				State = 1140;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 1139;
					createDefinitions();
					}
					break;
				}
				State = 1152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (AUTOEXTEND_SIZE - 332)) | (1L << (AUTO_INCREMENT - 332)) | (1L << (AVG_ROW_LENGTH - 332)) | (1L << (CHECKSUM - 332)) | (1L << (PAGE_CHECKSUM - 332)) | (1L << (COMMENT - 332)) | (1L << (COMPRESSION - 332)) | (1L << (CONNECTION - 332)) | (1L << (DATA - 332)) | (1L << (DELAY_KEY_WRITE - 332)) | (1L << (ENCRYPTION - 332)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (KEY_BLOCK_SIZE - 398)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (PACK_KEYS - 487)) | (1L << (PASSWORD - 487)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (ROW_FORMAT - 585)) | (1L << (START - 585)) | (1L << (STATS_AUTO_RECALC - 585)) | (1L << (STATS_PERSISTENT - 585)) | (1L << (STATS_SAMPLE_PAGES - 585)) | (1L << (STORAGE - 585)) | (1L << (TABLESPACE - 585)) | (1L << (TABLE_TYPE - 585)))) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					State = 1142;
					tableOption();
					State = 1149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (CHARACTER - 24)) | (1L << (COLLATE - 24)) | (1L << (DEFAULT - 24)) | (1L << (INDEX - 24)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (AUTOEXTEND_SIZE - 332)) | (1L << (AUTO_INCREMENT - 332)) | (1L << (AVG_ROW_LENGTH - 332)) | (1L << (CHECKSUM - 332)) | (1L << (PAGE_CHECKSUM - 332)) | (1L << (COMMENT - 332)) | (1L << (COMPRESSION - 332)) | (1L << (CONNECTION - 332)) | (1L << (DATA - 332)) | (1L << (DELAY_KEY_WRITE - 332)) | (1L << (ENCRYPTION - 332)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (INSERT_METHOD - 398)) | (1L << (KEY_BLOCK_SIZE - 398)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (PACK_KEYS - 487)) | (1L << (PASSWORD - 487)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (ROW_FORMAT - 585)) | (1L << (START - 585)) | (1L << (STATS_AUTO_RECALC - 585)) | (1L << (STATS_PERSISTENT - 585)) | (1L << (STATS_SAMPLE_PAGES - 585)) | (1L << (STORAGE - 585)) | (1L << (TABLESPACE - 585)) | (1L << (TABLE_TYPE - 585)))) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==COMMA) {
						{
						{
						State = 1144;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 1143;
							Match(COMMA);
							}
						}

						State = 1146;
						tableOption();
						}
						}
						State = 1151;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1154;
					partitionDefinitions();
					}
				}

				State = 1158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					State = 1157;
					((QueryCreateTableContext)_localctx).keyViolate = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1160;
					Match(AS);
					}
				}

				State = 1163;
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1165;
				Match(CREATE);
				State = 1168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1166;
					Match(OR);
					State = 1167;
					Match(REPLACE);
					}
				}

				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1170;
					Match(TEMPORARY);
					}
				}

				State = 1173;
				Match(TABLE);
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1174;
					ifNotExists();
					}
				}

				State = 1177;
				tableName();
				State = 1178;
				createDefinitions();
				State = 1189;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
				case 1:
					{
					State = 1179;
					tableOption();
					State = 1186;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1181;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 1180;
								Match(COMMA);
								}
							}

							State = 1183;
							tableOption();
							}
							} 
						}
						State = 1188;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
					}
					}
					break;
				}
				State = 1192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1191;
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceInnodbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext fileBlockSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceInnodb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceInnodb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceInnodb(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceInnodbContext createTablespaceInnodb() {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(Context, State);
		EnterRule(_localctx, 42, RULE_createTablespaceInnodb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196;
			Match(CREATE);
			State = 1197;
			Match(TABLESPACE);
			State = 1198;
			uid();
			State = 1199;
			Match(ADD);
			State = 1200;
			Match(DATAFILE);
			State = 1201;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				State = 1202;
				Match(FILE_BLOCK_SIZE);
				State = 1203;
				Match(EQUAL_SYMBOL);
				State = 1204;
				_localctx.fileBlockSize = fileSizeLiteral();
				}
			}

			State = 1212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 1207;
				Match(ENGINE);
				State = 1209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1208;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1211;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceNdbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceNdb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceNdb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceNdb(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceNdbContext createTablespaceNdb() {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(Context, State);
		EnterRule(_localctx, 44, RULE_createTablespaceNdb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1214;
			Match(CREATE);
			State = 1215;
			Match(TABLESPACE);
			State = 1216;
			uid();
			State = 1217;
			Match(ADD);
			State = 1218;
			Match(DATAFILE);
			State = 1219;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1220;
			Match(USE);
			State = 1221;
			Match(LOGFILE);
			State = 1222;
			Match(GROUP);
			State = 1223;
			uid();
			State = 1229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				State = 1224;
				Match(EXTENT_SIZE);
				State = 1226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1225;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1228;
				_localctx.extentSize = fileSizeLiteral();
				}
			}

			State = 1236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 1231;
				Match(INITIAL_SIZE);
				State = 1233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1232;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1235;
				_localctx.initialSize = fileSizeLiteral();
				}
			}

			State = 1243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				State = 1238;
				Match(AUTOEXTEND_SIZE);
				State = 1240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1239;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1242;
				_localctx.autoextendSize = fileSizeLiteral();
				}
			}

			State = 1250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_SIZE) {
				{
				State = 1245;
				Match(MAX_SIZE);
				State = 1247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1246;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1249;
				_localctx.maxSize = fileSizeLiteral();
				}
			}

			State = 1257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 1252;
				Match(NODEGROUP);
				State = 1254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1253;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1256;
				uid();
				}
			}

			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 1259;
				Match(WAIT);
				}
			}

			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1262;
				Match(COMMENT);
				State = 1264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1263;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1266;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1269;
			Match(ENGINE);
			State = 1271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1270;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1273;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public FullIdContext thisTrigger;
		public IToken triggerTime;
		public IToken triggerEvent;
		public IToken triggerPlace;
		public FullIdContext otherTrigger;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(MySqlParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 46, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275;
			Match(CREATE);
			State = 1278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1276;
				Match(OR);
				State = 1277;
				Match(REPLACE);
				}
			}

			State = 1281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1280;
				ownerStatement();
				}
			}

			State = 1283;
			Match(TRIGGER);
			State = 1284;
			_localctx.thisTrigger = fullId();
			State = 1285;
			_localctx.triggerTime = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				_localctx.triggerTime = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1286;
			_localctx.triggerEvent = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				_localctx.triggerEvent = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1287;
			Match(ON);
			State = 1288;
			tableName();
			State = 1289;
			Match(FOR);
			State = 1290;
			Match(EACH);
			State = 1291;
			Match(ROW);
			State = 1294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1292;
				_localctx.triggerPlace = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					_localctx.triggerPlace = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1293;
				_localctx.otherTrigger = fullId();
				}
				break;
			}
			State = 1296;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MySqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 48, RULE_withClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1298;
			Match(WITH);
			State = 1300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1299;
				Match(RECURSIVE);
				}
				break;
			}
			State = 1302;
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CteNameContext cteName() {
			return GetRuleContext<CteNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext[] cteColumnName() {
			return GetRuleContexts<CteColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext cteColumnName(int i) {
			return GetRuleContext<CteColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpressions(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionsContext commonTableExpressions() {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(Context, State);
		EnterRule(_localctx, 50, RULE_commonTableExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1304;
			cteName();
			State = 1316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1305;
				Match(LR_BRACKET);
				State = 1306;
				cteColumnName();
				State = 1311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1307;
					Match(COMMA);
					State = 1308;
					cteColumnName();
					}
					}
					State = 1313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1314;
				Match(RR_BRACKET);
				}
			}

			State = 1318;
			Match(AS);
			State = 1319;
			Match(LR_BRACKET);
			State = 1320;
			dmlStatement();
			State = 1321;
			Match(RR_BRACKET);
			State = 1324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1322;
				Match(COMMA);
				State = 1323;
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCteName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCteName(this);
		}
	}

	[RuleVersion(0)]
	public CteNameContext cteName() {
		CteNameContext _localctx = new CteNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_cteName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCteColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCteColumnName(this);
		}
	}

	[RuleVersion(0)]
	public CteColumnNameContext cteColumnName() {
		CteColumnNameContext _localctx = new CteColumnNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_cteColumnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 56, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			Match(CREATE);
			State = 1333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1331;
				Match(OR);
				State = 1332;
				Match(REPLACE);
				}
			}

			State = 1338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 1335;
				Match(ALGORITHM);
				State = 1336;
				Match(EQUAL_SYMBOL);
				State = 1337;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1340;
				ownerStatement();
				}
			}

			State = 1346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 1343;
				Match(SQL);
				State = 1344;
				Match(SECURITY);
				State = 1345;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1348;
			Match(VIEW);
			State = 1349;
			fullId();
			State = 1354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1350;
				Match(LR_BRACKET);
				State = 1351;
				uidList();
				State = 1352;
				Match(RR_BRACKET);
				}
			}

			State = 1356;
			Match(AS);
			State = 1358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1357;
				withClause();
				}
			}

			State = 1360;
			selectStatement();
			State = 1367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 1361;
				Match(WITH);
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 1362;
					_localctx.checkOption = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOption = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1365;
				Match(CHECK);
				State = 1366;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MySqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext[] sequenceSpec() {
			return GetRuleContexts<SequenceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext sequenceSpec(int i) {
			return GetRuleContext<SequenceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateSequence(this);
		}
	}

	[RuleVersion(0)]
	public CreateSequenceContext createSequence() {
		CreateSequenceContext _localctx = new CreateSequenceContext(Context, State);
		EnterRule(_localctx, 58, RULE_createSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369;
			Match(CREATE);
			State = 1372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1370;
				Match(OR);
				State = 1371;
				Match(REPLACE);
				}
			}

			State = 1375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 1374;
				Match(TEMPORARY);
				}
			}

			State = 1377;
			Match(SEQUENCE);
			State = 1379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1378;
				ifNotExists();
				}
			}

			State = 1381;
			fullId();
			State = 1386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1384;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
					case 1:
						{
						State = 1382;
						sequenceSpec();
						}
						break;
					case 2:
						{
						State = 1383;
						tableOption();
						}
						break;
					}
					} 
				}
				State = 1388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MySqlParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(MySqlParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMINVALUE() { return GetToken(MySqlParser.NOMINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMAXVALUE() { return GetToken(MySqlParser.NOMAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCACHE() { return GetToken(MySqlParser.NOCACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(MySqlParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCYCLE() { return GetToken(MySqlParser.NOCYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(MySqlParser.RESTART, 0); }
		public SequenceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSequenceSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSequenceSpec(this);
		}
	}

	[RuleVersion(0)]
	public SequenceSpecContext sequenceSpec() {
		SequenceSpecContext _localctx = new SequenceSpecContext(Context, State);
		EnterRule(_localctx, 60, RULE_sequenceSpec);
		int _la;
		try {
			State = 1428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1389;
				Match(INCREMENT);
				State = 1391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY || _la==EQUAL_SYMBOL) {
					{
					State = 1390;
					_la = TokenStream.LA(1);
					if ( !(_la==BY || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1393;
				decimalLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1394;
				Match(MINVALUE);
				State = 1396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1395;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1398;
				decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1399;
				Match(NO);
				State = 1400;
				Match(MINVALUE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1401;
				Match(NOMINVALUE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1402;
				Match(MAXVALUE);
				State = 1404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1403;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1406;
				decimalLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1407;
				Match(NO);
				State = 1408;
				Match(MAXVALUE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1409;
				Match(NOMAXVALUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1410;
				Match(START);
				State = 1412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					State = 1411;
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1414;
				decimalLiteral();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1415;
				Match(CACHE);
				State = 1417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1416;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1419;
				decimalLiteral();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1420;
				Match(NOCACHE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1421;
				Match(CYCLE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1422;
				Match(NOCYCLE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1423;
				Match(RESTART);
				State = 1425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					State = 1424;
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1427;
				decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 62, RULE_createDatabaseOption);
		int _la;
		try {
			State = 1449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1430;
					Match(DEFAULT);
					}
				}

				State = 1433;
				charSet();
				State = 1435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1434;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1439;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1437;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1438;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1441;
					Match(DEFAULT);
					}
				}

				State = 1444;
				Match(COLLATE);
				State = 1446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1445;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1448;
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharSet(this);
		}
	}

	[RuleVersion(0)]
	public CharSetContext charSet() {
		CharSetContext _localctx = new CharSetContext(Context, State);
		EnterRule(_localctx, 64, RULE_charSet);
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1451;
				Match(CHARACTER);
				State = 1452;
				Match(SET);
				}
				break;
			case CHARSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1453;
				Match(CHARSET);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1454;
				Match(CHAR);
				State = 1455;
				Match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOwnerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOwnerStatement(this);
		}
	}

	[RuleVersion(0)]
	public OwnerStatementContext ownerStatement() {
		OwnerStatementContext _localctx = new OwnerStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_ownerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458;
			Match(DEFINER);
			State = 1459;
			Match(EQUAL_SYMBOL);
			State = 1466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case SKIP_:
			case STACKED:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case MEMORY:
			case CATALOG_NAME:
			case ENGINE_ATTRIBUTE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SCHEMA_NAME:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
			case STRING_USER_NAME_MARIADB:
				{
				State = 1460;
				userName();
				}
				break;
			case CURRENT_USER:
				{
				State = 1461;
				Match(CURRENT_USER);
				State = 1464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 1462;
					Match(LR_BRACKET);
					State = 1463;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleExpressionContext : ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduleExpression; } }
	 
		public ScheduleExpressionContext() { }
		public virtual void CopyFrom(ScheduleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreciseScheduleContext : ScheduleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue() {
			return GetRuleContext<TimestampValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreciseSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreciseSchedule(this);
		}
	}
	public partial class IntervalScheduleContext : ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext _intervalExpr;
		public IList<IntervalExprContext> _startIntervals = new List<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public IList<IntervalExprContext> _endIntervals = new List<IntervalExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext[] timestampValue() {
			return GetRuleContexts<TimestampValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue(int i) {
			return GetRuleContext<TimestampValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalSchedule(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleExpressionContext scheduleExpression() {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_scheduleExpression);
		int _la;
		try {
			State = 1502;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1468;
				Match(AT);
				State = 1469;
				timestampValue();
				State = 1473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1470;
					intervalExpr();
					}
					}
					State = 1475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1476;
				Match(EVERY);
				State = 1479;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
				case 1:
					{
					State = 1477;
					decimalLiteral();
					}
					break;
				case 2:
					{
					State = 1478;
					expression(0);
					}
					break;
				}
				State = 1481;
				intervalType();
				State = 1490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS) {
					{
					State = 1482;
					Match(STARTS);
					State = 1483;
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					State = 1487;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1484;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._startIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1489;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS) {
					{
					State = 1492;
					Match(ENDS);
					State = 1493;
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					State = 1497;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1494;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._endIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1499;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTimestampValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTimestampValue(this);
		}
	}

	[RuleVersion(0)]
	public TimestampValueContext timestampValue() {
		TimestampValueContext _localctx = new TimestampValueContext(Context, State);
		EnterRule(_localctx, 70, RULE_timestampValue);
		try {
			State = 1508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1504;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1505;
				stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1506;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1507;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpr(this);
		}
	}

	[RuleVersion(0)]
	public IntervalExprContext intervalExpr() {
		IntervalExprContext _localctx = new IntervalExprContext(Context, State);
		EnterRule(_localctx, 72, RULE_intervalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1510;
			Match(PLUS);
			State = 1511;
			Match(INTERVAL);
			State = 1514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				State = 1512;
				decimalLiteral();
				}
				break;
			case 2:
				{
				State = 1513;
				expression(0);
				}
				break;
			}
			State = 1516;
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH() { return GetToken(MySqlParser.YEAR_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR() { return GetToken(MySqlParser.DAY_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE() { return GetToken(MySqlParser.DAY_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND() { return GetToken(MySqlParser.DAY_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE() { return GetToken(MySqlParser.HOUR_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND() { return GetToken(MySqlParser.HOUR_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND() { return GetToken(MySqlParser.MINUTE_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND() { return GetToken(MySqlParser.SECOND_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND() { return GetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND() { return GetToken(MySqlParser.HOUR_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND() { return GetToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalType(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeContext intervalType() {
		IntervalTypeContext _localctx = new IntervalTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_intervalType);
		try {
			State = 1531;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1518;
				intervalTypeBase();
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1519;
				Match(YEAR);
				}
				break;
			case YEAR_MONTH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1520;
				Match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1521;
				Match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1522;
				Match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1523;
				Match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1524;
				Match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1525;
				Match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1526;
				Match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1527;
				Match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1528;
				Match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1529;
				Match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1530;
				Match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEnableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEnableType(this);
		}
	}

	[RuleVersion(0)]
	public EnableTypeContext enableType() {
		EnableTypeContext _localctx = new EnableTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_enableType);
		try {
			State = 1538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1533;
				Match(ENABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1534;
				Match(DISABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1535;
				Match(DISABLE);
				State = 1536;
				Match(ON);
				State = 1537;
				Match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE() { return GetToken(MySqlParser.RTREE, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540;
			Match(USING);
			State = 1541;
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE || _la==HASH || _la==RTREE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERING() { return GetToken(MySqlParser.CLUSTERING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES() { return GetToken(MySqlParser.YES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORED() { return GetToken(MySqlParser.IGNORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 80, RULE_indexOption);
		int _la;
		try {
			State = 1573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_BLOCK_SIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1543;
				Match(KEY_BLOCK_SIZE);
				State = 1545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1544;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1547;
				fileSizeLiteral();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1548;
				indexType();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1549;
				Match(WITH);
				State = 1550;
				Match(PARSER);
				State = 1551;
				uid();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1552;
				Match(COMMENT);
				State = 1553;
				Match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1554;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1555;
				Match(ENGINE_ATTRIBUTE);
				State = 1557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1556;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1559;
				Match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1560;
				Match(SECONDARY_ENGINE_ATTRIBUTE);
				State = 1562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1561;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1564;
				Match(STRING_LITERAL);
				}
				break;
			case CLUSTERING:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1565;
				Match(CLUSTERING);
				State = 1566;
				Match(EQUAL_SYMBOL);
				State = 1567;
				_la = TokenStream.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case IGNORED:
			case NOT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1571;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IGNORED:
					{
					State = 1568;
					Match(IGNORED);
					}
					break;
				case NOT:
					{
					State = 1569;
					Match(NOT);
					State = 1570;
					Match(IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken direction;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(MySqlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 82, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) {
				{
				State = 1575;
				_localctx.direction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) ) {
					_localctx.direction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1578;
			uid();
			State = 1579;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 84, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			uid();
			State = 1582;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
	 
		public RoutineOptionContext() { }
		public virtual void CopyFrom(RoutineOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RoutineBehaviorContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(MySqlParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineBehavior(this);
		}
	}
	public partial class RoutineLanguageContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineLanguage(this);
		}
	}
	public partial class RoutineCommentContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineComment(this);
		}
	}
	public partial class RoutineSecurityContext : RoutineOptionContext {
		public IToken context;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineSecurity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineSecurity(this);
		}
	}
	public partial class RoutineDataContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS() { return GetToken(MySqlParser.READS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES() { return GetToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineData(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 86, RULE_routineOption);
		int _la;
		try {
			State = 1607;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1584;
				Match(COMMENT);
				State = 1585;
				Match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1586;
				Match(LANGUAGE);
				State = 1587;
				Match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1588;
					Match(NOT);
					}
				}

				State = 1591;
				Match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1602;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONTAINS:
					{
					State = 1592;
					Match(CONTAINS);
					State = 1593;
					Match(SQL);
					}
					break;
				case NO:
					{
					State = 1594;
					Match(NO);
					State = 1595;
					Match(SQL);
					}
					break;
				case READS:
					{
					State = 1596;
					Match(READS);
					State = 1597;
					Match(SQL);
					State = 1598;
					Match(DATA);
					}
					break;
				case MODIFIES:
					{
					State = 1599;
					Match(MODIFIES);
					State = 1600;
					Match(SQL);
					State = 1601;
					Match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1604;
				Match(SQL);
				State = 1605;
				Match(SECURITY);
				State = 1606;
				((RoutineSecurityContext)_localctx).context = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 88, RULE_serverOption);
		try {
			State = 1623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1609;
				Match(HOST);
				State = 1610;
				Match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1611;
				Match(DATABASE);
				State = 1612;
				Match(STRING_LITERAL);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1613;
				Match(USER);
				State = 1614;
				Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1615;
				Match(PASSWORD);
				State = 1616;
				Match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1617;
				Match(SOCKET);
				State = 1618;
				Match(STRING_LITERAL);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1619;
				Match(OWNER);
				State = 1620;
				Match(STRING_LITERAL);
				}
				break;
			case PORT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1621;
				Match(PORT);
				State = 1622;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionsContext createDefinitions() {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(Context, State);
		EnterRule(_localctx, 90, RULE_createDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625;
			Match(LR_BRACKET);
			State = 1626;
			createDefinition();
			State = 1631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1627;
				Match(COMMA);
				State = 1628;
				createDefinition();
				}
				}
				State = 1633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1634;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionContext : ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinition; } }
	 
		public CreateDefinitionContext() { }
		public virtual void CopyFrom(CreateDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColumnDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDeclaration(this);
		}
	}
	public partial class ConstraintDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintContext tableConstraint() {
			return GetRuleContext<TableConstraintContext>(0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintDeclaration(this);
		}
	}
	public partial class IndexDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnDefinitionContext indexColumnDefinition() {
			return GetRuleContext<IndexColumnDefinitionContext>(0);
		}
		public IndexDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionContext createDefinition() {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(Context, State);
		EnterRule(_localctx, 92, RULE_createDefinition);
		try {
			State = 1641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1636;
				uid();
				State = 1637;
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1639;
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1640;
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext[] columnConstraint() {
			return GetRuleContexts<ColumnConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext columnConstraint(int i) {
			return GetRuleContext<ColumnConstraintContext>(i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 94, RULE_columnDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643;
			dataType();
			State = 1647;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1644;
					columnConstraint();
					}
					} 
				}
				State = 1649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
	 
		public ColumnConstraintContext() { }
		public virtual void CopyFrom(ColumnConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StorageColumnConstraintContext : ColumnConstraintContext {
		public IToken storageval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStorageColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStorageColumnConstraint(this);
		}
	}
	public partial class VisibilityColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVisibilityColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVisibilityColumnConstraint(this);
		}
	}
	public partial class AutoIncrementColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp() {
			return GetRuleContext<CurrentTimestampContext>(0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAutoIncrementColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAutoIncrementColumnConstraint(this);
		}
	}
	public partial class CommentColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommentColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommentColumnConstraint(this);
		}
	}
	public partial class UniqueKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyColumnConstraint(this);
		}
	}
	public partial class SerialDefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSerialDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSerialDefaultColumnConstraint(this);
		}
	}
	public partial class GeneratedColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(MySqlParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(MySqlParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(MySqlParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGeneratedColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGeneratedColumnConstraint(this);
		}
	}
	public partial class FormatColumnConstraintContext : ColumnConstraintContext {
		public IToken colformat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFormatColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFormatColumnConstraint(this);
		}
	}
	public partial class CollateColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollateColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollateColumnConstraint(this);
		}
	}
	public partial class PrimaryKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyColumnConstraint(this);
		}
	}
	public partial class CheckColumnConstraintContext : ColumnConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckColumnConstraint(this);
		}
	}
	public partial class NullColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullColumnConstraint(this);
		}
	}
	public partial class DefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultColumnConstraint(this);
		}
	}
	public partial class ReferenceColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceColumnConstraint(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 96, RULE_columnConstraint);
		int _la;
		try {
			State = 1703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1650;
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1651;
				Match(DEFAULT);
				State = 1652;
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1653;
				Match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1654;
				Match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1659;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO_INCREMENT:
					{
					State = 1655;
					Match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					State = 1656;
					Match(ON);
					State = 1657;
					Match(UPDATE);
					State = 1658;
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 1661;
					Match(PRIMARY);
					}
				}

				State = 1664;
				Match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1665;
				Match(UNIQUE);
				State = 1667;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
				case 1:
					{
					State = 1666;
					Match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1669;
				Match(COMMENT);
				State = 1670;
				Match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1671;
				Match(COLUMN_FORMAT);
				State = 1672;
				((FormatColumnConstraintContext)_localctx).colformat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1673;
				Match(STORAGE);
				State = 1674;
				((StorageColumnConstraintContext)_localctx).storageval = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1675;
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1676;
				Match(COLLATE);
				State = 1677;
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED) {
					{
					State = 1678;
					Match(GENERATED);
					State = 1679;
					Match(ALWAYS);
					}
				}

				State = 1682;
				Match(AS);
				State = 1683;
				Match(LR_BRACKET);
				State = 1684;
				expression(0);
				State = 1685;
				Match(RR_BRACKET);
				State = 1687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					State = 1686;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1689;
				Match(SERIAL);
				State = 1690;
				Match(DEFAULT);
				State = 1691;
				Match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1692;
					Match(CONSTRAINT);
					State = 1694;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 1693;
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1698;
				Match(CHECK);
				State = 1699;
				Match(LR_BRACKET);
				State = 1700;
				expression(0);
				State = 1701;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintContext : ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraint; } }
	 
		public TableConstraintContext() { }
		public virtual void CopyFrom(TableConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UniqueKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyTableConstraint(this);
		}
	}
	public partial class CheckTableConstraintContext : TableConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTableConstraint(this);
		}
	}
	public partial class PrimaryKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyTableConstraint(this);
		}
	}
	public partial class ForeignKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterForeignKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitForeignKeyTableConstraint(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintContext tableConstraint() {
		TableConstraintContext _localctx = new TableConstraintContext(Context, State);
		EnterRule(_localctx, 98, RULE_tableConstraint);
		int _la;
		try {
			State = 1774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1705;
					Match(CONSTRAINT);
					State = 1707;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 1706;
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1711;
				Match(PRIMARY);
				State = 1712;
				Match(KEY);
				State = 1714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 1713;
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1717;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1716;
					indexType();
					}
				}

				State = 1719;
				indexColumnNames();
				State = 1723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1720;
					indexOption();
					}
					}
					State = 1725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1726;
					Match(CONSTRAINT);
					State = 1728;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 1727;
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1732;
				Match(UNIQUE);
				State = 1734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1733;
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 1736;
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1739;
					indexType();
					}
				}

				State = 1742;
				indexColumnNames();
				State = 1746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1743;
					indexOption();
					}
					}
					State = 1748;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1749;
					Match(CONSTRAINT);
					State = 1751;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 1750;
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1755;
				Match(FOREIGN);
				State = 1756;
				Match(KEY);
				State = 1758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 1757;
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1760;
				indexColumnNames();
				State = 1761;
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1763;
					Match(CONSTRAINT);
					State = 1765;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 1764;
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1769;
				Match(CHECK);
				State = 1770;
				Match(LR_BRACKET);
				State = 1771;
				expression(0);
				State = 1772;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		public IToken matchType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(MySqlParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceActionContext referenceAction() {
			return GetRuleContext<ReferenceActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 100, RULE_referenceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776;
			Match(REFERENCES);
			State = 1777;
			tableName();
			State = 1779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 1778;
				indexColumnNames();
				}
				break;
			}
			State = 1783;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH) {
				{
				State = 1781;
				Match(MATCH);
				State = 1782;
				_localctx.matchType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					_localctx.matchType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 1785;
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceActionContext : ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext[] referenceControlType() {
			return GetRuleContexts<ReferenceControlTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext referenceControlType(int i) {
			return GetRuleContext<ReferenceControlTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceAction(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceActionContext referenceAction() {
		ReferenceActionContext _localctx = new ReferenceActionContext(Context, State);
		EnterRule(_localctx, 102, RULE_referenceAction);
		try {
			State = 1804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1788;
				Match(ON);
				State = 1789;
				Match(DELETE);
				State = 1790;
				_localctx.onDelete = referenceControlType();
				State = 1794;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1791;
					Match(ON);
					State = 1792;
					Match(UPDATE);
					State = 1793;
					_localctx.onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1796;
				Match(ON);
				State = 1797;
				Match(UPDATE);
				State = 1798;
				_localctx.onUpdate = referenceControlType();
				State = 1802;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1799;
					Match(ON);
					State = 1800;
					Match(DELETE);
					State = 1801;
					_localctx.onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceControlTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceControlType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferenceControlType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferenceControlType(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceControlTypeContext referenceControlType() {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(Context, State);
		EnterRule(_localctx, 104, RULE_referenceControlType);
		try {
			State = 1812;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1806;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1807;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1808;
				Match(SET);
				State = 1809;
				Match(NULL_LITERAL);
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1810;
				Match(NO);
				State = 1811;
				Match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnDefinitionContext : ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnDefinition; } }
	 
		public IndexColumnDefinitionContext() { }
		public virtual void CopyFrom(IndexColumnDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecialIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpecialIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpecialIndexDeclaration(this);
		}
	}
	public partial class SimpleIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleIndexDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnDefinitionContext indexColumnDefinition() {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 106, RULE_indexColumnDefinition);
		int _la;
		try {
			State = 1842;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1814;
				((SimpleIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 1815;
					uid();
					}
				}

				State = 1819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1818;
					indexType();
					}
				}

				State = 1821;
				indexColumnNames();
				State = 1825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1822;
					indexOption();
					}
					}
					State = 1827;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1828;
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1829;
					((SpecialIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 1832;
					uid();
					}
				}

				State = 1835;
				indexColumnNames();
				State = 1839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1836;
					indexOption();
					}
					}
					State = 1841;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOptionContext : ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOption; } }
	 
		public TableOptionContext() { }
		public virtual void CopyFrom(TableOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableOptionEngineContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public TableOptionEngineContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEngine(this);
		}
	}
	public partial class TableOptionMaxRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMaxRows(this);
		}
	}
	public partial class TableOptionCollateContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCollate(this);
		}
	}
	public partial class TableOptionPersistentContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPersistent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPersistent(this);
		}
	}
	public partial class TableOptionTablespaceContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceStorageContext tablespaceStorage() {
			return GetRuleContext<TablespaceStorageContext>(0);
		}
		public TableOptionTablespaceContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTablespace(this);
		}
	}
	public partial class TableOptionAutoextendSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoextendSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAutoextendSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAutoextendSize(this);
		}
	}
	public partial class TableOptionStartTransactionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		public TableOptionStartTransactionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionStartTransaction(this);
		}
	}
	public partial class TableOptionPackKeysContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPackKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPackKeys(this);
		}
	}
	public partial class TableOptionPasswordContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPassword(this);
		}
	}
	public partial class TableOptionUnionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionUnion(this);
		}
	}
	public partial class TableOptionSamplePageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionSamplePage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionSamplePage(this);
		}
	}
	public partial class TableOptionCharsetContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCharset(this);
		}
	}
	public partial class TableOptionIndexDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionIndexDirectory(this);
		}
	}
	public partial class TableOptionTableTypeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_TYPE() { return GetToken(MySqlParser.TABLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableTypeContext tableType() {
			return GetRuleContext<TableTypeContext>(0);
		}
		public TableOptionTableTypeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTableType(this);
		}
	}
	public partial class TableOptionKeyBlockSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionKeyBlockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionKeyBlockSize(this);
		}
	}
	public partial class TableOptionEncryptionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEncryption(this);
		}
	}
	public partial class TableOptionDataDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDataDirectory(this);
		}
	}
	public partial class TableOptionRecalculationContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRecalculation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRecalculation(this);
		}
	}
	public partial class TableOptionAutoIncrementContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAutoIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAutoIncrement(this);
		}
	}
	public partial class TableOptionChecksumContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionChecksum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionChecksum(this);
		}
	}
	public partial class TableOptionDelayContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDelay(this);
		}
	}
	public partial class TableOptionConnectionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionConnection(this);
		}
	}
	public partial class TableOptionSecondaryEngineAttributeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSecondaryEngineAttributeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionSecondaryEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionSecondaryEngineAttribute(this);
		}
	}
	public partial class TableOptionCommentContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionComment(this);
		}
	}
	public partial class TableOptionAverageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAverage(this);
		}
	}
	public partial class TableOptionRowFormatContext : TableOptionContext {
		public IToken rowFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRowFormat(this);
		}
	}
	public partial class TableOptionCompressionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCompression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCompression(this);
		}
	}
	public partial class TableOptionInsertMethodContext : TableOptionContext {
		public IToken insertMethod;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionInsertMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionInsertMethod(this);
		}
	}
	public partial class TableOptionEngineAttributeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineAttributeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEngineAttribute(this);
		}
	}
	public partial class TableOptionMinRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMinRows(this);
		}
	}

	[RuleVersion(0)]
	public TableOptionContext tableOption() {
		TableOptionContext _localctx = new TableOptionContext(Context, State);
		EnterRule(_localctx, 108, RULE_tableOption);
		int _la;
		try {
			State = 2006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1844;
				Match(ENGINE);
				State = 1846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1845;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONNECT || ((((_la - 764)) & ~0x3f) == 0 && ((1L << (_la - 764)) & ((1L << (ARCHIVE - 764)) | (1L << (BLACKHOLE - 764)) | (1L << (CSV - 764)) | (1L << (FEDERATED - 764)) | (1L << (INNODB - 764)) | (1L << (MEMORY - 764)) | (1L << (MRG_MYISAM - 764)) | (1L << (MYISAM - 764)) | (1L << (NDB - 764)) | (1L << (NDBCLUSTER - 764)) | (1L << (PERFORMANCE_SCHEMA - 764)) | (1L << (TOKUDB - 764)))) != 0) || ((((_la - 1135)) & ~0x3f) == 0 && ((1L << (_la - 1135)) & ((1L << (STRING_LITERAL - 1135)) | (1L << (ID - 1135)) | (1L << (REVERSE_QUOTE_ID - 1135)))) != 0)) {
					{
					State = 1848;
					engineName();
					}
				}

				}
				break;
			case 2:
				_localctx = new TableOptionEngineAttributeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1851;
				Match(ENGINE_ATTRIBUTE);
				State = 1853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1852;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1855;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new TableOptionAutoextendSizeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1856;
				Match(AUTOEXTEND_SIZE);
				State = 1858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1857;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1860;
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1861;
				Match(AUTO_INCREMENT);
				State = 1863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1862;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1865;
				decimalLiteral();
				}
				break;
			case 5:
				_localctx = new TableOptionAverageContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1866;
				Match(AVG_ROW_LENGTH);
				State = 1868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1867;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1870;
				decimalLiteral();
				}
				break;
			case 6:
				_localctx = new TableOptionCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1871;
					Match(DEFAULT);
					}
				}

				State = 1874;
				charSet();
				State = 1876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1875;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1880;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1878;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1879;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new TableOptionChecksumContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1882;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1884;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1883;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1886;
				((TableOptionChecksumContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 8:
				_localctx = new TableOptionCollateContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1887;
					Match(DEFAULT);
					}
				}

				State = 1890;
				Match(COLLATE);
				State = 1892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1891;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1894;
				collationName();
				}
				break;
			case 9:
				_localctx = new TableOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1895;
				Match(COMMENT);
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1896;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1899;
				Match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionCompressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1900;
				Match(COMPRESSION);
				State = 1902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1901;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1904;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new TableOptionConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1905;
				Match(CONNECTION);
				State = 1907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1906;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1909;
				Match(STRING_LITERAL);
				}
				break;
			case 12:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1910;
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==DATA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1911;
				Match(DIRECTORY);
				State = 1913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1912;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1915;
				Match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionDelayContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1916;
				Match(DELAY_KEY_WRITE);
				State = 1918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1917;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1920;
				((TableOptionDelayContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 14:
				_localctx = new TableOptionEncryptionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1921;
				Match(ENCRYPTION);
				State = 1923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1922;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1925;
				Match(STRING_LITERAL);
				}
				break;
			case 15:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1926;
				Match(INDEX);
				State = 1927;
				Match(DIRECTORY);
				State = 1929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1928;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1931;
				Match(STRING_LITERAL);
				}
				break;
			case 16:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1932;
				Match(INSERT_METHOD);
				State = 1934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1933;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1936;
				((TableOptionInsertMethodContext)_localctx).insertMethod = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 17:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1937;
				Match(KEY_BLOCK_SIZE);
				State = 1939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1938;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1941;
				fileSizeLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1942;
				Match(MAX_ROWS);
				State = 1944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1943;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1946;
				decimalLiteral();
				}
				break;
			case 19:
				_localctx = new TableOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1947;
				Match(MIN_ROWS);
				State = 1949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1948;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1951;
				decimalLiteral();
				}
				break;
			case 20:
				_localctx = new TableOptionPackKeysContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1952;
				Match(PACK_KEYS);
				State = 1954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1953;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1956;
				((TableOptionPackKeysContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1957;
				Match(PASSWORD);
				State = 1959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1958;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1961;
				Match(STRING_LITERAL);
				}
				break;
			case 22:
				_localctx = new TableOptionRowFormatContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1962;
				Match(ROW_FORMAT);
				State = 1964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1963;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1966;
				((TableOptionRowFormatContext)_localctx).rowFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (COMPACT - 361)) | (1L << (COMPRESSED - 361)) | (1L << (DYNAMIC - 361)) | (1L << (FIXED - 361)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionStartTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1967;
				Match(START);
				State = 1968;
				Match(TRANSACTION);
				}
				break;
			case 24:
				_localctx = new TableOptionSecondaryEngineAttributeContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1969;
				Match(SECONDARY_ENGINE_ATTRIBUTE);
				State = 1971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1970;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1973;
				Match(STRING_LITERAL);
				}
				break;
			case 25:
				_localctx = new TableOptionRecalculationContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1974;
				Match(STATS_AUTO_RECALC);
				State = 1976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1975;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1978;
				((TableOptionRecalculationContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 26:
				_localctx = new TableOptionPersistentContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1979;
				Match(STATS_PERSISTENT);
				State = 1981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1980;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1983;
				((TableOptionPersistentContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 27:
				_localctx = new TableOptionSamplePageContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1984;
				Match(STATS_SAMPLE_PAGES);
				State = 1986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1985;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1988;
				decimalLiteral();
				}
				break;
			case 28:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1989;
				Match(TABLESPACE);
				State = 1990;
				uid();
				State = 1992;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,229,Context) ) {
				case 1:
					{
					State = 1991;
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 29:
				_localctx = new TableOptionTableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1994;
				Match(TABLE_TYPE);
				State = 1995;
				Match(EQUAL_SYMBOL);
				State = 1996;
				tableType();
				}
				break;
			case 30:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1997;
				tablespaceStorage();
				}
				break;
			case 31:
				_localctx = new TableOptionUnionContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1998;
				Match(UNION);
				State = 2000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1999;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2002;
				Match(LR_BRACKET);
				State = 2003;
				tables();
				State = 2004;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableType(this);
		}
	}

	[RuleVersion(0)]
	public TableTypeContext tableType() {
		TableTypeContext _localctx = new TableTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_tableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008;
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceStorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceStorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceStorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceStorage(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceStorageContext tablespaceStorage() {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(Context, State);
		EnterRule(_localctx, 112, RULE_tablespaceStorage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2010;
			Match(STORAGE);
			State = 2011;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(MySqlParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(MySqlParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return GetRuleContext<PartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return GetRuleContext<SubpartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 114, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2013;
			Match(PARTITION);
			State = 2014;
			Match(BY);
			State = 2015;
			partitionFunctionDefinition();
			State = 2018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITIONS) {
				{
				State = 2016;
				Match(PARTITIONS);
				State = 2017;
				_localctx.count = decimalLiteral();
				}
			}

			State = 2027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBPARTITION) {
				{
				State = 2020;
				Match(SUBPARTITION);
				State = 2021;
				Match(BY);
				State = 2022;
				subpartitionFunctionDefinition();
				State = 2025;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					State = 2023;
					Match(SUBPARTITIONS);
					State = 2024;
					_localctx.subCount = decimalLiteral();
					}
				}

				}
			}

			State = 2040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				{
				State = 2029;
				Match(LR_BRACKET);
				State = 2030;
				partitionDefinition();
				State = 2035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2031;
					Match(COMMA);
					State = 2032;
					partitionDefinition();
					}
					}
					State = 2037;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2038;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionFunctionDefinitionContext : ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionFunctionDefinition; } }
	 
		public PartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(PartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionFunctionKeyContext : PartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionKey(this);
		}
	}
	public partial class PartitionFunctionHashContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionHash(this);
		}
	}
	public partial class PartitionFunctionListContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionList(this);
		}
	}
	public partial class PartitionFunctionRangeContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionRange(this);
		}
	}

	[RuleVersion(0)]
	public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 116, RULE_partitionFunctionDefinition);
		int _la;
		try {
			State = 2087;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2042;
					Match(LINEAR);
					}
				}

				State = 2045;
				Match(HASH);
				State = 2046;
				Match(LR_BRACKET);
				State = 2047;
				expression(0);
				State = 2048;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2050;
					Match(LINEAR);
					}
				}

				State = 2053;
				Match(KEY);
				State = 2057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 2054;
					Match(ALGORITHM);
					State = 2055;
					Match(EQUAL_SYMBOL);
					State = 2056;
					((PartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2059;
				Match(LR_BRACKET);
				State = 2060;
				uidList();
				State = 2061;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2063;
				Match(RANGE);
				State = 2073;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 2064;
					Match(LR_BRACKET);
					State = 2065;
					expression(0);
					State = 2066;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 2068;
					Match(COLUMNS);
					State = 2069;
					Match(LR_BRACKET);
					State = 2070;
					uidList();
					State = 2071;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2075;
				Match(LIST);
				State = 2085;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 2076;
					Match(LR_BRACKET);
					State = 2077;
					expression(0);
					State = 2078;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 2080;
					Match(COLUMNS);
					State = 2081;
					Match(LR_BRACKET);
					State = 2082;
					uidList();
					State = 2083;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionFunctionDefinitionContext : ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionFunctionDefinition; } }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(SubpartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubPartitionFunctionHashContext : SubpartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionHash(this);
		}
	}
	public partial class SubPartitionFunctionKeyContext : SubpartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionKey(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			State = 2110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2089;
					Match(LINEAR);
					}
				}

				State = 2092;
				Match(HASH);
				State = 2093;
				Match(LR_BRACKET);
				State = 2094;
				expression(0);
				State = 2095;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2097;
					Match(LINEAR);
					}
				}

				State = 2100;
				Match(KEY);
				State = 2104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 2101;
					Match(ALGORITHM);
					State = 2102;
					Match(EQUAL_SYMBOL);
					State = 2103;
					((SubPartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2106;
				Match(LR_BRACKET);
				State = 2107;
				uidList();
				State = 2108;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
	 
		public PartitionDefinitionContext() { }
		public virtual void CopyFrom(PartitionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionComparisonContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionComparison(this);
		}
	}
	public partial class PartitionListAtomContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionListAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionListAtom(this);
		}
	}
	public partial class PartitionListVectorContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext[] partitionDefinerVector() {
			return GetRuleContexts<PartitionDefinerVectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return GetRuleContext<PartitionDefinerVectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionListVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionListVector(this);
		}
	}
	public partial class PartitionSimpleContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionSimple(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_partitionDefinition);
		int _la;
		try {
			State = 2258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2112;
				Match(PARTITION);
				State = 2113;
				uid();
				State = 2114;
				Match(VALUES);
				State = 2115;
				Match(LESS);
				State = 2116;
				Match(THAN);
				State = 2117;
				Match(LR_BRACKET);
				State = 2118;
				partitionDefinerAtom();
				State = 2123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2119;
					Match(COMMA);
					State = 2120;
					partitionDefinerAtom();
					}
					}
					State = 2125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2126;
				Match(RR_BRACKET);
				State = 2130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2127;
					partitionOption();
					}
					}
					State = 2132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2133;
					Match(LR_BRACKET);
					State = 2134;
					subpartitionDefinition();
					State = 2139;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2135;
						Match(COMMA);
						State = 2136;
						subpartitionDefinition();
						}
						}
						State = 2141;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2142;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2146;
				Match(PARTITION);
				State = 2147;
				uid();
				State = 2148;
				Match(VALUES);
				State = 2149;
				Match(LESS);
				State = 2150;
				Match(THAN);
				State = 2151;
				partitionDefinerAtom();
				State = 2155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2152;
					partitionOption();
					}
					}
					State = 2157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2158;
					Match(LR_BRACKET);
					State = 2159;
					subpartitionDefinition();
					State = 2164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2160;
						Match(COMMA);
						State = 2161;
						subpartitionDefinition();
						}
						}
						State = 2166;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2167;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2171;
				Match(PARTITION);
				State = 2172;
				uid();
				State = 2173;
				Match(VALUES);
				State = 2174;
				Match(IN);
				State = 2175;
				Match(LR_BRACKET);
				State = 2176;
				partitionDefinerAtom();
				State = 2181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2177;
					Match(COMMA);
					State = 2178;
					partitionDefinerAtom();
					}
					}
					State = 2183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2184;
				Match(RR_BRACKET);
				State = 2188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2185;
					partitionOption();
					}
					}
					State = 2190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2191;
					Match(LR_BRACKET);
					State = 2192;
					subpartitionDefinition();
					State = 2197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2193;
						Match(COMMA);
						State = 2194;
						subpartitionDefinition();
						}
						}
						State = 2199;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2200;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2204;
				Match(PARTITION);
				State = 2205;
				uid();
				State = 2206;
				Match(VALUES);
				State = 2207;
				Match(IN);
				State = 2208;
				Match(LR_BRACKET);
				State = 2209;
				partitionDefinerVector();
				State = 2214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2210;
					Match(COMMA);
					State = 2211;
					partitionDefinerVector();
					}
					}
					State = 2216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2217;
				Match(RR_BRACKET);
				State = 2221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2218;
					partitionOption();
					}
					}
					State = 2223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2224;
					Match(LR_BRACKET);
					State = 2225;
					subpartitionDefinition();
					State = 2230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2226;
						Match(COMMA);
						State = 2227;
						subpartitionDefinition();
						}
						}
						State = 2232;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2233;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2237;
				Match(PARTITION);
				State = 2238;
				uid();
				State = 2242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2239;
					partitionOption();
					}
					}
					State = 2244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2245;
					Match(LR_BRACKET);
					State = 2246;
					subpartitionDefinition();
					State = 2251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2247;
						Match(COMMA);
						State = 2248;
						subpartitionDefinition();
						}
						}
						State = 2253;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2254;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerAtom(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerAtomContext partitionDefinerAtom() {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(Context, State);
		EnterRule(_localctx, 122, RULE_partitionDefinerAtom);
		try {
			State = 2263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2260;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2261;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2262;
				Match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerVectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerVector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerVector(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerVectorContext partitionDefinerVector() {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(Context, State);
		EnterRule(_localctx, 124, RULE_partitionDefinerVector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2265;
			Match(LR_BRACKET);
			State = 2266;
			partitionDefinerAtom();
			State = 2269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2267;
				Match(COMMA);
				State = 2268;
				partitionDefinerAtom();
				}
				}
				State = 2271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 2273;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2275;
			Match(SUBPARTITION);
			State = 2276;
			uid();
			State = 2280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (COMMENT - 359)) | (1L << (DATA - 359)) | (1L << (ENGINE - 359)))) != 0) || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & ((1L << (MAX_ROWS - 487)) | (1L << (MIN_ROWS - 487)) | (1L << (NODEGROUP - 487)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				State = 2277;
				partitionOption();
				}
				}
				State = 2282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
	 
		public PartitionOptionContext() { }
		public virtual void CopyFrom(PartitionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionOptionCommentContext : PartitionOptionContext {
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionComment(this);
		}
	}
	public partial class PartitionOptionNodeGroupContext : PartitionOptionContext {
		public UidContext nodegroup;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionNodeGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionNodeGroup(this);
		}
	}
	public partial class PartitionOptionIndexDirectoryContext : PartitionOptionContext {
		public IToken indexDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionIndexDirectory(this);
		}
	}
	public partial class PartitionOptionMaxRowsContext : PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMaxRows(this);
		}
	}
	public partial class PartitionOptionTablespaceContext : PartitionOptionContext {
		public UidContext tablespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionTablespace(this);
		}
	}
	public partial class PartitionOptionEngineContext : PartitionOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionEngine(this);
		}
	}
	public partial class PartitionOptionMinRowsContext : PartitionOptionContext {
		public DecimalLiteralContext minRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMinRows(this);
		}
	}
	public partial class PartitionOptionDataDirectoryContext : PartitionOptionContext {
		public IToken dataDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionDataDirectory(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 128, RULE_partitionOption);
		int _la;
		try {
			State = 2331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2283;
					Match(DEFAULT);
					}
				}

				State = 2287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 2286;
					Match(STORAGE);
					}
				}

				State = 2289;
				Match(ENGINE);
				State = 2291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2290;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2293;
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2294;
				Match(COMMENT);
				State = 2296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2295;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2298;
				((PartitionOptionCommentContext)_localctx).comment = Match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2299;
				Match(DATA);
				State = 2300;
				Match(DIRECTORY);
				State = 2302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2301;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2304;
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = Match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2305;
				Match(INDEX);
				State = 2306;
				Match(DIRECTORY);
				State = 2308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2307;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2310;
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = Match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2311;
				Match(MAX_ROWS);
				State = 2313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2312;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2315;
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2316;
				Match(MIN_ROWS);
				State = 2318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2317;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2320;
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2321;
				Match(TABLESPACE);
				State = 2323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2322;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2325;
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2326;
				Match(NODEGROUP);
				State = 2328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2327;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2330;
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
	 
		public AlterDatabaseContext() { }
		public virtual void CopyFrom(AlterDatabaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUpgradeNameContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUpgradeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUpgradeName(this);
		}
	}
	public partial class AlterSimpleDatabaseContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterSimpleDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterSimpleDatabase(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 130, RULE_alterDatabase);
		int _la;
		try {
			State = 2351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2333;
				Match(ALTER);
				State = 2334;
				((AlterSimpleDatabaseContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 2335;
					uid();
					}
					break;
				}
				State = 2339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2338;
					createDatabaseOption();
					}
					}
					State = 2341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHAR || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2343;
				Match(ALTER);
				State = 2344;
				((AlterUpgradeNameContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2345;
				uid();
				State = 2346;
				Match(UPGRADE);
				State = 2347;
				Match(DATA);
				State = 2348;
				Match(DIRECTORY);
				State = 2349;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 132, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2353;
			Match(ALTER);
			State = 2355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2354;
				ownerStatement();
				}
			}

			State = 2357;
			Match(EVENT);
			State = 2358;
			fullId();
			State = 2362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				{
				State = 2359;
				Match(ON);
				State = 2360;
				Match(SCHEDULE);
				State = 2361;
				scheduleExpression();
				}
				break;
			}
			State = 2370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2364;
				Match(ON);
				State = 2365;
				Match(COMPLETION);
				State = 2367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2366;
					Match(NOT);
					}
				}

				State = 2369;
				Match(PRESERVE);
				}
			}

			State = 2375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 2372;
				Match(RENAME);
				State = 2373;
				Match(TO);
				State = 2374;
				fullId();
				}
				break;
			}
			State = 2378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 2377;
				enableType();
				}
			}

			State = 2382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 2380;
				Match(COMMENT);
				State = 2381;
				Match(STRING_LITERAL);
				}
			}

			State = 2386;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				{
				State = 2384;
				Match(DO);
				State = 2385;
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterFunction(this);
		}
	}

	[RuleVersion(0)]
	public AlterFunctionContext alterFunction() {
		AlterFunctionContext _localctx = new AlterFunctionContext(Context, State);
		EnterRule(_localctx, 134, RULE_alterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2388;
			Match(ALTER);
			State = 2389;
			Match(FUNCTION);
			State = 2390;
			fullId();
			State = 2394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (MODIFIES - 108)) | (1L << (NOT - 108)) | (1L << (READS - 108)) | (1L << (SQL - 108)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2391;
				routineOption();
				}
				}
				State = 2396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterInstance(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceContext alterInstance() {
		AlterInstanceContext _localctx = new AlterInstanceContext(Context, State);
		EnterRule(_localctx, 136, RULE_alterInstance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397;
			Match(ALTER);
			State = 2398;
			Match(INSTANCE);
			State = 2399;
			Match(ROTATE);
			State = 2400;
			Match(INNODB);
			State = 2401;
			Match(MASTER);
			State = 2402;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 138, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2404;
			Match(ALTER);
			State = 2405;
			Match(LOGFILE);
			State = 2406;
			Match(GROUP);
			State = 2407;
			uid();
			State = 2408;
			Match(ADD);
			State = 2409;
			Match(UNDOFILE);
			State = 2410;
			Match(STRING_LITERAL);
			State = 2416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2411;
				Match(INITIAL_SIZE);
				State = 2413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2412;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2415;
				fileSizeLiteral();
				}
			}

			State = 2419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2418;
				Match(WAIT);
				}
			}

			State = 2421;
			Match(ENGINE);
			State = 2423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2422;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2425;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterProcedure(this);
		}
	}

	[RuleVersion(0)]
	public AlterProcedureContext alterProcedure() {
		AlterProcedureContext _localctx = new AlterProcedureContext(Context, State);
		EnterRule(_localctx, 140, RULE_alterProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2427;
			Match(ALTER);
			State = 2428;
			Match(PROCEDURE);
			State = 2429;
			fullId();
			State = 2433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & ((1L << (MODIFIES - 108)) | (1L << (NOT - 108)) | (1L << (READS - 108)) | (1L << (SQL - 108)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2430;
				routineOption();
				}
				}
				State = 2435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 142, RULE_alterServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2436;
			Match(ALTER);
			State = 2437;
			Match(SERVER);
			State = 2438;
			uid();
			State = 2439;
			Match(OPTIONS);
			State = 2440;
			Match(LR_BRACKET);
			State = 2441;
			serverOption();
			State = 2446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2442;
				Match(COMMA);
				State = 2443;
				serverOption();
				}
				}
				State = 2448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2449;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public IToken intimeAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext[] alterSpecification() {
			return GetRuleContexts<AlterSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext alterSpecification(int i) {
			return GetRuleContext<AlterSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 144, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451;
			Match(ALTER);
			State = 2453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 2452;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2455;
				Match(IGNORE);
				}
			}

			State = 2458;
			Match(TABLE);
			State = 2459;
			tableName();
			State = 2461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 2460;
				waitNowaitClause();
				}
			}

			State = 2471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				{
				State = 2463;
				alterSpecification();
				State = 2468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2464;
					Match(COMMA);
					State = 2465;
					alterSpecification();
					}
					}
					State = 2470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2473;
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public IToken objectAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 146, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476;
			Match(ALTER);
			State = 2477;
			Match(TABLESPACE);
			State = 2478;
			uid();
			State = 2479;
			_localctx.objectAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				_localctx.objectAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2480;
			Match(DATAFILE);
			State = 2481;
			Match(STRING_LITERAL);
			State = 2485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2482;
				Match(INITIAL_SIZE);
				State = 2483;
				Match(EQUAL_SYMBOL);
				State = 2484;
				fileSizeLiteral();
				}
			}

			State = 2488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2487;
				Match(WAIT);
				}
			}

			State = 2490;
			Match(ENGINE);
			State = 2492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2491;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2494;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOpt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 148, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			Match(ALTER);
			State = 2500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 2497;
				Match(ALGORITHM);
				State = 2498;
				Match(EQUAL_SYMBOL);
				State = 2499;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2502;
				ownerStatement();
				}
			}

			State = 2508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 2505;
				Match(SQL);
				State = 2506;
				Match(SECURITY);
				State = 2507;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2510;
			Match(VIEW);
			State = 2511;
			fullId();
			State = 2516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2512;
				Match(LR_BRACKET);
				State = 2513;
				uidList();
				State = 2514;
				Match(RR_BRACKET);
				}
			}

			State = 2518;
			Match(AS);
			State = 2519;
			selectStatement();
			State = 2526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2520;
				Match(WITH);
				State = 2522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 2521;
					_localctx.checkOpt = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOpt = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2524;
				Match(CHECK);
				State = 2525;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MySqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext[] sequenceSpec() {
			return GetRuleContexts<SequenceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext sequenceSpec(int i) {
			return GetRuleContext<SequenceSpecContext>(i);
		}
		public AlterSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterSequence(this);
		}
	}

	[RuleVersion(0)]
	public AlterSequenceContext alterSequence() {
		AlterSequenceContext _localctx = new AlterSequenceContext(Context, State);
		EnterRule(_localctx, 150, RULE_alterSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2528;
			Match(ALTER);
			State = 2529;
			Match(SEQUENCE);
			State = 2531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2530;
				ifExists();
				}
			}

			State = 2533;
			fullId();
			State = 2535;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2534;
					sequenceSpec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2537;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,314,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSpecificationContext : ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSpecification; } }
	 
		public AlterSpecificationContext() { }
		public virtual void CopyFrom(AlterSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterByDisableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDisableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDisableKeys(this);
		}
	}
	public partial class AlterByDefaultCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDefaultCharset(this);
		}
	}
	public partial class AlterByRenameColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRenameColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRenameColumn(this);
		}
	}
	public partial class AlterByConvertCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByConvertCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByConvertCharset(this);
		}
	}
	public partial class AlterByAddPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPartition(this);
		}
	}
	public partial class AlterByAddForeignKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddForeignKey(this);
		}
	}
	public partial class AlterByRenameIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRenameIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRenameIndex(this);
		}
	}
	public partial class AlterByRemovePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRemovePartitioning(this);
		}
	}
	public partial class AlterByRenameContext : AlterSpecificationContext {
		public IToken renameFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRename(this);
		}
	}
	public partial class AlterByOptimizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByOptimizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByOptimizePartition(this);
		}
	}
	public partial class AlterByImportTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportTablespace(this);
		}
	}
	public partial class AlterByCoalescePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByCoalescePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByCoalescePartition(this);
		}
	}
	public partial class AlterByDropConstraintCheckContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropConstraintCheckContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropConstraintCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropConstraintCheck(this);
		}
	}
	public partial class AlterByAddColumnsContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumns(this);
		}
	}
	public partial class AlterByAlterIndexVisibilityContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAlterIndexVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAlterIndexVisibility(this);
		}
	}
	public partial class AlterByDropForeignKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropForeignKey(this);
		}
	}
	public partial class AlterByAddCheckTableConstraintContext : AlterSpecificationContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddCheckTableConstraint(this);
		}
	}
	public partial class AlterByRebuildPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRebuildPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRebuildPartition(this);
		}
	}
	public partial class AlterByUpgradePartitioningContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByUpgradePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByUpgradePartitioning(this);
		}
	}
	public partial class AlterByRepairPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByRepairPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByRepairPartition(this);
		}
	}
	public partial class AlterByExchangePartitionContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByExchangePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByExchangePartition(this);
		}
	}
	public partial class AlterByAddIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddIndex(this);
		}
	}
	public partial class AlterByDropColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropColumn(this);
		}
	}
	public partial class AlterByImportPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportPartition(this);
		}
	}
	public partial class AlterByChangeDefaultContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeDefault(this);
		}
	}
	public partial class AlterByForceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByForce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByForce(this);
		}
	}
	public partial class AlterByDropPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPartition(this);
		}
	}
	public partial class AlterByAddSpecialIndexContext : AlterSpecificationContext {
		public IToken keyType;
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddSpecialIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddSpecialIndex(this);
		}
	}
	public partial class AlterByModifyColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByModifyColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByModifyColumn(this);
		}
	}
	public partial class AlterByTableOptionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByTableOption(this);
		}
	}
	public partial class AlterByDropPrimaryKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPrimaryKey(this);
		}
	}
	public partial class AlterByLockContext : AlterSpecificationContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByLock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByLock(this);
		}
	}
	public partial class AlterByDiscardPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardPartition(this);
		}
	}
	public partial class AlterByDiscardTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardTablespace(this);
		}
	}
	public partial class AlterByValidateContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByValidate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByValidate(this);
		}
	}
	public partial class AlterByAddPrimaryKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPrimaryKey(this);
		}
	}
	public partial class AlterByCheckPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByCheckPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByCheckPartition(this);
		}
	}
	public partial class AlterByEnableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByEnableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByEnableKeys(this);
		}
	}
	public partial class AlterByReorganizePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByReorganizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByReorganizePartition(this);
		}
	}
	public partial class AlterBySetAlgorithmContext : AlterSpecificationContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MySqlParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterBySetAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterBySetAlgorithm(this);
		}
	}
	public partial class AlterByAnalyzePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAnalyzePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAnalyzePartition(this);
		}
	}
	public partial class AlterByChangeColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeColumn(this);
		}
	}
	public partial class AlterByAddUniqueKeyContext : AlterSpecificationContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddUniqueKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddUniqueKey(this);
		}
	}
	public partial class AlterByTruncatePartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByTruncatePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByTruncatePartition(this);
		}
	}
	public partial class AlterByDropIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropIndex(this);
		}
	}
	public partial class AlterByAddColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumn(this);
		}
	}
	public partial class AlterByOrderContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByOrderContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterByOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterByOrder(this);
		}
	}

	[RuleVersion(0)]
	public AlterSpecificationContext alterSpecification() {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(Context, State);
		EnterRule(_localctx, 152, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			State = 2941;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2539;
				tableOption();
				State = 2546;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2541;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2540;
							Match(COMMA);
							}
						}

						State = 2543;
						tableOption();
						}
						} 
					}
					State = 2548;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,316,Context);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2549;
				Match(ADD);
				State = 2551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2550;
					Match(COLUMN);
					}
				}

				State = 2554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2553;
					ifNotExists();
					}
				}

				State = 2556;
				uid();
				State = 2557;
				columnDefinition();
				State = 2561;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2558;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2559;
					Match(AFTER);
					State = 2560;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2563;
				Match(ADD);
				State = 2565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2564;
					Match(COLUMN);
					}
				}

				State = 2568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2567;
					ifNotExists();
					}
				}

				State = 2570;
				Match(LR_BRACKET);
				State = 2571;
				uid();
				State = 2572;
				columnDefinition();
				State = 2579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2573;
					Match(COMMA);
					State = 2574;
					uid();
					State = 2575;
					columnDefinition();
					}
					}
					State = 2581;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2582;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2584;
				Match(ADD);
				State = 2585;
				((AlterByAddIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2586;
					ifNotExists();
					}
				}

				State = 2590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 2589;
					uid();
					}
				}

				State = 2593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2592;
					indexType();
					}
				}

				State = 2595;
				indexColumnNames();
				State = 2599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2596;
					indexOption();
					}
					}
					State = 2601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2602;
				Match(ADD);
				State = 2607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2603;
					Match(CONSTRAINT);
					State = 2605;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 2604;
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2609;
				Match(PRIMARY);
				State = 2610;
				Match(KEY);
				State = 2612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 2611;
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				State = 2615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2614;
					indexType();
					}
				}

				State = 2617;
				indexColumnNames();
				State = 2621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2618;
					indexOption();
					}
					}
					State = 2623;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2624;
				Match(ADD);
				State = 2629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2625;
					Match(CONSTRAINT);
					State = 2627;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 2626;
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2631;
				Match(UNIQUE);
				State = 2633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2632;
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 2635;
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2638;
					indexType();
					}
				}

				State = 2641;
				indexColumnNames();
				State = 2645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2642;
					indexOption();
					}
					}
					State = 2647;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2648;
				Match(ADD);
				State = 2649;
				((AlterByAddSpecialIndexContext)_localctx).keyType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2650;
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 2653;
					uid();
					}
				}

				State = 2656;
				indexColumnNames();
				State = 2660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2657;
					indexOption();
					}
					}
					State = 2662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2663;
				Match(ADD);
				State = 2668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2664;
					Match(CONSTRAINT);
					State = 2666;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 2665;
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2670;
				Match(FOREIGN);
				State = 2671;
				Match(KEY);
				State = 2673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2672;
					ifNotExists();
					}
				}

				State = 2676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 2675;
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2678;
				indexColumnNames();
				State = 2679;
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2681;
				Match(ADD);
				State = 2686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2682;
					Match(CONSTRAINT);
					State = 2684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
						{
						State = 2683;
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2688;
				Match(CHECK);
				State = 2689;
				Match(LR_BRACKET);
				State = 2690;
				expression(0);
				State = 2691;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2693;
				Match(ALGORITHM);
				State = 2695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2694;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2697;
				((AlterBySetAlgorithmContext)_localctx).algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2698;
				Match(ALTER);
				State = 2700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2699;
					Match(COLUMN);
					}
				}

				State = 2702;
				uid();
				State = 2708;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 2703;
					Match(SET);
					State = 2704;
					Match(DEFAULT);
					State = 2705;
					defaultValue();
					}
					break;
				case DROP:
					{
					State = 2706;
					Match(DROP);
					State = 2707;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2710;
				Match(CHANGE);
				State = 2712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2711;
					Match(COLUMN);
					}
				}

				State = 2715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2714;
					ifExists();
					}
				}

				State = 2717;
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				State = 2718;
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				State = 2719;
				columnDefinition();
				State = 2723;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2720;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2721;
					Match(AFTER);
					State = 2722;
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2725;
				Match(RENAME);
				State = 2726;
				Match(COLUMN);
				State = 2727;
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				State = 2728;
				Match(TO);
				State = 2729;
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2731;
				Match(LOCK);
				State = 2733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2732;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2735;
				((AlterByLockContext)_localctx).lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2736;
				Match(MODIFY);
				State = 2738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2737;
					Match(COLUMN);
					}
				}

				State = 2741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2740;
					ifExists();
					}
				}

				State = 2743;
				uid();
				State = 2744;
				columnDefinition();
				State = 2748;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2745;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2746;
					Match(AFTER);
					State = 2747;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2750;
				Match(DROP);
				State = 2752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2751;
					Match(COLUMN);
					}
				}

				State = 2755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2754;
					ifExists();
					}
				}

				State = 2757;
				uid();
				State = 2759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RESTRICT) {
					{
					State = 2758;
					Match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2761;
				Match(DROP);
				State = 2762;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2763;
					ifExists();
					}
				}

				State = 2766;
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2767;
				Match(DROP);
				State = 2768;
				Match(PRIMARY);
				State = 2769;
				Match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByRenameIndexContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2770;
				Match(RENAME);
				State = 2771;
				((AlterByRenameIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2772;
				uid();
				State = 2773;
				Match(TO);
				State = 2774;
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2776;
				Match(ALTER);
				State = 2777;
				Match(INDEX);
				State = 2778;
				uid();
				State = 2779;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2781;
				Match(DROP);
				State = 2782;
				((AlterByDropIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2783;
					ifExists();
					}
				}

				State = 2786;
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2787;
				Match(DROP);
				State = 2788;
				Match(FOREIGN);
				State = 2789;
				Match(KEY);
				State = 2791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2790;
					ifExists();
					}
				}

				State = 2793;
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2794;
				Match(DISABLE);
				State = 2795;
				Match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2796;
				Match(ENABLE);
				State = 2797;
				Match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2798;
				Match(RENAME);
				State = 2800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==TO) {
					{
					State = 2799;
					((AlterByRenameContext)_localctx).renameFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2804;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
				case 1:
					{
					State = 2802;
					uid();
					}
					break;
				case 2:
					{
					State = 2803;
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2806;
				Match(ORDER);
				State = 2807;
				Match(BY);
				State = 2808;
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2809;
				Match(CONVERT);
				State = 2810;
				Match(TO);
				State = 2811;
				Match(CHARACTER);
				State = 2812;
				Match(SET);
				State = 2813;
				charsetName();
				State = 2816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2814;
					Match(COLLATE);
					State = 2815;
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2818;
					Match(DEFAULT);
					}
				}

				State = 2821;
				Match(CHARACTER);
				State = 2822;
				Match(SET);
				State = 2823;
				Match(EQUAL_SYMBOL);
				State = 2824;
				charsetName();
				State = 2828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2825;
					Match(COLLATE);
					State = 2826;
					Match(EQUAL_SYMBOL);
					State = 2827;
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2830;
				Match(DISCARD);
				State = 2831;
				Match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2832;
				Match(IMPORT);
				State = 2833;
				Match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2834;
				Match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2835;
				((AlterByValidateContext)_localctx).validationFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2836;
				Match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2837;
				Match(ADD);
				State = 2838;
				Match(PARTITION);
				State = 2840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2839;
					ifNotExists();
					}
				}

				State = 2842;
				Match(LR_BRACKET);
				State = 2843;
				partitionDefinition();
				State = 2848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2844;
					Match(COMMA);
					State = 2845;
					partitionDefinition();
					}
					}
					State = 2850;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2851;
				Match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterByDropPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2853;
				Match(DROP);
				State = 2854;
				Match(PARTITION);
				State = 2856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2855;
					ifExists();
					}
				}

				State = 2858;
				uidList();
				}
				break;
			case 35:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 2859;
				Match(DISCARD);
				State = 2860;
				Match(PARTITION);
				State = 2863;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2861;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2862;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2865;
				Match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByImportPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 2866;
				Match(IMPORT);
				State = 2867;
				Match(PARTITION);
				State = 2870;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2868;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2869;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2872;
				Match(TABLESPACE);
				}
				break;
			case 37:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 2873;
				Match(TRUNCATE);
				State = 2874;
				Match(PARTITION);
				State = 2877;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2875;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2876;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 38:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 2879;
				Match(COALESCE);
				State = 2880;
				Match(PARTITION);
				State = 2881;
				decimalLiteral();
				}
				break;
			case 39:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 2882;
				Match(REORGANIZE);
				State = 2883;
				Match(PARTITION);
				State = 2884;
				uidList();
				State = 2885;
				Match(INTO);
				State = 2886;
				Match(LR_BRACKET);
				State = 2887;
				partitionDefinition();
				State = 2892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2888;
					Match(COMMA);
					State = 2889;
					partitionDefinition();
					}
					}
					State = 2894;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2895;
				Match(RR_BRACKET);
				}
				break;
			case 40:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 2897;
				Match(EXCHANGE);
				State = 2898;
				Match(PARTITION);
				State = 2899;
				uid();
				State = 2900;
				Match(WITH);
				State = 2901;
				Match(TABLE);
				State = 2902;
				tableName();
				State = 2905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 2903;
					((AlterByExchangePartitionContext)_localctx).validationFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2904;
					Match(VALIDATION);
					}
				}

				}
				break;
			case 41:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 41);
				{
				State = 2907;
				Match(ANALYZE);
				State = 2908;
				Match(PARTITION);
				State = 2911;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2909;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2910;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 42);
				{
				State = 2913;
				Match(CHECK);
				State = 2914;
				Match(PARTITION);
				State = 2917;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2915;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2916;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 43);
				{
				State = 2919;
				Match(OPTIMIZE);
				State = 2920;
				Match(PARTITION);
				State = 2923;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2921;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2922;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 44);
				{
				State = 2925;
				Match(REBUILD);
				State = 2926;
				Match(PARTITION);
				State = 2929;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2927;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2928;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 45);
				{
				State = 2931;
				Match(REPAIR);
				State = 2932;
				Match(PARTITION);
				State = 2935;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 2933;
					uidList();
					}
					break;
				case ALL:
					{
					State = 2934;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 46);
				{
				State = 2937;
				Match(REMOVE);
				State = 2938;
				Match(PARTITIONING);
				}
				break;
			case 47:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 47);
				{
				State = 2939;
				Match(UPGRADE);
				State = 2940;
				Match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 154, RULE_dropDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2943;
			Match(DROP);
			State = 2944;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2946;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2945;
				ifExists();
				}
			}

			State = 2948;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 156, RULE_dropEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950;
			Match(DROP);
			State = 2951;
			Match(EVENT);
			State = 2953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2952;
				ifExists();
				}
			}

			State = 2955;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MySqlParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MySqlParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MySqlParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MySqlParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MySqlParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MySqlParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MySqlParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 158, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2957;
			Match(DROP);
			State = 2958;
			Match(INDEX);
			State = 2960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				{
				State = 2959;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2962;
			uid();
			State = 2963;
			Match(ON);
			State = 2964;
			tableName();
			State = 2977;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2975;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 2965;
						Match(ALGORITHM);
						State = 2967;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2966;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2969;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 2970;
						Match(LOCK);
						State = 2972;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 2971;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 2974;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2979;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			}
			State = 2981;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 2980;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 160, RULE_dropLogfileGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2983;
			Match(DROP);
			State = 2984;
			Match(LOGFILE);
			State = 2985;
			Match(GROUP);
			State = 2986;
			uid();
			State = 2987;
			Match(ENGINE);
			State = 2988;
			Match(EQUAL_SYMBOL);
			State = 2989;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 162, RULE_dropProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2991;
			Match(DROP);
			State = 2992;
			Match(PROCEDURE);
			State = 2994;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 2993;
				ifExists();
				}
			}

			State = 2996;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 164, RULE_dropFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2998;
			Match(DROP);
			State = 2999;
			Match(FUNCTION);
			State = 3001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 3000;
				ifExists();
				}
			}

			State = 3003;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 166, RULE_dropServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3005;
			Match(DROP);
			State = 3006;
			Match(SERVER);
			State = 3008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 3007;
				ifExists();
				}
			}

			State = 3010;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 168, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3012;
			Match(DROP);
			State = 3014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 3013;
				Match(TEMPORARY);
				}
			}

			State = 3016;
			Match(TABLE);
			State = 3018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 3017;
				ifExists();
				}
			}

			State = 3020;
			tables();
			State = 3022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 3021;
				waitNowaitClause();
				}
			}

			State = 3025;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 3024;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTablespace(this);
		}
	}

	[RuleVersion(0)]
	public DropTablespaceContext dropTablespace() {
		DropTablespaceContext _localctx = new DropTablespaceContext(Context, State);
		EnterRule(_localctx, 170, RULE_dropTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3027;
			Match(DROP);
			State = 3028;
			Match(TABLESPACE);
			State = 3029;
			uid();
			State = 3035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 3030;
				Match(ENGINE);
				State = 3032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 3031;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 3034;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 172, RULE_dropTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3037;
			Match(DROP);
			State = 3038;
			Match(TRIGGER);
			State = 3040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 3039;
				ifExists();
				}
			}

			State = 3042;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 174, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3044;
			Match(DROP);
			State = 3045;
			Match(VIEW);
			State = 3047;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 3046;
				ifExists();
				}
			}

			State = 3049;
			fullId();
			State = 3054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3050;
				Match(COMMA);
				State = 3051;
				fullId();
				}
				}
				State = 3056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 3057;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropRole(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 176, RULE_dropRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3060;
			Match(DROP);
			State = 3061;
			Match(ROLE);
			State = 3063;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 3062;
				ifExists();
				}
			}

			State = 3065;
			roleName();
			State = 3070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3066;
				Match(COMMA);
				State = 3067;
				roleName();
				}
				}
				State = 3072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetRole(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleContext setRole() {
		SetRoleContext _localctx = new SetRoleContext(Context, State);
		EnterRule(_localctx, 178, RULE_setRole);
		int _la;
		try {
			State = 3106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3073;
				Match(SET);
				State = 3074;
				Match(DEFAULT);
				State = 3075;
				Match(ROLE);
				State = 3086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
				case 1:
					{
					State = 3076;
					Match(NONE);
					}
					break;
				case 2:
					{
					State = 3077;
					Match(ALL);
					}
					break;
				case 3:
					{
					State = 3078;
					roleName();
					State = 3083;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3079;
						Match(COMMA);
						State = 3080;
						roleName();
						}
						}
						State = 3085;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 3088;
				Match(TO);
				State = 3091;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
				case 1:
					{
					State = 3089;
					userName();
					}
					break;
				case 2:
					{
					State = 3090;
					uid();
					}
					break;
				}
				State = 3100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3093;
					Match(COMMA);
					State = 3096;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,408,Context) ) {
					case 1:
						{
						State = 3094;
						userName();
						}
						break;
					case 2:
						{
						State = 3095;
						uid();
						}
						break;
					}
					}
					}
					State = 3102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3103;
				Match(SET);
				State = 3104;
				Match(ROLE);
				State = 3105;
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MySqlParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_INPUT() { return GetToken(MySqlParser.COMMENT_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropSequence(this);
		}
	}

	[RuleVersion(0)]
	public DropSequenceContext dropSequence() {
		DropSequenceContext _localctx = new DropSequenceContext(Context, State);
		EnterRule(_localctx, 180, RULE_dropSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3108;
			Match(DROP);
			State = 3110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 3109;
				Match(TEMPORARY);
				}
			}

			State = 3112;
			Match(SEQUENCE);
			State = 3114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 3113;
				ifExists();
				}
			}

			State = 3117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_INPUT) {
				{
				State = 3116;
				Match(COMMENT_INPUT);
				}
			}

			State = 3119;
			fullId();
			State = 3124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3120;
				Match(COMMA);
				State = 3121;
				fullId();
				}
				}
				State = 3126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext[] renameTableClause() {
			return GetRuleContexts<RenameTableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext renameTableClause(int i) {
			return GetRuleContext<RenameTableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTable(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableContext renameTable() {
		RenameTableContext _localctx = new RenameTableContext(Context, State);
		EnterRule(_localctx, 182, RULE_renameTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3127;
			Match(RENAME);
			State = 3128;
			Match(TABLE);
			State = 3129;
			renameTableClause();
			State = 3134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3130;
				Match(COMMA);
				State = 3131;
				renameTableClause();
				}
				}
				State = 3136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTableClause(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableClauseContext renameTableClause() {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_renameTableClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3137;
			tableName();
			State = 3139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 3138;
				waitNowaitClause();
				}
			}

			State = 3141;
			Match(TO);
			State = 3142;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(Context, State);
		EnterRule(_localctx, 186, RULE_truncateTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3144;
			Match(TRUNCATE);
			State = 3146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 3145;
				Match(TABLE);
				}
			}

			State = 3148;
			tableName();
			State = 3150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 3149;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(MySqlParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 188, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3152;
			Match(CALL);
			State = 3153;
			fullId();
			State = 3160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,420,Context) ) {
			case 1:
				{
				State = 3154;
				Match(LR_BRACKET);
				State = 3157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
				case 1:
					{
					State = 3155;
					constants();
					}
					break;
				case 2:
					{
					State = 3156;
					expressions();
					}
					break;
				}
				State = 3159;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleDeleteStatementContext singleDeleteStatement() {
			return GetRuleContext<SingleDeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleDeleteStatementContext multipleDeleteStatement() {
			return GetRuleContext<MultipleDeleteStatementContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_deleteStatement);
		try {
			State = 3164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,421,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3162;
				singleDeleteStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3163;
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 192, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3166;
			Match(DO);
			State = 3167;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerOpenStatementContext handlerOpenStatement() {
			return GetRuleContext<HandlerOpenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return GetRuleContext<HandlerReadIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadStatementContext handlerReadStatement() {
			return GetRuleContext<HandlerReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerCloseStatementContext handlerCloseStatement() {
			return GetRuleContext<HandlerCloseStatementContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_handlerStatement);
		try {
			State = 3173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3169;
				handlerOpenStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3170;
				handlerReadIndexStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3171;
				handlerReadStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3172;
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public IList<UpdatedElementContext> _duplicatedElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3175;
			Match(INSERT);
			State = 3177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				State = 3176;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3179;
				Match(IGNORE);
				}
			}

			State = 3183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3182;
				Match(INTO);
				}
			}

			State = 3185;
			tableName();
			State = 3192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3186;
				Match(PARTITION);
				State = 3187;
				Match(LR_BRACKET);
				State = 3189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 3188;
					_localctx.partitions = uidList();
					}
				}

				State = 3191;
				Match(RR_BRACKET);
				}
			}

			State = 3210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3198;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,428,Context) ) {
				case 1:
					{
					State = 3194;
					Match(LR_BRACKET);
					State = 3195;
					_localctx.columns = uidList();
					State = 3196;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3200;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3201;
				Match(SET);
				State = 3202;
				_localctx.setFirst = updatedElement();
				State = 3207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3203;
					Match(COMMA);
					State = 3204;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3212;
				Match(ON);
				State = 3213;
				Match(DUPLICATE);
				State = 3214;
				Match(KEY);
				State = 3215;
				Match(UPDATE);
				State = 3216;
				_localctx.duplicatedFirst = updatedElement();
				State = 3221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3217;
					Match(COMMA);
					State = 3218;
					_localctx._updatedElement = updatedElement();
					_localctx._duplicatedElements.Add(_localctx._updatedElement);
					}
					}
					State = 3223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINES() { return GetTokens(MySqlParser.LINES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES(int i) {
			return GetToken(MySqlParser.LINES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataStatementContext loadDataStatement() {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_loadDataStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3226;
			Match(LOAD);
			State = 3227;
			Match(DATA);
			State = 3229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3228;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3231;
				Match(LOCAL);
				}
			}

			State = 3234;
			Match(INFILE);
			State = 3235;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3236;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3239;
			Match(INTO);
			State = 3240;
			Match(TABLE);
			State = 3241;
			tableName();
			State = 3247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3242;
				Match(PARTITION);
				State = 3243;
				Match(LR_BRACKET);
				State = 3244;
				uidList();
				State = 3245;
				Match(RR_BRACKET);
				}
			}

			State = 3252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3249;
				Match(CHARACTER);
				State = 3250;
				Match(SET);
				State = 3251;
				_localctx.charset = charsetName();
				}
			}

			State = 3260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				State = 3254;
				_localctx.fieldsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_localctx.fieldsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3255;
					selectFieldsInto();
					}
					}
					State = 3258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			State = 3268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES) {
				{
				State = 3262;
				Match(LINES);
				State = 3264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3263;
					selectLinesInto();
					}
					}
					State = 3266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			State = 3274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3270;
				Match(IGNORE);
				State = 3271;
				decimalLiteral();
				State = 3272;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
			case 1:
				{
				State = 3276;
				Match(LR_BRACKET);
				State = 3277;
				assignmentField();
				State = 3282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3278;
					Match(COMMA);
					State = 3279;
					assignmentField();
					}
					}
					State = 3284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3285;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				{
				State = 3289;
				Match(SET);
				State = 3290;
				updatedElement();
				State = 3295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3291;
					Match(COMMA);
					State = 3292;
					updatedElement();
					}
					}
					State = 3297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadXmlStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken tag;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MySqlParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROWS() { return GetTokens(MySqlParser.ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS(int i) {
			return GetToken(MySqlParser.ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MySqlParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadXmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadXmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadXmlStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoadXmlStatementContext loadXmlStatement() {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(Context, State);
		EnterRule(_localctx, 200, RULE_loadXmlStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3300;
			Match(LOAD);
			State = 3301;
			Match(XML);
			State = 3303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3302;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3305;
				Match(LOCAL);
				}
			}

			State = 3308;
			Match(INFILE);
			State = 3309;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3310;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3313;
			Match(INTO);
			State = 3314;
			Match(TABLE);
			State = 3315;
			tableName();
			State = 3319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3316;
				Match(CHARACTER);
				State = 3317;
				Match(SET);
				State = 3318;
				_localctx.charset = charsetName();
				}
			}

			State = 3327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS) {
				{
				State = 3321;
				Match(ROWS);
				State = 3322;
				Match(IDENTIFIED);
				State = 3323;
				Match(BY);
				State = 3324;
				Match(LESS_SYMBOL);
				State = 3325;
				_localctx.tag = Match(STRING_LITERAL);
				State = 3326;
				Match(GREATER_SYMBOL);
				}
			}

			State = 3333;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3329;
				Match(IGNORE);
				State = 3330;
				decimalLiteral();
				State = 3331;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
			case 1:
				{
				State = 3335;
				Match(LR_BRACKET);
				State = 3336;
				assignmentField();
				State = 3341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3337;
					Match(COMMA);
					State = 3338;
					assignmentField();
					}
					}
					State = 3343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3344;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
			case 1:
				{
				State = 3348;
				Match(SET);
				State = 3349;
				updatedElement();
				State = 3354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3350;
					Match(COMMA);
					State = 3351;
					updatedElement();
					}
					}
					State = 3356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3359;
			Match(REPLACE);
			State = 3361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				State = 3360;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3363;
				Match(INTO);
				}
			}

			State = 3366;
			tableName();
			State = 3372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3367;
				Match(PARTITION);
				State = 3368;
				Match(LR_BRACKET);
				State = 3369;
				_localctx.partitions = uidList();
				State = 3370;
				Match(RR_BRACKET);
				}
			}

			State = 3390;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3378;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
				case 1:
					{
					State = 3374;
					Match(LR_BRACKET);
					State = 3375;
					_localctx.columns = uidList();
					State = 3376;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3380;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3381;
				Match(SET);
				State = 3382;
				_localctx.setFirst = updatedElement();
				State = 3387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3383;
					Match(COMMA);
					State = 3384;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
	 
		public SelectStatementContext() { }
		public virtual void CopyFrom(SelectStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnionSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext[] unionStatement() {
			return GetRuleContexts<UnionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext unionStatement(int i) {
			return GetRuleContext<UnionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionSelect(this);
		}
	}
	public partial class UnionParenthesisSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext[] unionParenthesis() {
			return GetRuleContexts<UnionParenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext unionParenthesis(int i) {
			return GetRuleContext<UnionParenthesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesisSelect(this);
		}
	}
	public partial class SimpleSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public SimpleSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleSelect(this);
		}
	}
	public partial class ParenthesisSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public ParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParenthesisSelect(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 204, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			State = 3447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3392;
				querySpecification();
				State = 3394;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
				case 1:
					{
					State = 3393;
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3396;
				queryExpression();
				State = 3398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,464,Context) ) {
				case 1:
					{
					State = 3397;
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3400;
				querySpecificationNointo();
				State = 3402;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3401;
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3404;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,465,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3406;
					Match(UNION);
					State = 3408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3407;
						((UnionSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3412;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SELECT:
						{
						State = 3410;
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						State = 3411;
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 3417;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,469,Context) ) {
				case 1:
					{
					State = 3416;
					orderByClause();
					}
					break;
				}
				State = 3420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3419;
					limitClause();
					}
				}

				State = 3423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
				case 1:
					{
					State = 3422;
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3425;
				queryExpressionNointo();
				State = 3427;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3426;
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3429;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,472,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3431;
					Match(UNION);
					State = 3433;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3432;
						((UnionParenthesisSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3435;
					queryExpression();
					}
				}

				State = 3439;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
				case 1:
					{
					State = 3438;
					orderByClause();
					}
					break;
				}
				State = 3442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3441;
					limitClause();
					}
				}

				State = 3445;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,477,Context) ) {
				case 1:
					{
					State = 3444;
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleUpdateStatementContext singleUpdateStatement() {
			return GetRuleContext<SingleUpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleUpdateStatementContext multipleUpdateStatement() {
			return GetRuleContext<MultipleUpdateStatementContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 206, RULE_updateStatement);
		try {
			State = 3451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3449;
				singleUpdateStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3450;
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementValueContext : ParserRuleContext {
		public IToken insertFormat;
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext[] expressionsWithDefaults() {
			return GetRuleContexts<ExpressionsWithDefaultsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return GetRuleContext<ExpressionsWithDefaultsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatementValue(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementValueContext insertStatementValue() {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(Context, State);
		EnterRule(_localctx, 208, RULE_insertStatementValue);
		int _la;
		try {
			State = 3471;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3453;
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3454;
				_localctx.insertFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					_localctx.insertFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3455;
				Match(LR_BRACKET);
				State = 3457;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
				case 1:
					{
					State = 3456;
					expressionsWithDefaults();
					}
					break;
				}
				State = 3459;
				Match(RR_BRACKET);
				State = 3468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3460;
					Match(COMMA);
					State = 3461;
					Match(LR_BRACKET);
					State = 3463;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,481,Context) ) {
					case 1:
						{
						State = 3462;
						expressionsWithDefaults();
						}
						break;
					}
					State = 3465;
					Match(RR_BRACKET);
					}
					}
					State = 3470;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdatedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdatedElement(this);
		}
	}

	[RuleVersion(0)]
	public UpdatedElementContext updatedElement() {
		UpdatedElementContext _localctx = new UpdatedElementContext(Context, State);
		EnterRule(_localctx, 210, RULE_updatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3473;
			fullColumnName();
			State = 3474;
			Match(EQUAL_SYMBOL);
			State = 3477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				{
				State = 3475;
				expression(0);
				}
				break;
			case 2:
				{
				State = 3476;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignmentField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignmentField(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentFieldContext assignmentField() {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(Context, State);
		EnterRule(_localctx, 212, RULE_assignmentField);
		try {
			State = 3481;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3479;
				uid();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3480;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockOptionContext lockOption() {
			return GetRuleContext<LockOptionContext>(0);
		}
		public LockClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockClause(this);
		}
	}

	[RuleVersion(0)]
	public LockClauseContext lockClause() {
		LockClauseContext _localctx = new LockClauseContext(Context, State);
		EnterRule(_localctx, 214, RULE_lockClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 3483;
				Match(FOR);
				State = 3484;
				Match(UPDATE);
				}
				break;
			case LOCK:
				{
				State = 3485;
				Match(LOCK);
				State = 3486;
				Match(IN);
				State = 3487;
				Match(SHARE);
				State = 3488;
				Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,487,Context) ) {
			case 1:
				{
				State = 3491;
				lockOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public SingleDeleteStatementContext singleDeleteStatement() {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_singleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3494;
			Match(DELETE);
			State = 3496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3495;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 3498;
				Match(QUICK);
				}
			}

			State = 3502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3501;
				Match(IGNORE);
				}
			}

			State = 3504;
			Match(FROM);
			State = 3505;
			tableName();
			State = 3511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3506;
				Match(PARTITION);
				State = 3507;
				Match(LR_BRACKET);
				State = 3508;
				uidList();
				State = 3509;
				Match(RR_BRACKET);
				}
			}

			State = 3515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3513;
				Match(WHERE);
				State = 3514;
				expression(0);
				}
			}

			State = 3518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3517;
				orderByClause();
				}
			}

			State = 3522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3520;
				Match(LIMIT);
				State = 3521;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MySqlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MySqlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMultipleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMultipleDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public MultipleDeleteStatementContext multipleDeleteStatement() {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_multipleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3524;
			Match(DELETE);
			State = 3526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3525;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 3528;
				Match(QUICK);
				}
				break;
			}
			State = 3532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3531;
				Match(IGNORE);
				}
			}

			State = 3573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 3534;
				tableName();
				State = 3537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3535;
					Match(DOT);
					State = 3536;
					Match(STAR);
					}
				}

				State = 3547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3539;
					Match(COMMA);
					State = 3540;
					tableName();
					State = 3543;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3541;
						Match(DOT);
						State = 3542;
						Match(STAR);
						}
					}

					}
					}
					State = 3549;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3550;
				Match(FROM);
				State = 3551;
				tableSources();
				}
				break;
			case FROM:
				{
				State = 3553;
				Match(FROM);
				State = 3554;
				tableName();
				State = 3557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3555;
					Match(DOT);
					State = 3556;
					Match(STAR);
					}
				}

				State = 3567;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3559;
					Match(COMMA);
					State = 3560;
					tableName();
					State = 3563;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3561;
						Match(DOT);
						State = 3562;
						Match(STAR);
						}
					}

					}
					}
					State = 3569;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3570;
				Match(USING);
				State = 3571;
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3575;
				Match(WHERE);
				State = 3576;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerOpenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerOpenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerOpenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerOpenStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerOpenStatementContext handlerOpenStatement() {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(Context, State);
		EnterRule(_localctx, 220, RULE_handlerOpenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3579;
			Match(HANDLER);
			State = 3580;
			tableName();
			State = 3581;
			Match(OPEN);
			State = 3586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
			case 1:
				{
				State = 3583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3582;
					Match(AS);
					}
				}

				State = 3585;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadIndexStatementContext : ParserRuleContext {
		public UidContext index;
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadIndexStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadIndexStatementContext handlerReadIndexStatement() {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(Context, State);
		EnterRule(_localctx, 222, RULE_handlerReadIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3588;
			Match(HANDLER);
			State = 3589;
			tableName();
			State = 3590;
			Match(READ);
			State = 3591;
			_localctx.index = uid();
			State = 3598;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				State = 3592;
				comparisonOperator();
				State = 3593;
				Match(LR_BRACKET);
				State = 3594;
				constants();
				State = 3595;
				Match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				State = 3597;
				_localctx.moveOrder = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					_localctx.moveOrder = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3600;
				Match(WHERE);
				State = 3601;
				expression(0);
				}
			}

			State = 3606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3604;
				Match(LIMIT);
				State = 3605;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadStatementContext : ParserRuleContext {
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadStatementContext handlerReadStatement() {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(Context, State);
		EnterRule(_localctx, 224, RULE_handlerReadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3608;
			Match(HANDLER);
			State = 3609;
			tableName();
			State = 3610;
			Match(READ);
			State = 3611;
			_localctx.moveOrder = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				_localctx.moveOrder = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3612;
				Match(WHERE);
				State = 3613;
				expression(0);
				}
			}

			State = 3618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3616;
				Match(LIMIT);
				State = 3617;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerCloseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCloseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerCloseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerCloseStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerCloseStatementContext handlerCloseStatement() {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_handlerCloseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3620;
			Match(HANDLER);
			State = 3621;
			tableName();
			State = 3622;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleUpdateStatement(this);
		}
	}

	[RuleVersion(0)]
	public SingleUpdateStatementContext singleUpdateStatement() {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_singleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3624;
			Match(UPDATE);
			State = 3626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3625;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3628;
				Match(IGNORE);
				}
			}

			State = 3631;
			tableName();
			State = 3636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 3633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3632;
					Match(AS);
					}
				}

				State = 3635;
				uid();
				}
			}

			State = 3638;
			Match(SET);
			State = 3639;
			updatedElement();
			State = 3644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3640;
				Match(COMMA);
				State = 3641;
				updatedElement();
				}
				}
				State = 3646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3647;
				Match(WHERE);
				State = 3648;
				expression(0);
				}
			}

			State = 3652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3651;
				orderByClause();
				}
			}

			State = 3655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3654;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMultipleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMultipleUpdateStatement(this);
		}
	}

	[RuleVersion(0)]
	public MultipleUpdateStatementContext multipleUpdateStatement() {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_multipleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3657;
			Match(UPDATE);
			State = 3659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3658;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3661;
				Match(IGNORE);
				}
			}

			State = 3664;
			tableSources();
			State = 3665;
			Match(SET);
			State = 3666;
			updatedElement();
			State = 3671;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3667;
				Match(COMMA);
				State = 3668;
				updatedElement();
				}
				}
				State = 3673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3674;
				Match(WHERE);
				State = 3675;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 232, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3678;
			Match(ORDER);
			State = 3679;
			Match(BY);
			State = 3680;
			orderByExpression();
			State = 3685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3681;
				Match(COMMA);
				State = 3682;
				orderByExpression();
				}
				}
				State = 3687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderByExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderByExpression(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 234, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3688;
			expression(0);
			State = 3690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
			case 1:
				{
				State = 3689;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext[] tableSource() {
			return GetRuleContexts<TableSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource(int i) {
			return GetRuleContext<TableSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSources(this);
		}
	}

	[RuleVersion(0)]
	public TableSourcesContext tableSources() {
		TableSourcesContext _localctx = new TableSourcesContext(Context, State);
		EnterRule(_localctx, 236, RULE_tableSources);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3692;
			tableSource();
			State = 3697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3693;
				Match(COMMA);
				State = 3694;
				tableSource();
				}
				}
				State = 3699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
	 
		public TableSourceContext() { }
		public virtual void CopyFrom(TableSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableSourceNestedContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceNestedContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourceNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourceNested(this);
		}
	}
	public partial class TableSourceBaseContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceBaseContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourceBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourceBase(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(Context, State);
		EnterRule(_localctx, 238, RULE_tableSource);
		int _la;
		try {
			int _alt;
			State = 3717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3700;
				tableSourceItem();
				State = 3704;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,528,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3701;
						joinPart();
						}
						} 
					}
					State = 3706;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,528,Context);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3707;
				Match(LR_BRACKET);
				State = 3708;
				tableSourceItem();
				State = 3712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (NATURAL - 109)) | (1L << (RIGHT - 109)) | (1L << (STRAIGHT_JOIN - 109)))) != 0)) {
					{
					{
					State = 3709;
					joinPart();
					}
					}
					State = 3714;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3715;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceItemContext : ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceItem; } }
	 
		public TableSourceItemContext() { }
		public virtual void CopyFrom(TableSourceItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryTableItemContext : TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryTableItem(this);
		}
	}
	public partial class AtomTableItemContext : TableSourceItemContext {
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAtomTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAtomTableItem(this);
		}
	}
	public partial class TableSourcesItemContext : TableSourceItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableSourcesItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableSourcesItem(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceItemContext tableSourceItem() {
		TableSourceItemContext _localctx = new TableSourceItemContext(Context, State);
		EnterRule(_localctx, 240, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			State = 3759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3719;
				tableName();
				State = 3725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 3720;
					Match(PARTITION);
					State = 3721;
					Match(LR_BRACKET);
					State = 3722;
					uidList();
					State = 3723;
					Match(RR_BRACKET);
					}
				}

				State = 3731;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
				case 1:
					{
					State = 3728;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3727;
						Match(AS);
						}
					}

					State = 3730;
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				State = 3741;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
				case 1:
					{
					State = 3733;
					indexHint();
					State = 3738;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,534,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3734;
							Match(COMMA);
							State = 3735;
							indexHint();
							}
							} 
						}
						State = 3740;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,534,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3748;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
				case 1:
					{
					State = 3743;
					selectStatement();
					}
					break;
				case 2:
					{
					State = 3744;
					Match(LR_BRACKET);
					State = 3745;
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					State = 3746;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3750;
					Match(AS);
					}
				}

				State = 3753;
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3755;
				Match(LR_BRACKET);
				State = 3756;
				tableSources();
				State = 3757;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IToken indexHintAction;
		public IToken keyFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 242, RULE_indexHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3761;
			_localctx.indexHintAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				_localctx.indexHintAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3762;
			_localctx.keyFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				_localctx.keyFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3763;
				Match(FOR);
				State = 3764;
				indexHintType();
				}
			}

			State = 3767;
			Match(LR_BRACKET);
			State = 3768;
			uidList();
			State = 3769;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 244, RULE_indexHintType);
		try {
			State = 3776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3771;
				Match(JOIN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3772;
				Match(ORDER);
				State = 3773;
				Match(BY);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3774;
				Match(GROUP);
				State = 3775;
				Match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinPartContext : ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinPart; } }
	 
		public JoinPartContext() { }
		public virtual void CopyFrom(JoinPartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(MySqlParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInnerJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInnerJoin(this);
		}
	}
	public partial class NaturalJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(MySqlParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoin(this);
		}
	}
	public partial class OuterJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOuterJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOuterJoin(this);
		}
	}
	public partial class StraightJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StraightJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStraightJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStraightJoin(this);
		}
	}

	[RuleVersion(0)]
	public JoinPartContext joinPart() {
		JoinPartContext _localctx = new JoinPartContext(Context, State);
		EnterRule(_localctx, 246, RULE_joinPart);
		int _la;
		try {
			State = 3822;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					State = 3778;
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3781;
				Match(JOIN);
				State = 3782;
				tableSourceItem();
				State = 3790;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
				case 1:
					{
					State = 3783;
					Match(ON);
					State = 3784;
					expression(0);
					}
					break;
				case 2:
					{
					State = 3785;
					Match(USING);
					State = 3786;
					Match(LR_BRACKET);
					State = 3787;
					uidList();
					State = 3788;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3792;
				Match(STRAIGHT_JOIN);
				State = 3793;
				tableSourceItem();
				State = 3796;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
				case 1:
					{
					State = 3794;
					Match(ON);
					State = 3795;
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3798;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 3799;
					Match(OUTER);
					}
				}

				State = 3802;
				Match(JOIN);
				State = 3803;
				tableSourceItem();
				State = 3811;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 3804;
					Match(ON);
					State = 3805;
					expression(0);
					}
					break;
				case USING:
					{
					State = 3806;
					Match(USING);
					State = 3807;
					Match(LR_BRACKET);
					State = 3808;
					uidList();
					State = 3809;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3813;
				Match(NATURAL);
				State = 3818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 3814;
					_la = TokenStream.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3816;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 3815;
						Match(OUTER);
						}
					}

					}
				}

				State = 3820;
				Match(JOIN);
				State = 3821;
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 248, RULE_queryExpression);
		try {
			State = 3832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,549,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3824;
				Match(LR_BRACKET);
				State = 3825;
				querySpecification();
				State = 3826;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3828;
				Match(LR_BRACKET);
				State = 3829;
				queryExpression();
				State = 3830;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionNointo(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionNointoContext queryExpressionNointo() {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(Context, State);
		EnterRule(_localctx, 250, RULE_queryExpressionNointo);
		try {
			State = 3842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3834;
				Match(LR_BRACKET);
				State = 3835;
				querySpecificationNointo();
				State = 3836;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3838;
				Match(LR_BRACKET);
				State = 3839;
				queryExpressionNointo();
				State = 3840;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectIntoExpressionContext selectIntoExpression() {
			return GetRuleContext<SelectIntoExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 252, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			State = 3902;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,567,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3844;
				Match(SELECT);
				State = 3848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,551,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3845;
						selectSpec();
						}
						} 
					}
					State = 3850;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,551,Context);
				}
				State = 3851;
				selectElements();
				State = 3853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3852;
					selectIntoExpression();
					}
				}

				State = 3856;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
				case 1:
					{
					State = 3855;
					fromClause();
					}
					break;
				}
				State = 3859;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,554,Context) ) {
				case 1:
					{
					State = 3858;
					groupByClause();
					}
					break;
				}
				State = 3862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3861;
					havingClause();
					}
				}

				State = 3865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3864;
					windowClause();
					}
				}

				State = 3868;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,557,Context) ) {
				case 1:
					{
					State = 3867;
					orderByClause();
					}
					break;
				}
				State = 3871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,558,Context) ) {
				case 1:
					{
					State = 3870;
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3873;
				Match(SELECT);
				State = 3877;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,559,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3874;
						selectSpec();
						}
						} 
					}
					State = 3879;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,559,Context);
				}
				State = 3880;
				selectElements();
				State = 3882;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,560,Context) ) {
				case 1:
					{
					State = 3881;
					fromClause();
					}
					break;
				}
				State = 3885;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,561,Context) ) {
				case 1:
					{
					State = 3884;
					groupByClause();
					}
					break;
				}
				State = 3888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 3887;
					havingClause();
					}
				}

				State = 3891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 3890;
					windowClause();
					}
				}

				State = 3894;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,564,Context) ) {
				case 1:
					{
					State = 3893;
					orderByClause();
					}
					break;
				}
				State = 3897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,565,Context) ) {
				case 1:
					{
					State = 3896;
					limitClause();
					}
					break;
				}
				State = 3900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 3899;
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecificationNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecificationNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecificationNointo(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationNointoContext querySpecificationNointo() {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(Context, State);
		EnterRule(_localctx, 254, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3904;
			Match(SELECT);
			State = 3908;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,568,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3905;
					selectSpec();
					}
					} 
				}
				State = 3910;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,568,Context);
			}
			State = 3911;
			selectElements();
			State = 3913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,569,Context) ) {
			case 1:
				{
				State = 3912;
				fromClause();
				}
				break;
			}
			State = 3916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,570,Context) ) {
			case 1:
				{
				State = 3915;
				groupByClause();
				}
				break;
			}
			State = 3919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 3918;
				havingClause();
				}
			}

			State = 3922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WINDOW) {
				{
				State = 3921;
				windowClause();
				}
			}

			State = 3925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,573,Context) ) {
			case 1:
				{
				State = 3924;
				orderByClause();
				}
				break;
			}
			State = 3928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
			case 1:
				{
				State = 3927;
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionParenthesisContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesis(this);
		}
	}

	[RuleVersion(0)]
	public UnionParenthesisContext unionParenthesis() {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(Context, State);
		EnterRule(_localctx, 256, RULE_unionParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3930;
			Match(UNION);
			State = 3932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3931;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3934;
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionStatementContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionStatement(this);
		}
	}

	[RuleVersion(0)]
	public UnionStatementContext unionStatement() {
		UnionStatementContext _localctx = new UnionStatementContext(Context, State);
		EnterRule(_localctx, 258, RULE_unionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3936;
			Match(UNION);
			State = 3938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 3937;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3942;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 3940;
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				State = 3941;
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW() { return GetToken(MySqlParser.DISTINCTROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT() { return GetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT() { return GetToken(MySqlParser.SQL_BIG_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectSpec(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpecContext selectSpec() {
		SelectSpecContext _localctx = new SelectSpecContext(Context, State);
		EnterRule(_localctx, 260, RULE_selectSpec);
		int _la;
		try {
			State = 3952;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3944;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3945;
				Match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3946;
				Match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3947;
				Match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3948;
				Match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3949;
				Match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3950;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3951;
				Match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementsContext : ParserRuleContext {
		public IToken star;
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext[] selectElement() {
			return GetRuleContexts<SelectElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext selectElement(int i) {
			return GetRuleContext<SelectElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectElements(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementsContext selectElements() {
		SelectElementsContext _localctx = new SelectElementsContext(Context, State);
		EnterRule(_localctx, 262, RULE_selectElements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,579,Context) ) {
			case 1:
				{
				State = 3954;
				_localctx.star = Match(STAR);
				}
				break;
			case 2:
				{
				State = 3955;
				selectElement();
				}
				break;
			}
			State = 3962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3958;
				Match(COMMA);
				State = 3959;
				selectElement();
				}
				}
				State = 3964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementContext : ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElement; } }
	 
		public SelectElementContext() { }
		public virtual void CopyFrom(SelectElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectExpressionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectExpressionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectExpressionElement(this);
		}
	}
	public partial class SelectFunctionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectFunctionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectFunctionElement(this);
		}
	}
	public partial class SelectStarElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectStarElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectStarElement(this);
		}
	}
	public partial class SelectColumnElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectColumnElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectColumnElement(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementContext selectElement() {
		SelectElementContext _localctx = new SelectElementContext(Context, State);
		EnterRule(_localctx, 264, RULE_selectElement);
		int _la;
		try {
			State = 3994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,588,Context) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3965;
				fullId();
				State = 3966;
				Match(DOT);
				State = 3967;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3969;
				fullColumnName();
				State = 3974;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
				case 1:
					{
					State = 3971;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3970;
						Match(AS);
						}
					}

					State = 3973;
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3976;
				functionCall();
				State = 3981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,584,Context) ) {
				case 1:
					{
					State = 3978;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3977;
						Match(AS);
						}
					}

					State = 3980;
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3985;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,585,Context) ) {
				case 1:
					{
					State = 3983;
					Match(LOCAL_ID);
					State = 3984;
					Match(VAR_ASSIGN);
					}
					break;
				}
				State = 3987;
				expression(0);
				State = 3992;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,587,Context) ) {
				case 1:
					{
					State = 3989;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3988;
						Match(AS);
						}
					}

					State = 3991;
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectIntoExpressionContext : ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectIntoExpression; } }
	 
		public SelectIntoExpressionContext() { }
		public virtual void CopyFrom(SelectIntoExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectIntoVariablesContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoVariables(this);
		}
	}
	public partial class SelectIntoTextFileContext : SelectIntoExpressionContext {
		public IToken filename;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE() { return GetToken(MySqlParser.OUTFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoTextFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoTextFile(this);
		}
	}
	public partial class SelectIntoDumpFileContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoDumpFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoDumpFile(this);
		}
	}

	[RuleVersion(0)]
	public SelectIntoExpressionContext selectIntoExpression() {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(Context, State);
		EnterRule(_localctx, 266, RULE_selectIntoExpression);
		int _la;
		try {
			State = 4032;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3996;
				Match(INTO);
				State = 3997;
				assignmentField();
				State = 4002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3998;
					Match(COMMA);
					State = 3999;
					assignmentField();
					}
					}
					State = 4004;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4005;
				Match(INTO);
				State = 4006;
				Match(DUMPFILE);
				State = 4007;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 4008;
				Match(INTO);
				State = 4009;
				Match(OUTFILE);
				State = 4010;
				((SelectIntoTextFileContext)_localctx).filename = Match(STRING_LITERAL);
				State = 4014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 4011;
					Match(CHARACTER);
					State = 4012;
					Match(SET);
					State = 4013;
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				State = 4022;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
				case 1:
					{
					State = 4016;
					((SelectIntoTextFileContext)_localctx).fieldsFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4018;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4017;
						selectFieldsInto();
						}
						}
						State = 4020;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				State = 4030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINES) {
					{
					State = 4024;
					Match(LINES);
					State = 4026;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4025;
						selectLinesInto();
						}
						}
						State = 4028;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldsIntoContext : ParserRuleContext {
		public IToken terminationField;
		public IToken enclosion;
		public IToken escaping;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED() { return GetToken(MySqlParser.ENCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY() { return GetToken(MySqlParser.OPTIONALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED() { return GetToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldsInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectFieldsInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectFieldsInto(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldsIntoContext selectFieldsInto() {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(Context, State);
		EnterRule(_localctx, 268, RULE_selectFieldsInto);
		int _la;
		try {
			State = 4046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4034;
				Match(TERMINATED);
				State = 4035;
				Match(BY);
				State = 4036;
				_localctx.terminationField = Match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4038;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY) {
					{
					State = 4037;
					Match(OPTIONALLY);
					}
				}

				State = 4040;
				Match(ENCLOSED);
				State = 4041;
				Match(BY);
				State = 4042;
				_localctx.enclosion = Match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4043;
				Match(ESCAPED);
				State = 4044;
				Match(BY);
				State = 4045;
				_localctx.escaping = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLinesIntoContext : ParserRuleContext {
		public IToken starting;
		public IToken terminationLine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING() { return GetToken(MySqlParser.STARTING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLinesInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectLinesInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectLinesInto(this);
		}
	}

	[RuleVersion(0)]
	public SelectLinesIntoContext selectLinesInto() {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(Context, State);
		EnterRule(_localctx, 270, RULE_selectLinesInto);
		try {
			State = 4054;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4048;
				Match(STARTING);
				State = 4049;
				Match(BY);
				State = 4050;
				_localctx.starting = Match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4051;
				Match(TERMINATED);
				State = 4052;
				Match(BY);
				State = 4053;
				_localctx.terminationLine = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ExpressionContext whereExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 272, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 4056;
				Match(FROM);
				State = 4057;
				tableSources();
				}
			}

			State = 4062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4060;
				Match(WHERE);
				State = 4061;
				_localctx.whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext[] groupByItem() {
			return GetRuleContexts<GroupByItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext groupByItem(int i) {
			return GetRuleContext<GroupByItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 274, RULE_groupByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4064;
			Match(GROUP);
			State = 4065;
			Match(BY);
			State = 4066;
			groupByItem();
			State = 4071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4067;
				Match(COMMA);
				State = 4068;
				groupByItem();
				}
				}
				State = 4073;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,602,Context) ) {
			case 1:
				{
				State = 4074;
				Match(WITH);
				State = 4075;
				Match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ExpressionContext havingExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(MySqlParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 276, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4078;
			Match(HAVING);
			State = 4079;
			_localctx.havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(MySqlParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext[] windowName() {
			return GetRuleContexts<WindowNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName(int i) {
			return GetRuleContext<WindowNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(MySqlParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(MySqlParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext[] windowSpec() {
			return GetRuleContexts<WindowSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec(int i) {
			return GetRuleContext<WindowSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 278, RULE_windowClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4081;
			Match(WINDOW);
			State = 4082;
			windowName();
			State = 4083;
			Match(AS);
			State = 4084;
			Match(LR_BRACKET);
			State = 4085;
			windowSpec();
			State = 4086;
			Match(RR_BRACKET);
			State = 4096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4087;
				Match(COMMA);
				State = 4088;
				windowName();
				State = 4089;
				Match(AS);
				State = 4090;
				Match(LR_BRACKET);
				State = 4091;
				windowSpec();
				State = 4092;
				Match(RR_BRACKET);
				}
				}
				State = 4098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByItemContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupByItem(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemContext groupByItem() {
		GroupByItemContext _localctx = new GroupByItemContext(Context, State);
		EnterRule(_localctx, 280, RULE_groupByItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4099;
			expression(0);
			State = 4101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,604,Context) ) {
			case 1:
				{
				State = 4100;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext[] limitClauseAtom() {
			return GetRuleContexts<LimitClauseAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom(int i) {
			return GetRuleContext<LimitClauseAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 282, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4103;
			Match(LIMIT);
			State = 4114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,606,Context) ) {
			case 1:
				{
				State = 4107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,605,Context) ) {
				case 1:
					{
					State = 4104;
					_localctx.offset = limitClauseAtom();
					State = 4105;
					Match(COMMA);
					}
					break;
				}
				State = 4109;
				_localctx.limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				State = 4110;
				_localctx.limit = limitClauseAtom();
				State = 4111;
				Match(OFFSET);
				State = 4112;
				_localctx.offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClauseAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitClauseAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitClauseAtom(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseAtomContext limitClauseAtom() {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(Context, State);
		EnterRule(_localctx, 284, RULE_limitClauseAtom);
		try {
			State = 4119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4116;
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4117;
				mysqlVariable();
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4118;
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartTransaction(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionContext startTransaction() {
		StartTransactionContext _localctx = new StartTransactionContext(Context, State);
		EnterRule(_localctx, 286, RULE_startTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4121;
			Match(START);
			State = 4122;
			Match(TRANSACTION);
			State = 4131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ || _la==WITH) {
				{
				State = 4123;
				transactionMode();
				State = 4128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4124;
					Match(COMMA);
					State = 4125;
					transactionMode();
					}
					}
					State = 4130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 288, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4133;
			Match(BEGIN);
			State = 4135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4134;
				Match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommitWork(this);
		}
	}

	[RuleVersion(0)]
	public CommitWorkContext commitWork() {
		CommitWorkContext _localctx = new CommitWorkContext(Context, State);
		EnterRule(_localctx, 290, RULE_commitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4137;
			Match(COMMIT);
			State = 4139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4138;
				Match(WORK);
				}
			}

			State = 4146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 4141;
				Match(AND);
				State = 4143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4142;
					_localctx.nochain = Match(NO);
					}
				}

				State = 4145;
				Match(CHAIN);
				}
			}

			State = 4152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,615,Context) ) {
			case 1:
				{
				State = 4149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4148;
					_localctx.norelease = Match(NO);
					}
				}

				State = 4151;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRollbackWork(this);
		}
	}

	[RuleVersion(0)]
	public RollbackWorkContext rollbackWork() {
		RollbackWorkContext _localctx = new RollbackWorkContext(Context, State);
		EnterRule(_localctx, 292, RULE_rollbackWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4154;
			Match(ROLLBACK);
			State = 4156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4155;
				Match(WORK);
				}
			}

			State = 4163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 4158;
				Match(AND);
				State = 4160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4159;
					_localctx.nochain = Match(NO);
					}
				}

				State = 4162;
				Match(CHAIN);
				}
			}

			State = 4169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,620,Context) ) {
			case 1:
				{
				State = 4166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4165;
					_localctx.norelease = Match(NO);
					}
				}

				State = 4168;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 294, RULE_savepointStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4171;
			Match(SAVEPOINT);
			State = 4172;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRollbackStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRollbackStatement(this);
		}
	}

	[RuleVersion(0)]
	public RollbackStatementContext rollbackStatement() {
		RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_rollbackStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4174;
			Match(ROLLBACK);
			State = 4176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4175;
				Match(WORK);
				}
			}

			State = 4178;
			Match(TO);
			State = 4180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,622,Context) ) {
			case 1:
				{
				State = 4179;
				Match(SAVEPOINT);
				}
				break;
			}
			State = 4182;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReleaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_releaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReleaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReleaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReleaseStatementContext releaseStatement() {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(Context, State);
		EnterRule(_localctx, 298, RULE_releaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4184;
			Match(RELEASE);
			State = 4185;
			Match(SAVEPOINT);
			State = 4186;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext[] lockTableElement() {
			return GetRuleContexts<LockTableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext lockTableElement(int i) {
			return GetRuleContext<LockTableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockTables(this);
		}
	}

	[RuleVersion(0)]
	public LockTablesContext lockTables() {
		LockTablesContext _localctx = new LockTablesContext(Context, State);
		EnterRule(_localctx, 300, RULE_lockTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4188;
			Match(LOCK);
			State = 4189;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4190;
			lockTableElement();
			State = 4195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4191;
				Match(COMMA);
				State = 4192;
				lockTableElement();
				}
				}
				State = 4197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 4198;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnlockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnlockTables(this);
		}
	}

	[RuleVersion(0)]
	public UnlockTablesContext unlockTables() {
		UnlockTablesContext _localctx = new UnlockTablesContext(Context, State);
		EnterRule(_localctx, 302, RULE_unlockTables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4201;
			Match(UNLOCK);
			State = 4202;
			Match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAutocommitStatementContext : ParserRuleContext {
		public IToken autocommitValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAutocommitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommitStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetAutocommitStatementContext setAutocommitStatement() {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(Context, State);
		EnterRule(_localctx, 304, RULE_setAutocommitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4204;
			Match(SET);
			State = 4205;
			Match(AUTOCOMMIT);
			State = 4206;
			Match(EQUAL_SYMBOL);
			State = 4207;
			_localctx.autocommitValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_localctx.autocommitValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTransactionStatementContext : ParserRuleContext {
		public IToken transactionContext;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext[] transactionOption() {
			return GetRuleContexts<TransactionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext transactionOption(int i) {
			return GetRuleContext<TransactionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetTransactionStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetTransactionStatementContext setTransactionStatement() {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(Context, State);
		EnterRule(_localctx, 306, RULE_setTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4209;
			Match(SET);
			State = 4211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				State = 4210;
				_localctx.transactionContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					_localctx.transactionContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4213;
			Match(TRANSACTION);
			State = 4214;
			transactionOption();
			State = 4219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4215;
				Match(COMMA);
				State = 4216;
				transactionOption();
				}
				}
				State = 4221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionMode(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 308, RULE_transactionMode);
		try {
			State = 4229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,627,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4222;
				Match(WITH);
				State = 4223;
				Match(CONSISTENT);
				State = 4224;
				Match(SNAPSHOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4225;
				Match(READ);
				State = 4226;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4227;
				Match(READ);
				State = 4228;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockActionContext lockAction() {
			return GetRuleContext<LockActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockTableElement(this);
		}
	}

	[RuleVersion(0)]
	public LockTableElementContext lockTableElement() {
		LockTableElementContext _localctx = new LockTableElementContext(Context, State);
		EnterRule(_localctx, 310, RULE_lockTableElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4231;
			tableName();
			State = 4236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 4233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4232;
					Match(AS);
					}
				}

				State = 4235;
				uid();
				}
			}

			State = 4238;
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockAction(this);
		}
	}

	[RuleVersion(0)]
	public LockActionContext lockAction() {
		LockActionContext _localctx = new LockActionContext(Context, State);
		EnterRule(_localctx, 312, RULE_lockAction);
		int _la;
		try {
			State = 4248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4240;
				Match(READ);
				State = 4242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL) {
					{
					State = 4241;
					Match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					State = 4244;
					Match(LOW_PRIORITY);
					}
				}

				State = 4247;
				Match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelContext transactionLevel() {
			return GetRuleContext<TransactionLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionOption(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOptionContext transactionOption() {
		TransactionOptionContext _localctx = new TransactionOptionContext(Context, State);
		EnterRule(_localctx, 314, RULE_transactionOption);
		try {
			State = 4257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,633,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4250;
				Match(ISOLATION);
				State = 4251;
				Match(LEVEL);
				State = 4252;
				transactionLevel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4253;
				Match(READ);
				State = 4254;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4255;
				Match(READ);
				State = 4256;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevel(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelContext transactionLevel() {
		TransactionLevelContext _localctx = new TransactionLevelContext(Context, State);
		EnterRule(_localctx, 316, RULE_transactionLevel);
		try {
			State = 4266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,634,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4259;
				Match(REPEATABLE);
				State = 4260;
				Match(READ);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4261;
				Match(READ);
				State = 4262;
				Match(COMMITTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4263;
				Match(READ);
				State = 4264;
				Match(UNCOMMITTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4265;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeMaster(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 318, RULE_changeMaster);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4268;
			Match(CHANGE);
			State = 4269;
			Match(MASTER);
			State = 4270;
			Match(TO);
			State = 4271;
			masterOption();
			State = 4276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4272;
				Match(COMMA);
				State = 4273;
				masterOption();
				}
				}
				State = 4278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4279;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext[] replicationFilter() {
			return GetRuleContexts<ReplicationFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext replicationFilter(int i) {
			return GetRuleContext<ReplicationFilterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationFilter(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationFilterContext changeReplicationFilter() {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(Context, State);
		EnterRule(_localctx, 320, RULE_changeReplicationFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4282;
			Match(CHANGE);
			State = 4283;
			Match(REPLICATION);
			State = 4284;
			Match(FILTER);
			State = 4285;
			replicationFilter();
			State = 4290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4286;
				Match(COMMA);
				State = 4287;
				replicationFilter();
				}
				}
				State = 4292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeBinaryLogsContext : ParserRuleContext {
		public IToken purgeFormat;
		public IToken fileName;
		public IToken timeValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE() { return GetToken(MySqlParser.PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeBinaryLogs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPurgeBinaryLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPurgeBinaryLogs(this);
		}
	}

	[RuleVersion(0)]
	public PurgeBinaryLogsContext purgeBinaryLogs() {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(Context, State);
		EnterRule(_localctx, 322, RULE_purgeBinaryLogs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4293;
			Match(PURGE);
			State = 4294;
			_localctx.purgeFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				_localctx.purgeFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4295;
			Match(LOGS);
			State = 4300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				{
				State = 4296;
				Match(TO);
				State = 4297;
				_localctx.fileName = Match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				State = 4298;
				Match(BEFORE);
				State = 4299;
				_localctx.timeValue = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetMaster(this);
		}
	}

	[RuleVersion(0)]
	public ResetMasterContext resetMaster() {
		ResetMasterContext _localctx = new ResetMasterContext(Context, State);
		EnterRule(_localctx, 324, RULE_resetMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4302;
			Match(RESET);
			State = 4303;
			Match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetSlave(this);
		}
	}

	[RuleVersion(0)]
	public ResetSlaveContext resetSlave() {
		ResetSlaveContext _localctx = new ResetSlaveContext(Context, State);
		EnterRule(_localctx, 326, RULE_resetSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4305;
			Match(RESET);
			State = 4306;
			Match(SLAVE);
			State = 4308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 4307;
				Match(ALL);
				}
			}

			State = 4311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4310;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext[] connectionOption() {
			return GetRuleContexts<ConnectionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext connectionOption(int i) {
			return GetRuleContext<ConnectionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartSlave(this);
		}
	}

	[RuleVersion(0)]
	public StartSlaveContext startSlave() {
		StartSlaveContext _localctx = new StartSlaveContext(Context, State);
		EnterRule(_localctx, 328, RULE_startSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4313;
			Match(START);
			State = 4314;
			Match(SLAVE);
			State = 4323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4315;
				threadType();
				State = 4320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4316;
					Match(COMMA);
					State = 4317;
					threadType();
					}
					}
					State = 4322;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 4327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 4325;
				Match(UNTIL);
				State = 4326;
				untilOption();
				}
			}

			State = 4332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				State = 4329;
				connectionOption();
				}
				}
				State = 4334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4335;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStopSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStopSlave(this);
		}
	}

	[RuleVersion(0)]
	public StopSlaveContext stopSlave() {
		StopSlaveContext _localctx = new StopSlaveContext(Context, State);
		EnterRule(_localctx, 330, RULE_stopSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4338;
			Match(STOP);
			State = 4339;
			Match(SLAVE);
			State = 4348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4340;
				threadType();
				State = 4345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4341;
					Match(COMMA);
					State = 4342;
					threadType();
					}
					}
					State = 4347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartGroupReplication(this);
		}
	}

	[RuleVersion(0)]
	public StartGroupReplicationContext startGroupReplication() {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(Context, State);
		EnterRule(_localctx, 332, RULE_startGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4350;
			Match(START);
			State = 4351;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStopGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStopGroupReplication(this);
		}
	}

	[RuleVersion(0)]
	public StopGroupReplicationContext stopGroupReplication() {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(Context, State);
		EnterRule(_localctx, 334, RULE_stopGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4353;
			Match(STOP);
			State = 4354;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
	 
		public MasterOptionContext() { }
		public virtual void CopyFrom(MasterOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MasterStringOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringMasterOptionContext stringMasterOption() {
			return GetRuleContext<StringMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterStringOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterStringOption(this);
		}
	}
	public partial class MasterRealOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterRealOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterRealOption(this);
		}
	}
	public partial class MasterBoolOptionContext : MasterOptionContext {
		public IToken boolVal;
		[System.Diagnostics.DebuggerNonUserCode] public BoolMasterOptionContext boolMasterOption() {
			return GetRuleContext<BoolMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterBoolOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterBoolOption(this);
		}
	}
	public partial class MasterUidListOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterUidListOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterUidListOption(this);
		}
	}
	public partial class MasterDecimalOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalMasterOptionContext decimalMasterOption() {
			return GetRuleContext<DecimalMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterDecimalOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterDecimalOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterDecimalOption(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 336, RULE_masterOption);
		int _la;
		try {
			State = 4385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4356;
				stringMasterOption();
				State = 4357;
				Match(EQUAL_SYMBOL);
				State = 4358;
				Match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4360;
				decimalMasterOption();
				State = 4361;
				Match(EQUAL_SYMBOL);
				State = 4362;
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4364;
				boolMasterOption();
				State = 4365;
				Match(EQUAL_SYMBOL);
				State = 4366;
				((MasterBoolOptionContext)_localctx).boolVal = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4368;
				Match(MASTER_HEARTBEAT_PERIOD);
				State = 4369;
				Match(EQUAL_SYMBOL);
				State = 4370;
				Match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4371;
				Match(IGNORE_SERVER_IDS);
				State = 4372;
				Match(EQUAL_SYMBOL);
				State = 4373;
				Match(LR_BRACKET);
				State = 4382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
					{
					State = 4374;
					uid();
					State = 4379;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 4375;
						Match(COMMA);
						State = 4376;
						uid();
						}
						}
						State = 4381;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 4384;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND() { return GetToken(MySqlParser.MASTER_BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringMasterOption(this);
		}
	}

	[RuleVersion(0)]
	public StringMasterOptionContext stringMasterOption() {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(Context, State);
		EnterRule(_localctx, 338, RULE_stringMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4387;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (MASTER_HOST - 469)) | (1L << (MASTER_LOG_FILE - 469)) | (1L << (MASTER_PASSWORD - 469)) | (1L << (MASTER_SSL_CA - 469)) | (1L << (MASTER_SSL_CAPATH - 469)) | (1L << (MASTER_SSL_CERT - 469)) | (1L << (MASTER_SSL_CIPHER - 469)) | (1L << (MASTER_SSL_CRL - 469)) | (1L << (MASTER_SSL_CRLPATH - 469)) | (1L << (MASTER_SSL_KEY - 469)) | (1L << (MASTER_TLS_VERSION - 469)) | (1L << (MASTER_USER - 469)))) != 0) || _la==RELAY_LOG_FILE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDecimalMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDecimalMasterOption(this);
		}
	}

	[RuleVersion(0)]
	public DecimalMasterOptionContext decimalMasterOption() {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(Context, State);
		EnterRule(_localctx, 340, RULE_decimalMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4389;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & ((1L << (MASTER_CONNECT_RETRY - 466)) | (1L << (MASTER_DELAY - 466)) | (1L << (MASTER_LOG_POS - 466)) | (1L << (MASTER_PORT - 466)) | (1L << (MASTER_RETRY_COUNT - 466)))) != 0) || _la==RELAY_LOG_POS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBoolMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBoolMasterOption(this);
		}
	}

	[RuleVersion(0)]
	public BoolMasterOptionContext boolMasterOption() {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(Context, State);
		EnterRule(_localctx, 342, RULE_boolMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4391;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannelOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannelOption(this);
		}
	}

	[RuleVersion(0)]
	public ChannelOptionContext channelOption() {
		ChannelOptionContext _localctx = new ChannelOptionContext(Context, State);
		EnterRule(_localctx, 344, RULE_channelOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4393;
			Match(FOR);
			State = 4394;
			Match(CHANNEL);
			State = 4395;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationFilterContext : ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationFilter; } }
	 
		public ReplicationFilterContext() { }
		public virtual void CopyFrom(ReplicationFilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WildIgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWildIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWildIgnoreTableReplication(this);
		}
	}
	public partial class DoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoTableReplication(this);
		}
	}
	public partial class IgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIgnoreTableReplication(this);
		}
	}
	public partial class RewriteDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext[] tablePair() {
			return GetRuleContexts<TablePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext tablePair(int i) {
			return GetRuleContext<TablePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRewriteDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRewriteDbReplication(this);
		}
	}
	public partial class DoDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoDbReplication(this);
		}
	}
	public partial class IgnoreDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIgnoreDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIgnoreDbReplication(this);
		}
	}
	public partial class WildDoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWildDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWildDoTableReplication(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationFilterContext replicationFilter() {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(Context, State);
		EnterRule(_localctx, 346, RULE_replicationFilter);
		int _la;
		try {
			State = 4446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4397;
				Match(REPLICATE_DO_DB);
				State = 4398;
				Match(EQUAL_SYMBOL);
				State = 4399;
				Match(LR_BRACKET);
				State = 4400;
				uidList();
				State = 4401;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4403;
				Match(REPLICATE_IGNORE_DB);
				State = 4404;
				Match(EQUAL_SYMBOL);
				State = 4405;
				Match(LR_BRACKET);
				State = 4406;
				uidList();
				State = 4407;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4409;
				Match(REPLICATE_DO_TABLE);
				State = 4410;
				Match(EQUAL_SYMBOL);
				State = 4411;
				Match(LR_BRACKET);
				State = 4412;
				tables();
				State = 4413;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4415;
				Match(REPLICATE_IGNORE_TABLE);
				State = 4416;
				Match(EQUAL_SYMBOL);
				State = 4417;
				Match(LR_BRACKET);
				State = 4418;
				tables();
				State = 4419;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4421;
				Match(REPLICATE_WILD_DO_TABLE);
				State = 4422;
				Match(EQUAL_SYMBOL);
				State = 4423;
				Match(LR_BRACKET);
				State = 4424;
				simpleStrings();
				State = 4425;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4427;
				Match(REPLICATE_WILD_IGNORE_TABLE);
				State = 4428;
				Match(EQUAL_SYMBOL);
				State = 4429;
				Match(LR_BRACKET);
				State = 4430;
				simpleStrings();
				State = 4431;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 4433;
				Match(REPLICATE_REWRITE_DB);
				State = 4434;
				Match(EQUAL_SYMBOL);
				State = 4435;
				Match(LR_BRACKET);
				State = 4436;
				tablePair();
				State = 4441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4437;
					Match(COMMA);
					State = 4438;
					tablePair();
					}
					}
					State = 4443;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4444;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePairContext : ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablePair(this);
		}
	}

	[RuleVersion(0)]
	public TablePairContext tablePair() {
		TablePairContext _localctx = new TablePairContext(Context, State);
		EnterRule(_localctx, 348, RULE_tablePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4448;
			Match(LR_BRACKET);
			State = 4449;
			_localctx.firstTable = tableName();
			State = 4450;
			Match(COMMA);
			State = 4451;
			_localctx.secondTable = tableName();
			State = 4452;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThreadType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThreadType(this);
		}
	}

	[RuleVersion(0)]
	public ThreadTypeContext threadType() {
		ThreadTypeContext _localctx = new ThreadTypeContext(Context, State);
		EnterRule(_localctx, 350, RULE_threadType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4454;
			_la = TokenStream.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilOptionContext : ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilOption; } }
	 
		public UntilOptionContext() { }
		public virtual void CopyFrom(UntilOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GtidsUntilOptionContext : UntilOptionContext {
		public IToken gtids;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GtuidSetContext gtuidSet() {
			return GetRuleContext<GtuidSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGtidsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGtidsUntilOption(this);
		}
	}
	public partial class SqlGapsUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlGapsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlGapsUntilOption(this);
		}
	}
	public partial class MasterLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterLogUntilOption(this);
		}
	}
	public partial class RelayLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRelayLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRelayLogUntilOption(this);
		}
	}

	[RuleVersion(0)]
	public UntilOptionContext untilOption() {
		UntilOptionContext _localctx = new UntilOptionContext(Context, State);
		EnterRule(_localctx, 352, RULE_untilOption);
		int _la;
		try {
			State = 4474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4456;
				((GtidsUntilOptionContext)_localctx).gtids = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4457;
				Match(EQUAL_SYMBOL);
				State = 4458;
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4459;
				Match(MASTER_LOG_FILE);
				State = 4460;
				Match(EQUAL_SYMBOL);
				State = 4461;
				Match(STRING_LITERAL);
				State = 4462;
				Match(COMMA);
				State = 4463;
				Match(MASTER_LOG_POS);
				State = 4464;
				Match(EQUAL_SYMBOL);
				State = 4465;
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4466;
				Match(RELAY_LOG_FILE);
				State = 4467;
				Match(EQUAL_SYMBOL);
				State = 4468;
				Match(STRING_LITERAL);
				State = 4469;
				Match(COMMA);
				State = 4470;
				Match(RELAY_LOG_POS);
				State = 4471;
				Match(EQUAL_SYMBOL);
				State = 4472;
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4473;
				Match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionOptionContext : ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectionOption; } }
	 
		public ConnectionOptionContext() { }
		public virtual void CopyFrom(ConnectionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PluginDirConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPluginDir;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPluginDirConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPluginDirConnectionOption(this);
		}
	}
	public partial class UserConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptUser;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserConnectionOption(this);
		}
	}
	public partial class DefaultAuthConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptDefAuth;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultAuthConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultAuthConnectionOption(this);
		}
	}
	public partial class PasswordConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPassword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordConnectionOption(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionOptionContext connectionOption() {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(Context, State);
		EnterRule(_localctx, 354, RULE_connectionOption);
		try {
			State = 4488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4476;
				Match(USER);
				State = 4477;
				Match(EQUAL_SYMBOL);
				State = 4478;
				((UserConnectionOptionContext)_localctx).conOptUser = Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4479;
				Match(PASSWORD);
				State = 4480;
				Match(EQUAL_SYMBOL);
				State = 4481;
				((PasswordConnectionOptionContext)_localctx).conOptPassword = Match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4482;
				Match(DEFAULT_AUTH);
				State = 4483;
				Match(EQUAL_SYMBOL);
				State = 4484;
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = Match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4485;
				Match(PLUGIN_DIR);
				State = 4486;
				Match(EQUAL_SYMBOL);
				State = 4487;
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GtuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext[] uuidSet() {
			return GetRuleContexts<UuidSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext uuidSet(int i) {
			return GetRuleContext<UuidSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gtuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGtuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGtuidSet(this);
		}
	}

	[RuleVersion(0)]
	public GtuidSetContext gtuidSet() {
		GtuidSetContext _localctx = new GtuidSetContext(Context, State);
		EnterRule(_localctx, 356, RULE_gtuidSet);
		int _la;
		try {
			State = 4499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4490;
				uuidSet();
				State = 4495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4491;
					Match(COMMA);
					State = 4492;
					uuidSet();
					}
					}
					State = 4497;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4498;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStartTransactionContext : ParserRuleContext {
		public IToken xaStart;
		public IToken xaAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStartTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaStartTransaction(this);
		}
	}

	[RuleVersion(0)]
	public XaStartTransactionContext xaStartTransaction() {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(Context, State);
		EnterRule(_localctx, 358, RULE_xaStartTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4501;
			Match(XA);
			State = 4502;
			_localctx.xaStart = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				_localctx.xaStart = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4503;
			xid();
			State = 4505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				State = 4504;
				_localctx.xaAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					_localctx.xaAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaEndTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaEndTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaEndTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaEndTransaction(this);
		}
	}

	[RuleVersion(0)]
	public XaEndTransactionContext xaEndTransaction() {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(Context, State);
		EnterRule(_localctx, 360, RULE_xaEndTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4507;
			Match(XA);
			State = 4508;
			Match(END);
			State = 4509;
			xid();
			State = 4515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUSPEND) {
				{
				State = 4510;
				Match(SUSPEND);
				State = 4513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4511;
					Match(FOR);
					State = 4512;
					Match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaPrepareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaPrepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaPrepareStatement(this);
		}
	}

	[RuleVersion(0)]
	public XaPrepareStatementContext xaPrepareStatement() {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(Context, State);
		EnterRule(_localctx, 362, RULE_xaPrepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4517;
			Match(XA);
			State = 4518;
			Match(PREPARE);
			State = 4519;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaCommitWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaCommitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaCommitWork(this);
		}
	}

	[RuleVersion(0)]
	public XaCommitWorkContext xaCommitWork() {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(Context, State);
		EnterRule(_localctx, 364, RULE_xaCommitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4521;
			Match(XA);
			State = 4522;
			Match(COMMIT);
			State = 4523;
			xid();
			State = 4526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONE) {
				{
				State = 4524;
				Match(ONE);
				State = 4525;
				Match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRollbackWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaRollbackWork(this);
		}
	}

	[RuleVersion(0)]
	public XaRollbackWorkContext xaRollbackWork() {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(Context, State);
		EnterRule(_localctx, 366, RULE_xaRollbackWork);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4528;
			Match(XA);
			State = 4529;
			Match(ROLLBACK);
			State = 4530;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRecoverWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRecoverWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaRecoverWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaRecoverWork(this);
		}
	}

	[RuleVersion(0)]
	public XaRecoverWorkContext xaRecoverWork() {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(Context, State);
		EnterRule(_localctx, 368, RULE_xaRecoverWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4532;
			Match(XA);
			State = 4533;
			Match(RECOVER);
			State = 4536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERT) {
				{
				State = 4534;
				Match(CONVERT);
				State = 4535;
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepareStatementContext : ParserRuleContext {
		public IToken query;
		public IToken variable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrepareStatement(this);
		}
	}

	[RuleVersion(0)]
	public PrepareStatementContext prepareStatement() {
		PrepareStatementContext _localctx = new PrepareStatementContext(Context, State);
		EnterRule(_localctx, 370, RULE_prepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4538;
			Match(PREPARE);
			State = 4539;
			uid();
			State = 4540;
			Match(FROM);
			State = 4543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				{
				State = 4541;
				_localctx.query = Match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				State = 4542;
				_localctx.variable = Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariablesContext userVariables() {
			return GetRuleContext<UserVariablesContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 372, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4545;
			Match(EXECUTE);
			State = 4546;
			uid();
			State = 4549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 4547;
				Match(USING);
				State = 4548;
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatePrepareContext : ParserRuleContext {
		public IToken dropFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatePrepare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeallocatePrepare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeallocatePrepare(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatePrepareContext deallocatePrepare() {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(Context, State);
		EnterRule(_localctx, 374, RULE_deallocatePrepare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4551;
			_localctx.dropFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				_localctx.dropFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4552;
			Match(PREPARE);
			State = 4553;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineBody(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
		EnterRule(_localctx, 376, RULE_routineBody);
		try {
			State = 4557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,664,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4555;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4556;
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext[] declareVariable() {
			return GetRuleContexts<DeclareVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable(int i) {
			return GetRuleContext<DeclareVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MySqlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext[] declareCondition() {
			return GetRuleContexts<DeclareConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext declareCondition(int i) {
			return GetRuleContext<DeclareConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext[] declareCursor() {
			return GetRuleContexts<DeclareCursorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext declareCursor(int i) {
			return GetRuleContext<DeclareCursorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext[] declareHandler() {
			return GetRuleContexts<DeclareHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext declareHandler(int i) {
			return GetRuleContext<DeclareHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 378, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,665,Context) ) {
			case 1:
				{
				State = 4559;
				uid();
				State = 4560;
				Match(COLON_SYMB);
				}
				break;
			}
			State = 4564;
			Match(BEGIN);
			State = 4603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,671,Context) ) {
			case 1:
				{
				State = 4570;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,666,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4565;
						declareVariable();
						State = 4566;
						Match(SEMI);
						}
						} 
					}
					State = 4572;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,666,Context);
				}
				State = 4578;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,667,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4573;
						declareCondition();
						State = 4574;
						Match(SEMI);
						}
						} 
					}
					State = 4580;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,667,Context);
				}
				State = 4586;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,668,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4581;
						declareCursor();
						State = 4582;
						Match(SEMI);
						}
						} 
					}
					State = 4588;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,668,Context);
				}
				State = 4594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DECLARE) {
					{
					{
					State = 4589;
					declareHandler();
					State = 4590;
					Match(SEMI);
					}
					}
					State = 4596;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4600;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,670,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4597;
						procedureSqlStatement();
						}
						} 
					}
					State = 4602;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,670,Context);
				}
				}
				break;
			}
			State = 4605;
			Match(END);
			State = 4607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,672,Context) ) {
			case 1:
				{
				State = 4606;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(MySqlParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(MySqlParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext[] caseAlternative() {
			return GetRuleContexts<CaseAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext caseAlternative(int i) {
			return GetRuleContext<CaseAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 380, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4609;
			Match(CASE);
			State = 4612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				{
				State = 4610;
				uid();
				}
				break;
			case 2:
				{
				State = 4611;
				expression(0);
				}
				break;
			}
			State = 4615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4614;
				caseAlternative();
				}
				}
				State = 4617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4619;
				Match(ELSE);
				State = 4621;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4620;
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4623;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,675,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4627;
			Match(END);
			State = 4628;
			Match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ProcedureSqlStatementContext _procedureSqlStatement;
		public IList<ProcedureSqlStatementContext> _thenStatements = new List<ProcedureSqlStatementContext>();
		public IList<ProcedureSqlStatementContext> _elseStatements = new List<ProcedureSqlStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MySqlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MySqlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext[] elifAlternative() {
			return GetRuleContexts<ElifAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext elifAlternative(int i) {
			return GetRuleContext<ElifAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 382, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4630;
			Match(IF);
			State = 4631;
			expression(0);
			State = 4632;
			Match(THEN);
			State = 4634;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4633;
					_localctx._procedureSqlStatement = procedureSqlStatement();
					_localctx._thenStatements.Add(_localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,677,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 4638;
				elifAlternative();
				}
				}
				State = 4643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4644;
				Match(ELSE);
				State = 4646;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4645;
						_localctx._procedureSqlStatement = procedureSqlStatement();
						_localctx._elseStatements.Add(_localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4648;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,679,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4652;
			Match(END);
			State = 4653;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE() { return GetToken(MySqlParser.ITERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 384, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4655;
			Match(ITERATE);
			State = 4656;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(MySqlParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 386, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4658;
			Match(LEAVE);
			State = 4659;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(MySqlParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(MySqlParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 388, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 4661;
				uid();
				State = 4662;
				Match(COLON_SYMB);
				}
			}

			State = 4666;
			Match(LOOP);
			State = 4668;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4667;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4670;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,682,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4672;
			Match(END);
			State = 4673;
			Match(LOOP);
			State = 4675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 4674;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT() { return GetTokens(MySqlParser.REPEAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT(int i) {
			return GetToken(MySqlParser.REPEAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 390, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 4677;
				uid();
				State = 4678;
				Match(COLON_SYMB);
				}
			}

			State = 4682;
			Match(REPEAT);
			State = 4684;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4683;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4686;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,685,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4688;
			Match(UNTIL);
			State = 4689;
			expression(0);
			State = 4690;
			Match(END);
			State = 4691;
			Match(REPEAT);
			State = 4693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 4692;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MySqlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 392, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4695;
			Match(RETURN);
			State = 4696;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(MySqlParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(MySqlParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 394, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 4698;
				uid();
				State = 4699;
				Match(COLON_SYMB);
				}
			}

			State = 4703;
			Match(WHILE);
			State = 4704;
			expression(0);
			State = 4705;
			Match(DO);
			State = 4707;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4706;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4709;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,688,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4711;
			Match(END);
			State = 4712;
			Match(WHILE);
			State = 4714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IGNORED - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)))) != 0) || ((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & ((1L << (RIGHT - 144)) | (1L << (SCHEMA - 144)) | (1L << (SKIP_ - 144)) | (1L << (STACKED - 144)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (POSITION - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)) | (1L << (VERSION_TOKEN_ADMIN - 660)) | (1L << (XA_RECOVER_ADMIN - 660)) | (1L << (ARMSCII8 - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)) | (1L << (MULTIPOINT - 724)) | (1L << (MULTIPOLYGON - 724)) | (1L << (POINT - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)) | (1L << (ENCODE - 788)) | (1L << (ENCRYPT - 788)) | (1L << (ENDPOINT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)) | (1L << (LOG - 852)) | (1L << (LOG10 - 852)) | (1L << (LOG2 - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)) | (1L << (SESSION_USER - 916)) | (1L << (SHA - 916)) | (1L << (SHA1 - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)) | (1L << (ST_POLYGONFROMWKB - 980)) | (1L << (ST_SRID - 980)) | (1L << (ST_STARTPOINT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (MOD - 1110)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1110)) | (1L << (STRING_LITERAL - 1110)) | (1L << (ID - 1110)) | (1L << (REVERSE_QUOTE_ID - 1110)))) != 0)) {
				{
				State = 4713;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
	 
		public CursorStatementContext() { }
		public virtual void CopyFrom(CursorStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CloseCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CloseCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCloseCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCloseCursor(this);
		}
	}
	public partial class OpenCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public OpenCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOpenCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOpenCursor(this);
		}
	}
	public partial class FetchCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(MySqlParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFetchCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFetchCursor(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(Context, State);
		EnterRule(_localctx, 396, RULE_cursorStatement);
		int _la;
		try {
			State = 4731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4716;
				Match(CLOSE);
				State = 4717;
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4718;
				Match(FETCH);
				State = 4723;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,691,Context) ) {
				case 1:
					{
					State = 4720;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEXT) {
						{
						State = 4719;
						Match(NEXT);
						}
					}

					State = 4722;
					Match(FROM);
					}
					break;
				}
				State = 4725;
				uid();
				State = 4726;
				Match(INTO);
				State = 4727;
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4729;
				Match(OPEN);
				State = 4730;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareVariable(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 398, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4733;
			Match(DECLARE);
			State = 4734;
			uidList();
			State = 4735;
			dataType();
			State = 4738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 4736;
				Match(DEFAULT);
				State = 4737;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareCondition(this);
		}
	}

	[RuleVersion(0)]
	public DeclareConditionContext declareCondition() {
		DeclareConditionContext _localctx = new DeclareConditionContext(Context, State);
		EnterRule(_localctx, 400, RULE_declareCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4740;
			Match(DECLARE);
			State = 4741;
			uid();
			State = 4742;
			Match(CONDITION);
			State = 4743;
			Match(FOR);
			State = 4750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				State = 4744;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				State = 4745;
				Match(SQLSTATE);
				State = 4747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4746;
					Match(VALUE);
					}
				}

				State = 4749;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareCursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(MySqlParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareCursor(this);
		}
	}

	[RuleVersion(0)]
	public DeclareCursorContext declareCursor() {
		DeclareCursorContext _localctx = new DeclareCursorContext(Context, State);
		EnterRule(_localctx, 402, RULE_declareCursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4752;
			Match(DECLARE);
			State = 4753;
			uid();
			State = 4754;
			Match(CURSOR);
			State = 4755;
			Match(FOR);
			State = 4756;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareHandlerContext : ParserRuleContext {
		public IToken handlerAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext[] handlerConditionValue() {
			return GetRuleContexts<HandlerConditionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext handlerConditionValue(int i) {
			return GetRuleContext<HandlerConditionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MySqlParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(MySqlParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO() { return GetToken(MySqlParser.UNDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeclareHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeclareHandler(this);
		}
	}

	[RuleVersion(0)]
	public DeclareHandlerContext declareHandler() {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(Context, State);
		EnterRule(_localctx, 404, RULE_declareHandler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4758;
			Match(DECLARE);
			State = 4759;
			_localctx.handlerAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				_localctx.handlerAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4760;
			Match(HANDLER);
			State = 4761;
			Match(FOR);
			State = 4762;
			handlerConditionValue();
			State = 4767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4763;
				Match(COMMA);
				State = 4764;
				handlerConditionValue();
				}
				}
				State = 4769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4770;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionValueContext : ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerConditionValue; } }
	 
		public HandlerConditionValueContext() { }
		public virtual void CopyFrom(HandlerConditionValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HandlerConditionWarningContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING() { return GetToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionWarning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionWarning(this);
		}
	}
	public partial class HandlerConditionCodeContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionCode(this);
		}
	}
	public partial class HandlerConditionNotfoundContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionNotfound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionNotfound(this);
		}
	}
	public partial class HandlerConditionStateContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionState(this);
		}
	}
	public partial class HandlerConditionExceptionContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION() { return GetToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionException(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionException(this);
		}
	}
	public partial class HandlerConditionNameContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionName(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionValueContext handlerConditionValue() {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(Context, State);
		EnterRule(_localctx, 406, RULE_handlerConditionValue);
		int _la;
		try {
			State = 4783;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4772;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4773;
				Match(SQLSTATE);
				State = 4775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 4774;
					Match(VALUE);
					}
				}

				State = 4777;
				Match(STRING_LITERAL);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4778;
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4779;
				Match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4780;
				Match(NOT);
				State = 4781;
				Match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4782;
				Match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureSqlStatement(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSqlStatementContext procedureSqlStatement() {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(Context, State);
		EnterRule(_localctx, 408, RULE_procedureSqlStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,699,Context) ) {
			case 1:
				{
				State = 4785;
				compoundStatement();
				}
				break;
			case 2:
				{
				State = 4786;
				sqlStatement();
				}
				break;
			}
			State = 4789;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseAlternative(this);
		}
	}

	[RuleVersion(0)]
	public CaseAlternativeContext caseAlternative() {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(Context, State);
		EnterRule(_localctx, 410, RULE_caseAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4791;
			Match(WHEN);
			State = 4794;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
			case 1:
				{
				State = 4792;
				constant();
				}
				break;
			case 2:
				{
				State = 4793;
				expression(0);
				}
				break;
			}
			State = 4796;
			Match(THEN);
			State = 4798;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4797;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4800;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,701,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(MySqlParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterElifAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitElifAlternative(this);
		}
	}

	[RuleVersion(0)]
	public ElifAlternativeContext elifAlternative() {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(Context, State);
		EnterRule(_localctx, 412, RULE_elifAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4802;
			Match(ELSEIF);
			State = 4803;
			expression(0);
			State = 4804;
			Match(THEN);
			State = 4806;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4805;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4808;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,702,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
	 
		public AlterUserContext() { }
		public virtual void CopyFrom(AlterUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUserMysqlV56Context : AlterUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext[] userSpecification() {
			return GetRuleContexts<UserSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext userSpecification(int i) {
			return GetRuleContext<UserSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV56(this);
		}
	}
	public partial class AlterUserMysqlV57Context : AlterUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV57(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV57(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 414, RULE_alterUser);
		int _la;
		try {
			State = 4864;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,714,Context) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4810;
				Match(ALTER);
				State = 4811;
				Match(USER);
				State = 4812;
				userSpecification();
				State = 4817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4813;
					Match(COMMA);
					State = 4814;
					userSpecification();
					}
					}
					State = 4819;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4820;
				Match(ALTER);
				State = 4821;
				Match(USER);
				State = 4823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4822;
					ifExists();
					}
				}

				State = 4825;
				userAuthOption();
				State = 4830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4826;
					Match(COMMA);
					State = 4827;
					userAuthOption();
					}
					}
					State = 4832;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4847;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4833;
					Match(REQUIRE);
					State = 4845;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4834;
						((AlterUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4835;
						tlsOption();
						State = 4842;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4837;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4836;
								Match(AND);
								}
							}

							State = 4839;
							tlsOption();
							}
							}
							State = 4844;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4849;
					Match(WITH);
					State = 4851;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4850;
						userResourceOption();
						}
						}
						State = 4853;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 485)) | (1L << (MAX_QUERIES_PER_HOUR - 485)) | (1L << (MAX_UPDATES_PER_HOUR - 485)) | (1L << (MAX_USER_CONNECTIONS - 485)))) != 0) );
					}
				}

				State = 4861;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4859;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4857;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4858;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4863;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
	 
		public CreateUserContext() { }
		public virtual void CopyFrom(CreateUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateUserMysqlV57Context : CreateUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV57(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV57(this);
		}
	}
	public partial class CreateUserMysqlV56Context : CreateUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV56(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 416, RULE_createUser);
		int _la;
		try {
			State = 4920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4866;
				Match(CREATE);
				State = 4867;
				Match(USER);
				State = 4868;
				userAuthOption();
				State = 4873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4869;
					Match(COMMA);
					State = 4870;
					userAuthOption();
					}
					}
					State = 4875;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4876;
				Match(CREATE);
				State = 4877;
				Match(USER);
				State = 4879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 4878;
					ifNotExists();
					}
				}

				State = 4881;
				userAuthOption();
				State = 4886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4882;
					Match(COMMA);
					State = 4883;
					userAuthOption();
					}
					}
					State = 4888;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4889;
					Match(REQUIRE);
					State = 4901;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4890;
						((CreateUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4891;
						tlsOption();
						State = 4898;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4893;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4892;
								Match(AND);
								}
							}

							State = 4895;
							tlsOption();
							}
							}
							State = 4900;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4905;
					Match(WITH);
					State = 4907;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4906;
						userResourceOption();
						}
						}
						State = 4909;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 485)) | (1L << (MAX_QUERIES_PER_HOUR - 485)) | (1L << (MAX_UPDATES_PER_HOUR - 485)) | (1L << (MAX_USER_CONNECTIONS - 485)))) != 0) );
					}
				}

				State = 4917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					State = 4915;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PASSWORD:
						{
						State = 4913;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 4914;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4919;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropUser(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 418, RULE_dropUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4922;
			Match(DROP);
			State = 4923;
			Match(USER);
			State = 4925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 4924;
				ifExists();
				}
			}

			State = 4927;
			userName();
			State = 4932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4928;
				Match(COMMA);
				State = 4929;
				userName();
				}
				}
				State = 4934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		public IToken privilegeObject;
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MySqlParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTION() { return GetTokens(MySqlParser.OPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION(int i) {
			return GetToken(MySqlParser.OPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MySqlParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantStatement(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 420, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			State = 5028;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,747,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4935;
				Match(GRANT);
				State = 4936;
				privelegeClause();
				State = 4941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4937;
					Match(COMMA);
					State = 4938;
					privelegeClause();
					}
					}
					State = 4943;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4944;
				Match(ON);
				State = 4946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,730,Context) ) {
				case 1:
					{
					State = 4945;
					_localctx.privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						_localctx.privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 4948;
				privilegeLevel();
				State = 4949;
				Match(TO);
				State = 4950;
				userAuthOption();
				State = 4955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4951;
					Match(COMMA);
					State = 4952;
					userAuthOption();
					}
					}
					State = 4957;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 4958;
					Match(REQUIRE);
					State = 4970;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 4959;
						_localctx.tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 4960;
						tlsOption();
						State = 4967;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 4962;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 4961;
								Match(AND);
								}
							}

							State = 4964;
							tlsOption();
							}
							}
							State = 4969;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 4983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4974;
					Match(WITH);
					State = 4980;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,737,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 4978;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case GRANT:
								{
								State = 4975;
								Match(GRANT);
								State = 4976;
								Match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								State = 4977;
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						State = 4982;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,737,Context);
					}
					}
				}

				State = 4991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4985;
					Match(AS);
					State = 4986;
					userName();
					State = 4987;
					Match(WITH);
					State = 4988;
					Match(ROLE);
					State = 4989;
					roleOption();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4993;
				Match(GRANT);
				State = 4996;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
				case 1:
					{
					State = 4994;
					userName();
					}
					break;
				case 2:
					{
					State = 4995;
					uid();
					}
					break;
				}
				State = 5005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4998;
					Match(COMMA);
					State = 5001;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
					case 1:
						{
						State = 4999;
						userName();
						}
						break;
					case 2:
						{
						State = 5000;
						uid();
						}
						break;
					}
					}
					}
					State = 5007;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5008;
				Match(TO);
				State = 5011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
				case 1:
					{
					State = 5009;
					userName();
					}
					break;
				case 2:
					{
					State = 5010;
					uid();
					}
					break;
				}
				State = 5020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5013;
					Match(COMMA);
					State = 5016;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
					case 1:
						{
						State = 5014;
						userName();
						}
						break;
					case 2:
						{
						State = 5015;
						uid();
						}
						break;
					}
					}
					}
					State = 5022;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5023;
					Match(WITH);
					State = 5024;
					Match(ADMIN);
					State = 5025;
					Match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOption(this);
		}
	}

	[RuleVersion(0)]
	public RoleOptionContext roleOption() {
		RoleOptionContext _localctx = new RoleOptionContext(Context, State);
		EnterRule(_localctx, 422, RULE_roleOption);
		int _la;
		try {
			State = 5052;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,751,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5030;
				Match(DEFAULT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5031;
				Match(NONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5032;
				Match(ALL);
				State = 5042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT) {
					{
					State = 5033;
					Match(EXCEPT);
					State = 5034;
					userName();
					State = 5039;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 5035;
						Match(COMMA);
						State = 5036;
						userName();
						}
						}
						State = 5041;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5044;
				userName();
				State = 5049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5045;
					Match(COMMA);
					State = 5046;
					userName();
					}
					}
					State = 5051;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantProxyContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _toOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MySqlParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantProxy(this);
		}
	}

	[RuleVersion(0)]
	public GrantProxyContext grantProxy() {
		GrantProxyContext _localctx = new GrantProxyContext(Context, State);
		EnterRule(_localctx, 424, RULE_grantProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5054;
			Match(GRANT);
			State = 5055;
			Match(PROXY);
			State = 5056;
			Match(ON);
			State = 5057;
			_localctx.fromFirst = userName();
			State = 5058;
			Match(TO);
			State = 5059;
			_localctx.toFirst = userName();
			State = 5064;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5060;
				Match(COMMA);
				State = 5061;
				_localctx._userName = userName();
				_localctx._toOther.Add(_localctx._userName);
				}
				}
				State = 5066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5067;
				Match(WITH);
				State = 5068;
				Match(GRANT);
				State = 5069;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext[] renameUserClause() {
			return GetRuleContexts<RenameUserClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext renameUserClause(int i) {
			return GetRuleContext<RenameUserClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUser(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 426, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5072;
			Match(RENAME);
			State = 5073;
			Match(USER);
			State = 5074;
			renameUserClause();
			State = 5079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5075;
				Match(COMMA);
				State = 5076;
				renameUserClause();
				}
				}
				State = 5081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
	 
		public RevokeStatementContext() { }
		public virtual void CopyFrom(RevokeStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DetailRevokeContext : RevokeStatementContext {
		public IToken privilegeObject;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDetailRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDetailRevoke(this);
		}
	}
	public partial class RoleRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleRevoke(this);
		}
	}
	public partial class ShortRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShortRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShortRevoke(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 428, RULE_revokeStatement);
		int _la;
		try {
			State = 5146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,764,Context) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5082;
				Match(REVOKE);
				State = 5083;
				privelegeClause();
				State = 5088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5084;
					Match(COMMA);
					State = 5085;
					privelegeClause();
					}
					}
					State = 5090;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5091;
				Match(ON);
				State = 5093;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
				case 1:
					{
					State = 5092;
					((DetailRevokeContext)_localctx).privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5095;
				privilegeLevel();
				State = 5096;
				Match(FROM);
				State = 5097;
				userName();
				State = 5102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5098;
					Match(COMMA);
					State = 5099;
					userName();
					}
					}
					State = 5104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5105;
				Match(REVOKE);
				State = 5106;
				Match(ALL);
				State = 5108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 5107;
					Match(PRIVILEGES);
					}
				}

				State = 5110;
				Match(COMMA);
				State = 5111;
				Match(GRANT);
				State = 5112;
				Match(OPTION);
				State = 5113;
				Match(FROM);
				State = 5114;
				userName();
				State = 5119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5115;
					Match(COMMA);
					State = 5116;
					userName();
					}
					}
					State = 5121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5122;
				Match(REVOKE);
				State = 5123;
				uid();
				State = 5128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5124;
					Match(COMMA);
					State = 5125;
					uid();
					}
					}
					State = 5130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5131;
				Match(FROM);
				State = 5134;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,761,Context) ) {
				case 1:
					{
					State = 5132;
					userName();
					}
					break;
				case 2:
					{
					State = 5133;
					uid();
					}
					break;
				}
				State = 5143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5136;
					Match(COMMA);
					State = 5139;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
					case 1:
						{
						State = 5137;
						userName();
						}
						break;
					case 2:
						{
						State = 5138;
						uid();
						}
						break;
					}
					}
					}
					State = 5145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeProxyContext : ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _fromOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRevokeProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRevokeProxy(this);
		}
	}

	[RuleVersion(0)]
	public RevokeProxyContext revokeProxy() {
		RevokeProxyContext _localctx = new RevokeProxyContext(Context, State);
		EnterRule(_localctx, 430, RULE_revokeProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5148;
			Match(REVOKE);
			State = 5149;
			Match(PROXY);
			State = 5150;
			Match(ON);
			State = 5151;
			_localctx.onUser = userName();
			State = 5152;
			Match(FROM);
			State = 5153;
			_localctx.fromFirst = userName();
			State = 5158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5154;
				Match(COMMA);
				State = 5155;
				_localctx._userName = userName();
				_localctx._fromOther.Add(_localctx._userName);
				}
				}
				State = 5160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPasswordStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetPasswordStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetPasswordStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetPasswordStatementContext setPasswordStatement() {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(Context, State);
		EnterRule(_localctx, 432, RULE_setPasswordStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5161;
			Match(SET);
			State = 5162;
			Match(PASSWORD);
			State = 5165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5163;
				Match(FOR);
				State = 5164;
				userName();
				}
			}

			State = 5167;
			Match(EQUAL_SYMBOL);
			State = 5170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				State = 5168;
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				State = 5169;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption() {
			return GetRuleContext<UserPasswordOptionContext>(0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserSpecification(this);
		}
	}

	[RuleVersion(0)]
	public UserSpecificationContext userSpecification() {
		UserSpecificationContext _localctx = new UserSpecificationContext(Context, State);
		EnterRule(_localctx, 434, RULE_userSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5172;
			userName();
			State = 5173;
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAuthOptionContext : ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAuthOption; } }
	 
		public UserAuthOptionContext() { }
		public virtual void CopyFrom(UserAuthOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleAuthOption(this);
		}
	}
	public partial class PasswordAuthOptionContext : UserAuthOptionContext {
		public IToken hashed;
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordAuthOption(this);
		}
	}
	public partial class StringAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(MySqlParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringAuthOption(this);
		}
	}
	public partial class HashAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHashAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHashAuthOption(this);
		}
	}

	[RuleVersion(0)]
	public UserAuthOptionContext userAuthOption() {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(Context, State);
		EnterRule(_localctx, 436, RULE_userAuthOption);
		int _la;
		try {
			State = 5203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,771,Context) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5175;
				userName();
				State = 5176;
				Match(IDENTIFIED);
				State = 5177;
				Match(BY);
				State = 5178;
				Match(PASSWORD);
				State = 5179;
				((PasswordAuthOptionContext)_localctx).hashed = Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5181;
				userName();
				State = 5182;
				Match(IDENTIFIED);
				State = 5185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5183;
					Match(WITH);
					State = 5184;
					authPlugin();
					}
				}

				State = 5187;
				Match(BY);
				State = 5188;
				Match(STRING_LITERAL);
				State = 5192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN) {
					{
					State = 5189;
					Match(RETAIN);
					State = 5190;
					Match(CURRENT);
					State = 5191;
					Match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5194;
				userName();
				State = 5195;
				Match(IDENTIFIED);
				State = 5196;
				Match(WITH);
				State = 5197;
				authPlugin();
				State = 5200;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,770,Context) ) {
				case 1:
					{
					State = 5198;
					Match(AS);
					State = 5199;
					Match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5202;
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TlsOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL() { return GetToken(MySqlParser.SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tlsOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTlsOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTlsOption(this);
		}
	}

	[RuleVersion(0)]
	public TlsOptionContext tlsOption() {
		TlsOptionContext _localctx = new TlsOptionContext(Context, State);
		EnterRule(_localctx, 438, RULE_tlsOption);
		try {
			State = 5213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5205;
				Match(SSL);
				}
				break;
			case X509:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5206;
				Match(X509);
				}
				break;
			case CIPHER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5207;
				Match(CIPHER);
				State = 5208;
				Match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5209;
				Match(ISSUER);
				State = 5210;
				Match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5211;
				Match(SUBJECT);
				State = 5212;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserResourceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userResourceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserResourceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserResourceOption(this);
		}
	}

	[RuleVersion(0)]
	public UserResourceOptionContext userResourceOption() {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(Context, State);
		EnterRule(_localctx, 440, RULE_userResourceOption);
		try {
			State = 5223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5215;
				Match(MAX_QUERIES_PER_HOUR);
				State = 5216;
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5217;
				Match(MAX_UPDATES_PER_HOUR);
				State = 5218;
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5219;
				Match(MAX_CONNECTIONS_PER_HOUR);
				State = 5220;
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5221;
				Match(MAX_USER_CONNECTIONS);
				State = 5222;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserPasswordOptionContext : ParserRuleContext {
		public IToken expireType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userPasswordOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserPasswordOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserPasswordOption(this);
		}
	}

	[RuleVersion(0)]
	public UserPasswordOptionContext userPasswordOption() {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(Context, State);
		EnterRule(_localctx, 442, RULE_userPasswordOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5225;
			Match(PASSWORD);
			State = 5226;
			Match(EXPIRE);
			State = 5233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 5227;
				_localctx.expireType = Match(DEFAULT);
				}
				break;
			case NEVER:
				{
				State = 5228;
				_localctx.expireType = Match(NEVER);
				}
				break;
			case INTERVAL:
				{
				State = 5229;
				_localctx.expireType = Match(INTERVAL);
				State = 5230;
				decimalLiteral();
				State = 5231;
				Match(DAY);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserLockOptionContext : ParserRuleContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserLockOption(this);
		}
	}

	[RuleVersion(0)]
	public UserLockOptionContext userLockOption() {
		UserLockOptionContext _localctx = new UserLockOptionContext(Context, State);
		EnterRule(_localctx, 444, RULE_userLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5235;
			Match(ACCOUNT);
			State = 5236;
			_localctx.lockType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				_localctx.lockType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivelegeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege() {
			return GetRuleContext<PrivilegeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privelegeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivelegeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivelegeClause(this);
		}
	}

	[RuleVersion(0)]
	public PrivelegeClauseContext privelegeClause() {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(Context, State);
		EnterRule(_localctx, 446, RULE_privelegeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5238;
			privilege();
			State = 5243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 5239;
				Match(LR_BRACKET);
				State = 5240;
				uidList();
				State = 5241;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(MySqlParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE() { return GetToken(MySqlParser.USAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_PASSWORD_ADMIN() { return GetToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_OPTIMIZER_COSTS() { return GetToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_STATUS() { return GetToken(MySqlParser.FLUSH_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_TABLES() { return GetToken(MySqlParser.FLUSH_TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_USER_RESOURCES() { return GetToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ENABLE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORDLESS_USER_ADMIN() { return GetToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_CONNECTION_ADMIN() { return GetToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_MONITOR() { return GetToken(MySqlParser.BINLOG_MONITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_REPLAY() { return GetToken(MySqlParser.BINLOG_REPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED_ADMIN() { return GetToken(MySqlParser.FEDERATED_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_ADMIN() { return GetToken(MySqlParser.READ_ONLY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_MASTER_ADMIN() { return GetToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 448, RULE_privilege);
		int _la;
		try {
			State = 5330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5245;
				Match(ALL);
				State = 5247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 5246;
					Match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5249;
				Match(ALTER);
				State = 5251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE) {
					{
					State = 5250;
					Match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5253;
				Match(CREATE);
				State = 5261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY:
					{
					State = 5254;
					Match(TEMPORARY);
					State = 5255;
					Match(TABLES);
					}
					break;
				case ROUTINE:
					{
					State = 5256;
					Match(ROUTINE);
					}
					break;
				case VIEW:
					{
					State = 5257;
					Match(VIEW);
					}
					break;
				case USER:
					{
					State = 5258;
					Match(USER);
					}
					break;
				case TABLESPACE:
					{
					State = 5259;
					Match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					State = 5260;
					Match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5263;
				Match(DELETE);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5264;
				Match(DROP);
				State = 5266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROLE) {
					{
					State = 5265;
					Match(ROLE);
					}
				}

				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5268;
				Match(EVENT);
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5269;
				Match(EXECUTE);
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5270;
				Match(FILE);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5271;
				Match(GRANT);
				State = 5272;
				Match(OPTION);
				}
				break;
			case INDEX:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5273;
				Match(INDEX);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5274;
				Match(INSERT);
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5275;
				Match(LOCK);
				State = 5276;
				Match(TABLES);
				}
				break;
			case PROCESS:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5277;
				Match(PROCESS);
				}
				break;
			case PROXY:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5278;
				Match(PROXY);
				}
				break;
			case REFERENCES:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5279;
				Match(REFERENCES);
				}
				break;
			case RELOAD:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5280;
				Match(RELOAD);
				}
				break;
			case REPLICATION:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5281;
				Match(REPLICATION);
				State = 5282;
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE || _la==REPLICA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5283;
				Match(SELECT);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5284;
				Match(SHOW);
				State = 5285;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5286;
				Match(SHUTDOWN);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5287;
				Match(SUPER);
				}
				break;
			case TRIGGER:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5288;
				Match(TRIGGER);
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5289;
				Match(UPDATE);
				}
				break;
			case USAGE:
				EnterOuterAlt(_localctx, 24);
				{
				State = 5290;
				Match(USAGE);
				}
				break;
			case APPLICATION_PASSWORD_ADMIN:
				EnterOuterAlt(_localctx, 25);
				{
				State = 5291;
				Match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case AUDIT_ADMIN:
				EnterOuterAlt(_localctx, 26);
				{
				State = 5292;
				Match(AUDIT_ADMIN);
				}
				break;
			case BACKUP_ADMIN:
				EnterOuterAlt(_localctx, 27);
				{
				State = 5293;
				Match(BACKUP_ADMIN);
				}
				break;
			case BINLOG_ADMIN:
				EnterOuterAlt(_localctx, 28);
				{
				State = 5294;
				Match(BINLOG_ADMIN);
				}
				break;
			case BINLOG_ENCRYPTION_ADMIN:
				EnterOuterAlt(_localctx, 29);
				{
				State = 5295;
				Match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case CLONE_ADMIN:
				EnterOuterAlt(_localctx, 30);
				{
				State = 5296;
				Match(CLONE_ADMIN);
				}
				break;
			case CONNECTION_ADMIN:
				EnterOuterAlt(_localctx, 31);
				{
				State = 5297;
				Match(CONNECTION_ADMIN);
				}
				break;
			case ENCRYPTION_KEY_ADMIN:
				EnterOuterAlt(_localctx, 32);
				{
				State = 5298;
				Match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case FIREWALL_ADMIN:
				EnterOuterAlt(_localctx, 33);
				{
				State = 5299;
				Match(FIREWALL_ADMIN);
				}
				break;
			case FIREWALL_USER:
				EnterOuterAlt(_localctx, 34);
				{
				State = 5300;
				Match(FIREWALL_USER);
				}
				break;
			case FLUSH_OPTIMIZER_COSTS:
				EnterOuterAlt(_localctx, 35);
				{
				State = 5301;
				Match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case FLUSH_STATUS:
				EnterOuterAlt(_localctx, 36);
				{
				State = 5302;
				Match(FLUSH_STATUS);
				}
				break;
			case FLUSH_TABLES:
				EnterOuterAlt(_localctx, 37);
				{
				State = 5303;
				Match(FLUSH_TABLES);
				}
				break;
			case FLUSH_USER_RESOURCES:
				EnterOuterAlt(_localctx, 38);
				{
				State = 5304;
				Match(FLUSH_USER_RESOURCES);
				}
				break;
			case GROUP_REPLICATION_ADMIN:
				EnterOuterAlt(_localctx, 39);
				{
				State = 5305;
				Match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case INNODB_REDO_LOG_ARCHIVE:
				EnterOuterAlt(_localctx, 40);
				{
				State = 5306;
				Match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case INNODB_REDO_LOG_ENABLE:
				EnterOuterAlt(_localctx, 41);
				{
				State = 5307;
				Match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case NDB_STORED_USER:
				EnterOuterAlt(_localctx, 42);
				{
				State = 5308;
				Match(NDB_STORED_USER);
				}
				break;
			case PASSWORDLESS_USER_ADMIN:
				EnterOuterAlt(_localctx, 43);
				{
				State = 5309;
				Match(PASSWORDLESS_USER_ADMIN);
				}
				break;
			case PERSIST_RO_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 44);
				{
				State = 5310;
				Match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case REPLICATION_APPLIER:
				EnterOuterAlt(_localctx, 45);
				{
				State = 5311;
				Match(REPLICATION_APPLIER);
				}
				break;
			case REPLICATION_SLAVE_ADMIN:
				EnterOuterAlt(_localctx, 46);
				{
				State = 5312;
				Match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case RESOURCE_GROUP_ADMIN:
				EnterOuterAlt(_localctx, 47);
				{
				State = 5313;
				Match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case RESOURCE_GROUP_USER:
				EnterOuterAlt(_localctx, 48);
				{
				State = 5314;
				Match(RESOURCE_GROUP_USER);
				}
				break;
			case ROLE_ADMIN:
				EnterOuterAlt(_localctx, 49);
				{
				State = 5315;
				Match(ROLE_ADMIN);
				}
				break;
			case SERVICE_CONNECTION_ADMIN:
				EnterOuterAlt(_localctx, 50);
				{
				State = 5316;
				Match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 51);
				{
				State = 5317;
				Match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case SET_USER_ID:
				EnterOuterAlt(_localctx, 52);
				{
				State = 5318;
				Match(SET_USER_ID);
				}
				break;
			case SHOW_ROUTINE:
				EnterOuterAlt(_localctx, 53);
				{
				State = 5319;
				Match(SHOW_ROUTINE);
				}
				break;
			case SYSTEM_USER:
				EnterOuterAlt(_localctx, 54);
				{
				State = 5320;
				Match(SYSTEM_USER);
				}
				break;
			case SYSTEM_VARIABLES_ADMIN:
				EnterOuterAlt(_localctx, 55);
				{
				State = 5321;
				Match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case TABLE_ENCRYPTION_ADMIN:
				EnterOuterAlt(_localctx, 56);
				{
				State = 5322;
				Match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case VERSION_TOKEN_ADMIN:
				EnterOuterAlt(_localctx, 57);
				{
				State = 5323;
				Match(VERSION_TOKEN_ADMIN);
				}
				break;
			case XA_RECOVER_ADMIN:
				EnterOuterAlt(_localctx, 58);
				{
				State = 5324;
				Match(XA_RECOVER_ADMIN);
				}
				break;
			case BINLOG_MONITOR:
				EnterOuterAlt(_localctx, 59);
				{
				State = 5325;
				Match(BINLOG_MONITOR);
				}
				break;
			case BINLOG_REPLAY:
				EnterOuterAlt(_localctx, 60);
				{
				State = 5326;
				Match(BINLOG_REPLAY);
				}
				break;
			case FEDERATED_ADMIN:
				EnterOuterAlt(_localctx, 61);
				{
				State = 5327;
				Match(FEDERATED_ADMIN);
				}
				break;
			case READ_ONLY_ADMIN:
				EnterOuterAlt(_localctx, 62);
				{
				State = 5328;
				Match(READ_ONLY_ADMIN);
				}
				break;
			case REPLICATION_MASTER_ADMIN:
				EnterOuterAlt(_localctx, 63);
				{
				State = 5329;
				Match(REPLICATION_MASTER_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeLevelContext : ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeLevel; } }
	 
		public PrivilegeLevelContext() { }
		public virtual void CopyFrom(PrivilegeLevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefiniteSchemaPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteSchemaPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteSchemaPrivLevel(this);
		}
	}
	public partial class DefiniteFullTablePrivLevel2Context : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId() {
			return GetRuleContext<DottedIdContext>(0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel2(this);
		}
	}
	public partial class DefiniteFullTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel(this);
		}
	}
	public partial class GlobalPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MySqlParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGlobalPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGlobalPrivLevel(this);
		}
	}
	public partial class DefiniteTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefiniteTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefiniteTablePrivLevel(this);
		}
	}
	public partial class CurrentSchemaPriviLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCurrentSchemaPriviLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCurrentSchemaPriviLevel(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeLevelContext privilegeLevel() {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(Context, State);
		EnterRule(_localctx, 450, RULE_privilegeLevel);
		try {
			State = 5348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5332;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5333;
				Match(STAR);
				State = 5334;
				Match(DOT);
				State = 5335;
				Match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5336;
				uid();
				State = 5337;
				Match(DOT);
				State = 5338;
				Match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5340;
				uid();
				State = 5341;
				Match(DOT);
				State = 5342;
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5344;
				uid();
				State = 5345;
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5347;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserClauseContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUserClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUserClause(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserClauseContext renameUserClause() {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(Context, State);
		EnterRule(_localctx, 452, RULE_renameUserClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5350;
			_localctx.fromFirst = userName();
			State = 5351;
			Match(TO);
			State = 5352;
			_localctx.toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HISTOGRAM() { return GetTokens(MySqlParser.HISTOGRAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM(int i) {
			return GetToken(MySqlParser.HISTOGRAM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAnalyzeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAnalyzeTable(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeTableContext analyzeTable() {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(Context, State);
		EnterRule(_localctx, 454, RULE_analyzeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5354;
			Match(ANALYZE);
			State = 5356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5355;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5358;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5359;
			tables();
			State = 5377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
			case 1:
				{
				State = 5360;
				Match(UPDATE);
				State = 5361;
				Match(HISTOGRAM);
				State = 5362;
				Match(ON);
				State = 5363;
				fullColumnName();
				State = 5368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5364;
					Match(COMMA);
					State = 5365;
					fullColumnName();
					}
					}
					State = 5370;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5371;
					Match(WITH);
					State = 5372;
					decimalLiteral();
					State = 5373;
					Match(BUCKETS);
					}
				}

				}
				break;
			}
			State = 5390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,787,Context) ) {
			case 1:
				{
				State = 5379;
				Match(DROP);
				State = 5380;
				Match(HISTOGRAM);
				State = 5381;
				Match(ON);
				State = 5382;
				fullColumnName();
				State = 5387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5383;
					Match(COMMA);
					State = 5384;
					fullColumnName();
					}
					}
					State = 5389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext[] checkTableOption() {
			return GetRuleContexts<CheckTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext checkTableOption(int i) {
			return GetRuleContext<CheckTableOptionContext>(i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTable(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableContext checkTable() {
		CheckTableContext _localctx = new CheckTableContext(Context, State);
		EnterRule(_localctx, 456, RULE_checkTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5392;
			Match(CHECK);
			State = 5393;
			Match(TABLE);
			State = 5394;
			tables();
			State = 5398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				State = 5395;
				checkTableOption();
				}
				}
				State = 5400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecksumTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checksumTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChecksumTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChecksumTable(this);
		}
	}

	[RuleVersion(0)]
	public ChecksumTableContext checksumTable() {
		ChecksumTableContext _localctx = new ChecksumTableContext(Context, State);
		EnterRule(_localctx, 458, RULE_checksumTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5401;
			Match(CHECKSUM);
			State = 5402;
			Match(TABLE);
			State = 5403;
			tables();
			State = 5405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				State = 5404;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptimizeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimizeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptimizeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptimizeTable(this);
		}
	}

	[RuleVersion(0)]
	public OptimizeTableContext optimizeTable() {
		OptimizeTableContext _localctx = new OptimizeTableContext(Context, State);
		EnterRule(_localctx, 460, RULE_optimizeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5407;
			Match(OPTIMIZE);
			State = 5409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5408;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5411;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5412;
			tables();
			State = 5414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 5413;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepairTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepairTable(this);
		}
	}

	[RuleVersion(0)]
	public RepairTableContext repairTable() {
		RepairTableContext _localctx = new RepairTableContext(Context, State);
		EnterRule(_localctx, 462, RULE_repairTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5416;
			Match(REPAIR);
			State = 5418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5417;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5420;
			Match(TABLE);
			State = 5421;
			tables();
			State = 5423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 5422;
				Match(QUICK);
				}
			}

			State = 5426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED) {
				{
				State = 5425;
				Match(EXTENDED);
				}
			}

			State = 5429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USE_FRM) {
				{
				State = 5428;
				Match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckTableOption(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableOptionContext checkTableOption() {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(Context, State);
		EnterRule(_localctx, 464, RULE_checkTableOption);
		try {
			State = 5438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5431;
				Match(FOR);
				State = 5432;
				Match(UPGRADE);
				}
				break;
			case QUICK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5433;
				Match(QUICK);
				}
				break;
			case FAST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5434;
				Match(FAST);
				}
				break;
			case MEDIUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5435;
				Match(MEDIUM);
				}
				break;
			case EXTENDED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5436;
				Match(EXTENDED);
				}
				break;
			case CHANGED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5437;
				Match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfunctionContext : ParserRuleContext {
		public IToken returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdfunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUdfunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUdfunction(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfunctionContext createUdfunction() {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(Context, State);
		EnterRule(_localctx, 466, RULE_createUdfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5440;
			Match(CREATE);
			State = 5442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 5441;
				Match(AGGREGATE);
				}
			}

			State = 5444;
			Match(FUNCTION);
			State = 5445;
			uid();
			State = 5446;
			Match(RETURNS);
			State = 5447;
			_localctx.returnType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (INTEGER - 200)) | (1L << (REAL - 200)) | (1L << (DECIMAL - 200)))) != 0) || _la==STRING) ) {
				_localctx.returnType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5448;
			Match(SONAME);
			State = 5449;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallPlugin(this);
		}
	}

	[RuleVersion(0)]
	public InstallPluginContext installPlugin() {
		InstallPluginContext _localctx = new InstallPluginContext(Context, State);
		EnterRule(_localctx, 468, RULE_installPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5451;
			Match(INSTALL);
			State = 5452;
			Match(PLUGIN);
			State = 5453;
			uid();
			State = 5454;
			Match(SONAME);
			State = 5455;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUninstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUninstallPlugin(this);
		}
	}

	[RuleVersion(0)]
	public UninstallPluginContext uninstallPlugin() {
		UninstallPluginContext _localctx = new UninstallPluginContext(Context, State);
		EnterRule(_localctx, 470, RULE_uninstallPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5457;
			Match(UNINSTALL);
			State = 5458;
			Match(PLUGIN);
			State = 5459;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
	 
		public SetStatementContext() { }
		public virtual void CopyFrom(SetStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTransactionContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetTransactionStatementContext setTransactionStatement() {
			return GetRuleContext<SetTransactionStatementContext>(0);
		}
		public SetTransactionContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetTransaction(this);
		}
	}
	public partial class SetCharsetContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetCharset(this);
		}
	}
	public partial class SetNamesContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public SetNamesContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetNames(this);
		}
	}
	public partial class SetPasswordContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetPasswordStatementContext setPasswordStatement() {
			return GetRuleContext<SetPasswordStatementContext>(0);
		}
		public SetPasswordContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetPassword(this);
		}
	}
	public partial class SetAutocommitContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAutocommitStatementContext setAutocommitStatement() {
			return GetRuleContext<SetAutocommitStatementContext>(0);
		}
		public SetAutocommitContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommit(this);
		}
	}
	public partial class SetNewValueInsideTriggerContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetNewValueInsideTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetNewValueInsideTrigger(this);
		}
	}
	public partial class SetVariableContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MySqlParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetVariable(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 472, RULE_setStatement);
		int _la;
		try {
			State = 5513;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,805,Context) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5461;
				Match(SET);
				State = 5462;
				variableClause();
				State = 5463;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5466;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,798,Context) ) {
				case 1:
					{
					State = 5464;
					expression(0);
					}
					break;
				case 2:
					{
					State = 5465;
					Match(ON);
					}
					break;
				}
				State = 5477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5468;
					Match(COMMA);
					State = 5469;
					variableClause();
					State = 5470;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5473;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,799,Context) ) {
					case 1:
						{
						State = 5471;
						expression(0);
						}
						break;
					case 2:
						{
						State = 5472;
						Match(ON);
						}
						break;
					}
					}
					}
					State = 5479;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5480;
				Match(SET);
				State = 5481;
				charSet();
				State = 5484;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5482;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 5483;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5486;
				Match(SET);
				State = 5487;
				Match(NAMES);
				State = 5494;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5488;
					charsetName();
					State = 5491;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE) {
						{
						State = 5489;
						Match(COLLATE);
						State = 5490;
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					State = 5493;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5496;
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5497;
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5498;
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5499;
				Match(SET);
				State = 5500;
				fullId();
				State = 5501;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5502;
				expression(0);
				State = 5510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5503;
					Match(COMMA);
					State = 5504;
					fullId();
					State = 5505;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5506;
					expression(0);
					}
					}
					State = 5512;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
	 
		public ShowStatementContext() { }
		public virtual void CopyFrom(ShowStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ShowOpenTablesContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowOpenTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowOpenTables(this);
		}
	}
	public partial class ShowGlobalInfoContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return GetRuleContext<ShowGlobalInfoClauseContext>(0);
		}
		public ShowGlobalInfoContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfo(this);
		}
	}
	public partial class ShowCreateFullIdObjectContext : ShowStatementContext {
		public IToken namedEntity;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFullIdObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFullIdObject(this);
		}
	}
	public partial class ShowCreateUserContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowCreateUserContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateUser(this);
		}
	}
	public partial class ShowErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowErrors(this);
		}
	}
	public partial class ShowCountErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCountErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCountErrors(this);
		}
	}
	public partial class ShowObjectFilterContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommonEntityContext showCommonEntity() {
			return GetRuleContext<ShowCommonEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowObjectFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowObjectFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowObjectFilter(this);
		}
	}
	public partial class ShowCreateDbContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDbContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateDb(this);
		}
	}
	public partial class ShowEngineContext : ShowStatementContext {
		public IToken engineOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEngine(this);
		}
	}
	public partial class ShowSchemaFilterContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowSchemaEntityContext showSchemaEntity() {
			return GetRuleContext<ShowSchemaEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaFilter(this);
		}
	}
	public partial class ShowIndexesContext : ShowStatementContext {
		public IToken indexFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowIndexesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowIndexes(this);
		}
	}
	public partial class ShowLogEventsContext : ShowStatementContext {
		public IToken logFormat;
		public IToken filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowLogEvents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowLogEvents(this);
		}
	}
	public partial class ShowMasterLogsContext : ShowStatementContext {
		public IToken logFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowMasterLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowMasterLogs(this);
		}
	}
	public partial class ShowGrantsContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowGrantsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGrants(this);
		}
	}
	public partial class ShowSlaveStatusContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSlaveStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSlaveStatus(this);
		}
	}
	public partial class ShowRoutineContext : ShowStatementContext {
		public IToken routine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowRoutine(this);
		}
	}
	public partial class ShowProfileContext : ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext[] showProfileType() {
			return GetRuleContexts<ShowProfileTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext showProfileType(int i) {
			return GetRuleContext<ShowProfileTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public ShowProfileContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfile(this);
		}
	}
	public partial class ShowColumnsContext : ShowStatementContext {
		public IToken columnsFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MySqlParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MySqlParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowColumnsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowColumns(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 474, RULE_showStatement);
		int _la;
		try {
			State = 5668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,828,Context) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5515;
				Match(SHOW);
				State = 5516;
				((ShowMasterLogsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5517;
				Match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5518;
				Match(SHOW);
				State = 5519;
				((ShowLogEventsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5520;
				Match(EVENTS);
				State = 5523;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 5521;
					Match(IN);
					State = 5522;
					((ShowLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
					}
				}

				State = 5527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 5525;
					Match(FROM);
					State = 5526;
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				State = 5536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5529;
					Match(LIMIT);
					State = 5533;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,808,Context) ) {
					case 1:
						{
						State = 5530;
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						State = 5531;
						Match(COMMA);
						}
						break;
					}
					State = 5535;
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5538;
				Match(SHOW);
				State = 5539;
				showCommonEntity();
				State = 5541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5540;
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5543;
				Match(SHOW);
				State = 5545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5544;
					Match(FULL);
					}
				}

				State = 5547;
				((ShowColumnsContext)_localctx).columnsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5548;
				((ShowColumnsContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5549;
				tableName();
				State = 5552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5550;
					((ShowColumnsContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5551;
					uid();
					}
				}

				State = 5555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5554;
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5557;
				Match(SHOW);
				State = 5558;
				Match(CREATE);
				State = 5559;
				((ShowCreateDbContext)_localctx).schemaFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 5560;
					ifNotExists();
					}
				}

				State = 5563;
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5564;
				Match(SHOW);
				State = 5565;
				Match(CREATE);
				State = 5566;
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (PROCEDURE - 127)) | (1L << (TABLE - 127)) | (1L << (TRIGGER - 127)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5567;
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5568;
				Match(SHOW);
				State = 5569;
				Match(CREATE);
				State = 5570;
				Match(USER);
				State = 5571;
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5572;
				Match(SHOW);
				State = 5573;
				Match(ENGINE);
				State = 5574;
				engineName();
				State = 5575;
				((ShowEngineContext)_localctx).engineOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 5577;
				Match(SHOW);
				State = 5578;
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 5579;
				Match(SHOW);
				State = 5580;
				((ShowErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5581;
					Match(LIMIT);
					State = 5585;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
					case 1:
						{
						State = 5582;
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						State = 5583;
						Match(COMMA);
						}
						break;
					}
					State = 5587;
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 5590;
				Match(SHOW);
				State = 5591;
				Match(COUNT);
				State = 5592;
				Match(LR_BRACKET);
				State = 5593;
				Match(STAR);
				State = 5594;
				Match(RR_BRACKET);
				State = 5595;
				((ShowCountErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 5596;
				Match(SHOW);
				State = 5597;
				showSchemaEntity();
				State = 5600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5598;
					((ShowSchemaFilterContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5599;
					uid();
					}
				}

				State = 5603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5602;
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 5605;
				Match(SHOW);
				State = 5606;
				((ShowRoutineContext)_localctx).routine = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5607;
				Match(CODE);
				State = 5608;
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 5609;
				Match(SHOW);
				State = 5610;
				Match(GRANTS);
				State = 5613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5611;
					Match(FOR);
					State = 5612;
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 5615;
				Match(SHOW);
				State = 5616;
				((ShowIndexesContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5617;
				((ShowIndexesContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5618;
				tableName();
				State = 5621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5619;
					((ShowIndexesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5620;
					uid();
					}
				}

				State = 5625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 5623;
					Match(WHERE);
					State = 5624;
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 5627;
				Match(SHOW);
				State = 5628;
				Match(OPEN);
				State = 5629;
				Match(TABLES);
				State = 5632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5630;
					((ShowOpenTablesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5631;
					uid();
					}
				}

				State = 5635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5634;
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 5637;
				Match(SHOW);
				State = 5638;
				Match(PROFILE);
				State = 5639;
				showProfileType();
				State = 5644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5640;
					Match(COMMA);
					State = 5641;
					showProfileType();
					}
					}
					State = 5646;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5647;
					Match(FOR);
					State = 5648;
					Match(QUERY);
					State = 5649;
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				State = 5652;
				Match(LIMIT);
				State = 5656;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
				case 1:
					{
					State = 5653;
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					State = 5654;
					Match(COMMA);
					}
					break;
				}
				State = 5658;
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 5660;
				Match(SHOW);
				State = 5661;
				Match(SLAVE);
				State = 5662;
				Match(STATUS);
				State = 5666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5663;
					Match(FOR);
					State = 5664;
					Match(CHANNEL);
					State = 5665;
					Match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_SIGN() { return GetTokens(MySqlParser.AT_SIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN(int i) {
			return GetToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVariableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVariableClause(this);
		}
	}

	[RuleVersion(0)]
	public VariableClauseContext variableClause() {
		VariableClauseContext _localctx = new VariableClauseContext(Context, State);
		EnterRule(_localctx, 476, RULE_variableClause);
		int _la;
		try {
			State = 5680;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5670;
				Match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5671;
				Match(GLOBAL_ID);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5677;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,830,Context) ) {
				case 1:
					{
					State = 5674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT_SIGN) {
						{
						State = 5672;
						Match(AT_SIGN);
						State = 5673;
						Match(AT_SIGN);
						}
					}

					State = 5676;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5679;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommonEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(MySqlParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommonEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCommonEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCommonEntity(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommonEntityContext showCommonEntity() {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(Context, State);
		EnterRule(_localctx, 478, RULE_showCommonEntity);
		int _la;
		try {
			State = 5695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5682;
				Match(CHARACTER);
				State = 5683;
				Match(SET);
				}
				break;
			case COLLATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5684;
				Match(COLLATION);
				}
				break;
			case DATABASES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5685;
				Match(DATABASES);
				}
				break;
			case SCHEMAS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5686;
				Match(SCHEMAS);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5687;
				Match(FUNCTION);
				State = 5688;
				Match(STATUS);
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5689;
				Match(PROCEDURE);
				State = 5690;
				Match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					State = 5691;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5694;
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowFilter(this);
		}
	}

	[RuleVersion(0)]
	public ShowFilterContext showFilter() {
		ShowFilterContext _localctx = new ShowFilterContext(Context, State);
		EnterRule(_localctx, 480, RULE_showFilter);
		try {
			State = 5701;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5697;
				Match(LIKE);
				State = 5698;
				Match(STRING_LITERAL);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5699;
				Match(WHERE);
				State = 5700;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGlobalInfoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGlobalInfoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfoClause(this);
		}
	}

	[RuleVersion(0)]
	public ShowGlobalInfoClauseContext showGlobalInfoClause() {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(Context, State);
		EnterRule(_localctx, 482, RULE_showGlobalInfoClause);
		int _la;
		try {
			State = 5720;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENGINES:
			case STORAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 5703;
					Match(STORAGE);
					}
				}

				State = 5706;
				Match(ENGINES);
				}
				break;
			case MASTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5707;
				Match(MASTER);
				State = 5708;
				Match(STATUS);
				}
				break;
			case PLUGINS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5709;
				Match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5710;
				Match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5711;
					Match(FULL);
					}
				}

				State = 5714;
				Match(PROCESSLIST);
				}
				break;
			case PROFILES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5715;
				Match(PROFILES);
				}
				break;
			case SLAVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5716;
				Match(SLAVE);
				State = 5717;
				Match(HOSTS);
				}
				break;
			case AUTHORS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5718;
				Match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5719;
				Match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowSchemaEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showSchemaEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaEntity(this);
		}
	}

	[RuleVersion(0)]
	public ShowSchemaEntityContext showSchemaEntity() {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(Context, State);
		EnterRule(_localctx, 484, RULE_showSchemaEntity);
		int _la;
		try {
			State = 5730;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5722;
				Match(EVENTS);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5723;
				Match(TABLE);
				State = 5724;
				Match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5725;
					Match(FULL);
					}
				}

				State = 5728;
				Match(TABLES);
				}
				break;
			case TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5729;
				Match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfileType(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileTypeContext showProfileType() {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(Context, State);
		EnterRule(_localctx, 486, RULE_showProfileType);
		try {
			State = 5744;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5732;
				Match(ALL);
				}
				break;
			case BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5733;
				Match(BLOCK);
				State = 5734;
				Match(IO);
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5735;
				Match(CONTEXT);
				State = 5736;
				Match(SWITCHES);
				}
				break;
			case CPU:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5737;
				Match(CPU);
				}
				break;
			case IPC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5738;
				Match(IPC);
				}
				break;
			case MEMORY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5739;
				Match(MEMORY);
				}
				break;
			case PAGE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5740;
				Match(PAGE);
				State = 5741;
				Match(FAULTS);
				}
				break;
			case SOURCE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5742;
				Match(SOURCE);
				}
				break;
			case SWAPS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5743;
				Match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinlogStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binlogStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinlogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinlogStatement(this);
		}
	}

	[RuleVersion(0)]
	public BinlogStatementContext binlogStatement() {
		BinlogStatementContext _localctx = new BinlogStatementContext(Context, State);
		EnterRule(_localctx, 488, RULE_binlogStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5746;
			Match(BINLOG);
			State = 5747;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheIndexStatementContext : ParserRuleContext {
		public UidContext schema;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext[] tableIndexes() {
			return GetRuleContexts<TableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext tableIndexes(int i) {
			return GetRuleContext<TableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCacheIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCacheIndexStatement(this);
		}
	}

	[RuleVersion(0)]
	public CacheIndexStatementContext cacheIndexStatement() {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(Context, State);
		EnterRule(_localctx, 490, RULE_cacheIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5749;
			Match(CACHE);
			State = 5750;
			Match(INDEX);
			State = 5751;
			tableIndexes();
			State = 5756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5752;
				Match(COMMA);
				State = 5753;
				tableIndexes();
				}
				}
				State = 5758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5759;
				Match(PARTITION);
				State = 5760;
				Match(LR_BRACKET);
				State = 5763;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 5761;
					uidList();
					}
					break;
				case ALL:
					{
					State = 5762;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5765;
				Match(RR_BRACKET);
				}
			}

			State = 5768;
			Match(IN);
			State = 5769;
			_localctx.schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushStatementContext : ParserRuleContext {
		public IToken flushFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushStatement(this);
		}
	}

	[RuleVersion(0)]
	public FlushStatementContext flushStatement() {
		FlushStatementContext _localctx = new FlushStatementContext(Context, State);
		EnterRule(_localctx, 492, RULE_flushStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5771;
			Match(FLUSH);
			State = 5773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5772;
				_localctx.flushFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.flushFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5775;
			flushOption();
			State = 5780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5776;
				Match(COMMA);
				State = 5777;
				flushOption();
				}
				}
				State = 5782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStatementContext : ParserRuleContext {
		public IToken connectionFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL() { return GetToken(MySqlParser.KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public KillStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKillStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKillStatement(this);
		}
	}

	[RuleVersion(0)]
	public KillStatementContext killStatement() {
		KillStatementContext _localctx = new KillStatementContext(Context, State);
		EnterRule(_localctx, 494, RULE_killStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5783;
			Match(KILL);
			State = 5785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				State = 5784;
				_localctx.connectionFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					_localctx.connectionFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5793;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				State = 5788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5787;
					decimalLiteral();
					}
					}
					State = 5790;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 1125)) & ~0x3f) == 0 && ((1L << (_la - 1125)) & ((1L << (ZERO_DECIMAL - 1125)) | (1L << (ONE_DECIMAL - 1125)) | (1L << (TWO_DECIMAL - 1125)) | (1L << (DECIMAL_LITERAL - 1125)) | (1L << (REAL_LITERAL - 1125)))) != 0) );
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				State = 5792;
				mysqlVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadIndexIntoCacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext[] loadedTableIndexes() {
			return GetRuleContexts<LoadedTableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return GetRuleContext<LoadedTableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadIndexIntoCache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadIndexIntoCache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadIndexIntoCache(this);
		}
	}

	[RuleVersion(0)]
	public LoadIndexIntoCacheContext loadIndexIntoCache() {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(Context, State);
		EnterRule(_localctx, 496, RULE_loadIndexIntoCache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5795;
			Match(LOAD);
			State = 5796;
			Match(INDEX);
			State = 5797;
			Match(INTO);
			State = 5798;
			Match(CACHE);
			State = 5799;
			loadedTableIndexes();
			State = 5804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5800;
				Match(COMMA);
				State = 5801;
				loadedTableIndexes();
				}
				}
				State = 5806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetStatement(this);
		}
	}

	[RuleVersion(0)]
	public ResetStatementContext resetStatement() {
		ResetStatementContext _localctx = new ResetStatementContext(Context, State);
		EnterRule(_localctx, 498, RULE_resetStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5807;
			Match(RESET);
			State = 5808;
			Match(QUERY);
			State = 5809;
			Match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShutdownStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdownStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShutdownStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShutdownStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShutdownStatementContext shutdownStatement() {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(Context, State);
		EnterRule(_localctx, 500, RULE_shutdownStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5811;
			Match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableIndexesContext : ParserRuleContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableIndexes(this);
		}
	}

	[RuleVersion(0)]
	public TableIndexesContext tableIndexes() {
		TableIndexesContext _localctx = new TableIndexesContext(Context, State);
		EnterRule(_localctx, 502, RULE_tableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5813;
			tableName();
			State = 5821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				State = 5815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5814;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5817;
				Match(LR_BRACKET);
				State = 5818;
				uidList();
				State = 5819;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
	 
		public FlushOptionContext() { }
		public virtual void CopyFrom(FlushOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTableOptionContext flushTableOption() {
			return GetRuleContext<FlushTableOptionContext>(0);
		}
		public TableFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableFlushOption(this);
		}
	}
	public partial class ChannelFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChannelFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannelFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannelFlushOption(this);
		}
	}
	public partial class SimpleFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleFlushOption(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 504, RULE_flushOption);
		int _la;
		try {
			State = 5855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,858,Context) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5841;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DES_KEY_FILE:
					{
					State = 5823;
					Match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					State = 5824;
					Match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					State = 5826;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BINARY || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (ERROR - 398)) | (1L << (GENERAL - 398)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						State = 5825;
						_la = TokenStream.LA(1);
						if ( !(_la==BINARY || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (ENGINE - 398)) | (1L << (ERROR - 398)) | (1L << (GENERAL - 398)))) != 0) || _la==RELAY || _la==SLOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5828;
					Match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					State = 5829;
					Match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					State = 5830;
					Match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					State = 5831;
					Match(QUERY);
					State = 5832;
					Match(CACHE);
					}
					break;
				case STATUS:
					{
					State = 5833;
					Match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					State = 5834;
					Match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					State = 5835;
					Match(TABLES);
					State = 5839;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 5836;
						Match(WITH);
						State = 5837;
						Match(READ);
						State = 5838;
						Match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5843;
				Match(RELAY);
				State = 5844;
				Match(LOGS);
				State = 5846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5845;
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5848;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5850;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,856,Context) ) {
				case 1:
					{
					State = 5849;
					tables();
					}
					break;
				}
				State = 5853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					State = 5852;
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushTableOption(this);
		}
	}

	[RuleVersion(0)]
	public FlushTableOptionContext flushTableOption() {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(Context, State);
		EnterRule(_localctx, 506, RULE_flushTableOption);
		try {
			State = 5862;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5857;
				Match(WITH);
				State = 5858;
				Match(READ);
				State = 5859;
				Match(LOCK);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5860;
				Match(FOR);
				State = 5861;
				Match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadedTableIndexesContext : ParserRuleContext {
		public UidListContext partitionList;
		public IToken indexFormat;
		public UidListContext indexList;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadedTableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadedTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadedTableIndexes(this);
		}
	}

	[RuleVersion(0)]
	public LoadedTableIndexesContext loadedTableIndexes() {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(Context, State);
		EnterRule(_localctx, 508, RULE_loadedTableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5864;
			tableName();
			State = 5872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5865;
				Match(PARTITION);
				State = 5866;
				Match(LR_BRACKET);
				State = 5869;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					State = 5867;
					_localctx.partitionList = uidList();
					}
					break;
				case ALL:
					{
					State = 5868;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5871;
				Match(RR_BRACKET);
				}
			}

			State = 5881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
			case 1:
				{
				State = 5875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 5874;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5877;
				Match(LR_BRACKET);
				State = 5878;
				_localctx.indexList = uidList();
				State = 5879;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 5885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 5883;
				Match(IGNORE);
				State = 5884;
				Match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public UidContext column;
		public IToken pattern;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleDescribeStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDescribeStatementContext simpleDescribeStatement() {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(Context, State);
		EnterRule(_localctx, 510, RULE_simpleDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5887;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5888;
			tableName();
			State = 5891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
			case 1:
				{
				State = 5889;
				_localctx.column = uid();
				}
				break;
			case 2:
				{
				State = 5890;
				_localctx.pattern = Match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public IToken formatType;
		public IToken formatValue;
		[System.Diagnostics.DebuggerNonUserCode] public DescribeObjectClauseContext describeObjectClause() {
			return GetRuleContext<DescribeObjectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullDescribeStatement(this);
		}
	}

	[RuleVersion(0)]
	public FullDescribeStatementContext fullDescribeStatement() {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(Context, State);
		EnterRule(_localctx, 512, RULE_fullDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5893;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				State = 5894;
				_localctx.formatType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					_localctx.formatType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5895;
				Match(EQUAL_SYMBOL);
				State = 5896;
				_localctx.formatValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					_localctx.formatValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5899;
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHelpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHelpStatement(this);
		}
	}

	[RuleVersion(0)]
	public HelpStatementContext helpStatement() {
		HelpStatementContext _localctx = new HelpStatementContext(Context, State);
		EnterRule(_localctx, 514, RULE_helpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5901;
			Match(HELP);
			State = 5902;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUseStatement(this);
		}
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 516, RULE_useStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5904;
			Match(USE);
			State = 5905;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(MySqlParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 518, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5907;
			Match(SIGNAL);
			State = 5915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5908;
				Match(SQLSTATE);
				State = 5910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5909;
					Match(VALUE);
					}
				}

				State = 5912;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5913;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5914;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,870,Context) ) {
			case 1:
				{
				State = 5917;
				Match(SET);
				State = 5918;
				signalConditionInformation();
				State = 5923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5919;
					Match(COMMA);
					State = 5920;
					signalConditionInformation();
					}
					}
					State = 5925;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL() { return GetToken(MySqlParser.RESIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 520, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5928;
			Match(RESIGNAL);
			State = 5936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 5929;
				Match(SQLSTATE);
				State = 5931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5930;
					Match(VALUE);
					}
				}

				State = 5933;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 5934;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 5935;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			State = 5947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,874,Context) ) {
			case 1:
				{
				State = 5938;
				Match(SET);
				State = 5939;
				signalConditionInformation();
				State = 5944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5940;
					Match(COMMA);
					State = 5941;
					signalConditionInformation();
					}
					}
					State = 5946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalConditionInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalConditionInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalConditionInformation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalConditionInformation(this);
		}
	}

	[RuleVersion(0)]
	public SignalConditionInformationContext signalConditionInformation() {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(Context, State);
		EnterRule(_localctx, 522, RULE_signalConditionInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5949;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5950;
			Match(EQUAL_SYMBOL);
			State = 5955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,875,Context) ) {
			case 1:
				{
				State = 5951;
				stringLiteral();
				}
				break;
			case 2:
				{
				State = 5952;
				Match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				State = 5953;
				mysqlVariable();
				}
				break;
			case 4:
				{
				State = 5954;
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MySqlParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext[] diagnosticsConditionInformationName() {
			return GetRuleContexts<DiagnosticsConditionInformationNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return GetRuleContext<DiagnosticsConditionInformationNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(MySqlParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(MySqlParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROW_COUNT() { return GetTokens(MySqlParser.ROW_COUNT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT(int i) {
			return GetToken(MySqlParser.ROW_COUNT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDiagnosticsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDiagnosticsStatement(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsStatementContext diagnosticsStatement() {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(Context, State);
		EnterRule(_localctx, 524, RULE_diagnosticsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5957;
			Match(GET);
			State = 5959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				State = 5958;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5961;
			Match(DIAGNOSTICS);
			State = 5993;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				{
				State = 5962;
				variableClause();
				State = 5963;
				Match(EQUAL_SYMBOL);
				State = 5964;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5965;
					Match(COMMA);
					State = 5966;
					variableClause();
					State = 5967;
					Match(EQUAL_SYMBOL);
					State = 5968;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 5974;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				State = 5975;
				Match(CONDITION);
				State = 5978;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5976;
					decimalLiteral();
					}
					break;
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IGNORED:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					State = 5977;
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5980;
				variableClause();
				State = 5981;
				Match(EQUAL_SYMBOL);
				State = 5982;
				diagnosticsConditionInformationName();
				State = 5990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5983;
					Match(COMMA);
					State = 5984;
					variableClause();
					State = 5985;
					Match(EQUAL_SYMBOL);
					State = 5986;
					diagnosticsConditionInformationName();
					}
					}
					State = 5992;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsConditionInformationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsConditionInformationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDiagnosticsConditionInformationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDiagnosticsConditionInformationName(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(Context, State);
		EnterRule(_localctx, 526, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5995;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (RETURNED_SQLSTATE - 576)) | (1L << (SUBCLASS_ORIGIN - 576)) | (1L << (TABLE_NAME - 576)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeObjectClauseContext : ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeObjectClause; } }
	 
		public DescribeObjectClauseContext() { }
		public virtual void CopyFrom(DescribeObjectClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DescribeStatementsContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatements(this);
		}
	}
	public partial class DescribeConnectionContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeConnection(this);
		}
	}

	[RuleVersion(0)]
	public DescribeObjectClauseContext describeObjectClause() {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(Context, State);
		EnterRule(_localctx, 528, RULE_describeObjectClause);
		try {
			State = 6007;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6002;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					State = 5997;
					selectStatement();
					}
					break;
				case DELETE:
					{
					State = 5998;
					deleteStatement();
					}
					break;
				case INSERT:
					{
					State = 5999;
					insertStatement();
					}
					break;
				case REPLACE:
					{
					State = 6000;
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					State = 6001;
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6004;
				Match(FOR);
				State = 6005;
				Match(CONNECTION);
				State = 6006;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullId(this);
		}
	}

	[RuleVersion(0)]
	public FullIdContext fullId() {
		FullIdContext _localctx = new FullIdContext(Context, State);
		EnterRule(_localctx, 530, RULE_fullId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6009;
			uid();
			State = 6013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,883,Context) ) {
			case 1:
				{
				State = 6010;
				Match(DOT_ID);
				}
				break;
			case 2:
				{
				State = 6011;
				Match(DOT);
				State = 6012;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 532, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6015;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleName(this);
		}
	}

	[RuleVersion(0)]
	public RoleNameContext roleName() {
		RoleNameContext _localctx = new RoleNameContext(Context, State);
		EnterRule(_localctx, 534, RULE_roleName);
		try {
			State = 6019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6017;
				userName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6018;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext[] dottedId() {
			return GetRuleContexts<DottedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId(int i) {
			return GetRuleContext<DottedIdContext>(i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullColumnName(this);
		}
	}

	[RuleVersion(0)]
	public FullColumnNameContext fullColumnName() {
		FullColumnNameContext _localctx = new FullColumnNameContext(Context, State);
		EnterRule(_localctx, 536, RULE_fullColumnName);
		try {
			State = 6033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,888,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6021;
				uid();
				State = 6026;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
				case 1:
					{
					State = 6022;
					dottedId();
					State = 6024;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
					case 1:
						{
						State = 6023;
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6028;
				MatchWildcard();
				State = 6029;
				dottedId();
				State = 6031;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,887,Context) ) {
				case 1:
					{
					State = 6030;
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNameContext : ParserRuleContext {
		public IToken sortType;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnName(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNameContext indexColumnName() {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(Context, State);
		EnterRule(_localctx, 538, RULE_indexColumnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6046;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,891,Context) ) {
			case 1:
				{
				State = 6037;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,889,Context) ) {
				case 1:
					{
					State = 6035;
					uid();
					}
					break;
				case 2:
					{
					State = 6036;
					Match(STRING_LITERAL);
					}
					break;
				}
				State = 6043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6039;
					Match(LR_BRACKET);
					State = 6040;
					decimalLiteral();
					State = 6041;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				State = 6045;
				expression(0);
				}
				break;
			}
			State = 6049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 6048;
				_localctx.sortType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.sortType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_USER_NAME() { return GetToken(MySqlParser.STRING_USER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_USER_NAME_MARIADB() { return GetToken(MySqlParser.STRING_USER_NAME_MARIADB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserName(this);
		}
	}

	[RuleVersion(0)]
	public UserNameContext userName() {
		UserNameContext _localctx = new UserNameContext(Context, State);
		EnterRule(_localctx, 540, RULE_userName);
		try {
			State = 6057;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,893,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6051;
				Match(STRING_USER_NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6052;
				Match(STRING_USER_NAME_MARIADB);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6053;
				Match(ID);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6054;
				Match(STRING_LITERAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6055;
				Match(ADMIN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6056;
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MysqlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mysqlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariable(this);
		}
	}

	[RuleVersion(0)]
	public MysqlVariableContext mysqlVariable() {
		MysqlVariableContext _localctx = new MysqlVariableContext(Context, State);
		EnterRule(_localctx, 542, RULE_mysqlVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6059;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 544, RULE_charsetName);
		try {
			State = 6065;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,894,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6061;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6062;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6063;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6064;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 546, RULE_collationName);
		try {
			State = 6069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6067;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6068;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARCHIVE() { return GetToken(MySqlParser.ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKHOLE() { return GetToken(MySqlParser.BLACKHOLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(MySqlParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED() { return GetToken(MySqlParser.FEDERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MRG_MYISAM() { return GetToken(MySqlParser.MRG_MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYISAM() { return GetToken(MySqlParser.MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB() { return GetToken(MySqlParser.NDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER() { return GetToken(MySqlParser.NDBCLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORMANCE_SCHEMA() { return GetToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKUDB() { return GetToken(MySqlParser.TOKUDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEngineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEngineName(this);
		}
	}

	[RuleVersion(0)]
	public EngineNameContext engineName() {
		EngineNameContext _localctx = new EngineNameContext(Context, State);
		EnterRule(_localctx, 548, RULE_engineName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6071;
			_la = TokenStream.LA(1);
			if ( !(_la==CONNECT || ((((_la - 764)) & ~0x3f) == 0 && ((1L << (_la - 764)) & ((1L << (ARCHIVE - 764)) | (1L << (BLACKHOLE - 764)) | (1L << (CSV - 764)) | (1L << (FEDERATED - 764)) | (1L << (INNODB - 764)) | (1L << (MEMORY - 764)) | (1L << (MRG_MYISAM - 764)) | (1L << (MYISAM - 764)) | (1L << (NDB - 764)) | (1L << (NDBCLUSTER - 764)) | (1L << (PERFORMANCE_SCHEMA - 764)) | (1L << (TOKUDB - 764)))) != 0) || ((((_la - 1135)) & ~0x3f) == 0 && ((1L << (_la - 1135)) & ((1L << (STRING_LITERAL - 1135)) | (1L << (ID - 1135)) | (1L << (REVERSE_QUOTE_ID - 1135)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MySqlParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_SYMB() { return GetTokens(MySqlParser.COLON_SYMB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB(int i) {
			return GetToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUuidSet(this);
		}
	}

	[RuleVersion(0)]
	public UuidSetContext uuidSet() {
		UuidSetContext _localctx = new UuidSetContext(Context, State);
		EnterRule(_localctx, 550, RULE_uuidSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6073;
			decimalLiteral();
			State = 6074;
			Match(MINUS);
			State = 6075;
			decimalLiteral();
			State = 6076;
			Match(MINUS);
			State = 6077;
			decimalLiteral();
			State = 6078;
			Match(MINUS);
			State = 6079;
			decimalLiteral();
			State = 6080;
			Match(MINUS);
			State = 6081;
			decimalLiteral();
			State = 6087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6082;
				Match(COLON_SYMB);
				State = 6083;
				decimalLiteral();
				State = 6084;
				Match(MINUS);
				State = 6085;
				decimalLiteral();
				}
				}
				State = 6089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext[] xuidStringId() {
			return GetRuleContexts<XuidStringIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext xuidStringId(int i) {
			return GetRuleContext<XuidStringIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 552, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6091;
			_localctx.globalTableUid = xuidStringId();
			State = 6098;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6092;
				Match(COMMA);
				State = 6093;
				_localctx.qualifier = xuidStringId();
				State = 6096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6094;
					Match(COMMA);
					State = 6095;
					_localctx.idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XuidStringIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HEXADECIMAL_LITERAL() { return GetTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL(int i) {
			return GetToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xuidStringId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXuidStringId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXuidStringId(this);
		}
	}

	[RuleVersion(0)]
	public XuidStringIdContext xuidStringId() {
		XuidStringIdContext _localctx = new XuidStringIdContext(Context, State);
		EnterRule(_localctx, 554, RULE_xuidStringId);
		int _la;
		try {
			State = 6107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6100;
				Match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6101;
				Match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6102;
					Match(HEXADECIMAL_LITERAL);
					}
					}
					State = 6105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAuthPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAuthPlugin(this);
		}
	}

	[RuleVersion(0)]
	public AuthPluginContext authPlugin() {
		AuthPluginContext _localctx = new AuthPluginContext(Context, State);
		EnterRule(_localctx, 556, RULE_authPlugin);
		try {
			State = 6111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6109;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6110;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUid(this);
		}
	}

	[RuleVersion(0)]
	public UidContext uid() {
		UidContext _localctx = new UidContext(Context, State);
		EnterRule(_localctx, 558, RULE_uid);
		try {
			State = 6116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,902,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6113;
				simpleId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6114;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6115;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelBaseContext transactionLevelBase() {
			return GetRuleContext<TransactionLevelBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesBaseContext privilegesBase() {
			return GetRuleContext<PrivilegesBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeBaseContext dataTypeBase() {
			return GetRuleContext<DataTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleId(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdContext simpleId() {
		SimpleIdContext _localctx = new SimpleIdContext(Context, State);
		EnterRule(_localctx, 560, RULE_simpleId);
		try {
			State = 6127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6118;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6119;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6120;
				transactionLevelBase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6121;
				engineName();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6122;
				privilegesBase();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6123;
				intervalTypeBase();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6124;
				dataTypeBase();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6125;
				keywordsCanBeId();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6126;
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DottedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dottedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDottedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDottedId(this);
		}
	}

	[RuleVersion(0)]
	public DottedIdContext dottedId() {
		DottedIdContext _localctx = new DottedIdContext(Context, State);
		EnterRule(_localctx, 562, RULE_dottedId);
		try {
			State = 6132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6129;
				Match(DOT_ID);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6130;
				Match(DOT);
				State = 6131;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 564, RULE_decimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6134;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1125)) & ~0x3f) == 0 && ((1L << (_la - 1125)) & ((1L << (ZERO_DECIMAL - 1125)) | (1L << (ONE_DECIMAL - 1125)) | (1L << (TWO_DECIMAL - 1125)) | (1L << (DECIMAL_LITERAL - 1125)) | (1L << (REAL_LITERAL - 1125)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESIZE_LITERAL() { return GetToken(MySqlParser.FILESIZE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFileSizeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFileSizeLiteral(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeLiteralContext fileSizeLiteral() {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(Context, State);
		EnterRule(_localctx, 566, RULE_fileSizeLiteral);
		try {
			State = 6138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESIZE_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6136;
				Match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6137;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_NATIONAL_STRING_LITERAL() { return GetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 568, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			State = 6163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6145;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 6141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 6140;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 6143;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 6144;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6148;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6147;
						Match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6150;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,908,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6157;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 6153;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 6152;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 6155;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 6156;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6161;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,911,Context) ) {
				case 1:
					{
					State = 6159;
					Match(COLLATE);
					State = 6160;
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 570, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6165;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalLiteralContext hexadecimalLiteral() {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(Context, State);
		EnterRule(_localctx, 572, RULE_hexadecimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				State = 6167;
				Match(STRING_CHARSET_NAME);
				}
			}

			State = 6170;
			Match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullNotnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullNotnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullNotnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullNotnull(this);
		}
	}

	[RuleVersion(0)]
	public NullNotnullContext nullNotnull() {
		NullNotnullContext _localctx = new NullNotnullContext(Context, State);
		EnterRule(_localctx, 574, RULE_nullNotnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 6172;
				Match(NOT);
				}
			}

			State = 6175;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken nullLiteral;
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexadecimalLiteralContext hexadecimalLiteral() {
			return GetRuleContext<HexadecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 576, RULE_constant);
		int _la;
		try {
			State = 6189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6177;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6178;
				decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6179;
				Match(MINUS);
				State = 6180;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6181;
				hexadecimalLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6182;
				booleanLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6183;
				Match(REAL_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6184;
				Match(BIT_STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6185;
					Match(NOT);
					}
				}

				State = 6188;
				_localctx.nullLiteral = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					_localctx.nullLiteral = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	 
		public DataTypeContext() { }
		public virtual void CopyFrom(DataTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpatialDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLECTION() { return GetToken(MySqlParser.GEOMCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY() { return GetToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpatialDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpatialDataType(this);
		}
	}
	public partial class LongVarbinaryDataTypeContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLongVarbinaryDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLongVarbinaryDataType(this);
		}
	}
	public partial class CollectionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public CollectionOptionsContext collectionOptions() {
			return GetRuleContext<CollectionOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CollectionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollectionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollectionDataType(this);
		}
	}
	public partial class NationalVaryingStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNationalVaryingStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNationalVaryingStringDataType(this);
		}
	}
	public partial class DimensionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT() { return GetToken(MySqlParser.TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(MySqlParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT() { return GetToken(MySqlParser.MEDIUMINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(MySqlParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDLEINT() { return GetToken(MySqlParser.MIDDLEINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT1() { return GetToken(MySqlParser.INT1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT2() { return GetToken(MySqlParser.INT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT3() { return GetToken(MySqlParser.INT3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT4() { return GetToken(MySqlParser.INT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(MySqlParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIGNED() { return GetTokens(MySqlParser.SIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED(int i) {
			return GetToken(MySqlParser.SIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNSIGNED() { return GetTokens(MySqlParser.UNSIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED(int i) {
			return GetToken(MySqlParser.UNSIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ZEROFILL() { return GetTokens(MySqlParser.ZEROFILL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL(int i) {
			return GetToken(MySqlParser.ZEROFILL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MySqlParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(MySqlParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MySqlParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(MySqlParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MySqlParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT4() { return GetToken(MySqlParser.FLOAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT8() { return GetToken(MySqlParser.FLOAT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(MySqlParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDimensionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDimensionDataType(this);
		}
	}
	public partial class StringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT() { return GetToken(MySqlParser.TINYTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT() { return GetToken(MySqlParser.MEDIUMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT() { return GetToken(MySqlParser.LONGTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR() { return GetToken(MySqlParser.NVARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(MySqlParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(MySqlParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringDataType(this);
		}
	}
	public partial class LongVarcharDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MySqlParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public LongVarcharDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLongVarcharDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLongVarcharDataType(this);
		}
	}
	public partial class NationalStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNationalStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNationalStringDataType(this);
		}
	}
	public partial class SimpleDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB() { return GetToken(MySqlParser.TINYBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB() { return GetToken(MySqlParser.MEDIUMBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB() { return GetToken(MySqlParser.LONGBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 578, RULE_dataType);
		int _la;
		try {
			int _alt;
			State = 6313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6191;
				((StringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (CHAR - 216)) | (1L << (VARCHAR - 216)) | (1L << (NVARCHAR - 216)) | (1L << (LONG - 216)) | (1L << (TINYTEXT - 216)) | (1L << (TEXT - 216)) | (1L << (MEDIUMTEXT - 216)) | (1L << (LONGTEXT - 216)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARYING) {
					{
					State = 6192;
					Match(VARYING);
					}
				}

				State = 6196;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
				case 1:
					{
					State = 6195;
					lengthOneDimension();
					}
					break;
				}
				State = 6199;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,919,Context) ) {
				case 1:
					{
					State = 6198;
					Match(BINARY);
					}
					break;
				}
				State = 6204;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 6201;
					charSet();
					State = 6202;
					charsetName();
					}
					break;
				}
				State = 6209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
				case 1:
					{
					State = 6206;
					Match(COLLATE);
					State = 6207;
					collationName();
					}
					break;
				case 2:
					{
					State = 6208;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6211;
				Match(NATIONAL);
				State = 6212;
				((NationalStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6214;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
				case 1:
					{
					State = 6213;
					lengthOneDimension();
					}
					break;
				}
				State = 6217;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,923,Context) ) {
				case 1:
					{
					State = 6216;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6219;
				Match(NCHAR);
				State = 6220;
				((NationalStringDataTypeContext)_localctx).typeName = Match(VARCHAR);
				State = 6222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,924,Context) ) {
				case 1:
					{
					State = 6221;
					lengthOneDimension();
					}
					break;
				}
				State = 6225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
				case 1:
					{
					State = 6224;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6227;
				Match(NATIONAL);
				State = 6228;
				((NationalVaryingStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6229;
				Match(VARYING);
				State = 6231;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,926,Context) ) {
				case 1:
					{
					State = 6230;
					lengthOneDimension();
					}
					break;
				}
				State = 6234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
				case 1:
					{
					State = 6233;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6236;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (TINYINT - 190)) | (1L << (SMALLINT - 190)) | (1L << (MEDIUMINT - 190)) | (1L << (MIDDLEINT - 190)) | (1L << (INT - 190)) | (1L << (INT1 - 190)) | (1L << (INT2 - 190)) | (1L << (INT3 - 190)) | (1L << (INT4 - 190)) | (1L << (INT8 - 190)) | (1L << (INTEGER - 190)) | (1L << (BIGINT - 190)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6238;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
				case 1:
					{
					State = 6237;
					lengthOneDimension();
					}
					break;
				}
				State = 6243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,929,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6240;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6245;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,929,Context);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6246;
				((DimensionDataTypeContext)_localctx).typeName = Match(REAL);
				State = 6248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
				case 1:
					{
					State = 6247;
					lengthTwoDimension();
					}
					break;
				}
				State = 6253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,931,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6250;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6255;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,931,Context);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6256;
				((DimensionDataTypeContext)_localctx).typeName = Match(DOUBLE);
				State = 6258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRECISION) {
					{
					State = 6257;
					Match(PRECISION);
					}
				}

				State = 6261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
				case 1:
					{
					State = 6260;
					lengthTwoDimension();
					}
					break;
				}
				State = 6266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,934,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6263;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6268;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,934,Context);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6269;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (FLOAT - 205)) | (1L << (FLOAT4 - 205)) | (1L << (FLOAT8 - 205)) | (1L << (DECIMAL - 205)) | (1L << (DEC - 205)) | (1L << (NUMERIC - 205)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
				case 1:
					{
					State = 6270;
					lengthTwoOptionalDimension();
					}
					break;
				}
				State = 6276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,936,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6273;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6278;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,936,Context);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6279;
				((SimpleDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TINYBLOB - 211)) | (1L << (MEDIUMBLOB - 211)) | (1L << (LONGBLOB - 211)) | (1L << (SERIAL - 211)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6280;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (TIME - 212)) | (1L << (TIMESTAMP - 212)) | (1L << (DATETIME - 212)) | (1L << (YEAR - 212)) | (1L << (BINARY - 212)) | (1L << (VARBINARY - 212)) | (1L << (BLOB - 212)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,937,Context) ) {
				case 1:
					{
					State = 6281;
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6284;
				((CollectionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6285;
				collectionOptions();
				State = 6287;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
				case 1:
					{
					State = 6286;
					Match(BINARY);
					}
					break;
				}
				State = 6292;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
				case 1:
					{
					State = 6289;
					charSet();
					State = 6290;
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6294;
				((SpatialDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || ((((_la - 780)) & ~0x3f) == 0 && ((1L << (_la - 780)) & ((1L << (GEOMETRYCOLLECTION - 780)) | (1L << (GEOMCOLLECTION - 780)) | (1L << (GEOMETRY - 780)) | (1L << (LINESTRING - 780)) | (1L << (MULTILINESTRING - 780)) | (1L << (MULTIPOINT - 780)) | (1L << (MULTIPOLYGON - 780)) | (1L << (POINT - 780)) | (1L << (POLYGON - 780)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6295;
				((LongVarcharDataTypeContext)_localctx).typeName = Match(LONG);
				State = 6297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARCHAR) {
					{
					State = 6296;
					Match(VARCHAR);
					}
				}

				State = 6300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
				case 1:
					{
					State = 6299;
					Match(BINARY);
					}
					break;
				}
				State = 6305;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
				case 1:
					{
					State = 6302;
					charSet();
					State = 6303;
					charsetName();
					}
					break;
				}
				State = 6309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
				case 1:
					{
					State = 6307;
					Match(COLLATE);
					State = 6308;
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6311;
				Match(LONG);
				State = 6312;
				Match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollectionOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollectionOptions(this);
		}
	}

	[RuleVersion(0)]
	public CollectionOptionsContext collectionOptions() {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(Context, State);
		EnterRule(_localctx, 580, RULE_collectionOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6315;
			Match(LR_BRACKET);
			State = 6316;
			Match(STRING_LITERAL);
			State = 6321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6317;
				Match(COMMA);
				State = 6318;
				Match(STRING_LITERAL);
				}
				}
				State = 6323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6324;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertedDataTypeContext : ParserRuleContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(MySqlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConvertedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConvertedDataType(this);
		}
	}

	[RuleVersion(0)]
	public ConvertedDataTypeContext convertedDataType() {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(Context, State);
		EnterRule(_localctx, 582, RULE_convertedDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6348;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				State = 6326;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6327;
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				State = 6330;
				_localctx.typeName = Match(CHAR);
				State = 6332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6331;
					lengthOneDimension();
					}
				}

				State = 6337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					State = 6334;
					charSet();
					State = 6335;
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				State = 6339;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INT - 194)) | (1L << (INTEGER - 194)) | (1L << (DATE - 194)) | (1L << (TIME - 194)) | (1L << (DATETIME - 194)))) != 0) || _la==JSON) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				{
				State = 6340;
				_localctx.typeName = Match(DECIMAL);
				State = 6342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6341;
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				State = 6344;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 6345;
					Match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 6350;
				Match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthOneDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthOneDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthOneDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthOneDimension(this);
		}
	}

	[RuleVersion(0)]
	public LengthOneDimensionContext lengthOneDimension() {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(Context, State);
		EnterRule(_localctx, 584, RULE_lengthOneDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6353;
			Match(LR_BRACKET);
			State = 6354;
			decimalLiteral();
			State = 6355;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoDimension(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoDimensionContext lengthTwoDimension() {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(Context, State);
		EnterRule(_localctx, 586, RULE_lengthTwoDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6357;
			Match(LR_BRACKET);
			State = 6358;
			decimalLiteral();
			State = 6359;
			Match(COMMA);
			State = 6360;
			decimalLiteral();
			State = 6361;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoOptionalDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoOptionalDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoOptionalDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoOptionalDimension(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(Context, State);
		EnterRule(_localctx, 588, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6363;
			Match(LR_BRACKET);
			State = 6364;
			decimalLiteral();
			State = 6367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6365;
				Match(COMMA);
				State = 6366;
				decimalLiteral();
				}
			}

			State = 6369;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uidList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUidList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUidList(this);
		}
	}

	[RuleVersion(0)]
	public UidListContext uidList() {
		UidListContext _localctx = new UidListContext(Context, State);
		EnterRule(_localctx, 590, RULE_uidList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6371;
			uid();
			State = 6376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,954,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6372;
					Match(COMMA);
					State = 6373;
					uid();
					}
					} 
				}
				State = 6378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,954,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTables(this);
		}
	}

	[RuleVersion(0)]
	public TablesContext tables() {
		TablesContext _localctx = new TablesContext(Context, State);
		EnterRule(_localctx, 592, RULE_tables);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6379;
			tableName();
			State = 6384;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,955,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6380;
					Match(COMMA);
					State = 6381;
					tableName();
					}
					} 
				}
				State = 6386;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,955,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext[] indexColumnName() {
			return GetRuleContexts<IndexColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext indexColumnName(int i) {
			return GetRuleContext<IndexColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnNames(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNamesContext indexColumnNames() {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(Context, State);
		EnterRule(_localctx, 594, RULE_indexColumnNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6387;
			Match(LR_BRACKET);
			State = 6388;
			indexColumnName();
			State = 6393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6389;
				Match(COMMA);
				State = 6390;
				indexColumnName();
				}
				}
				State = 6395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6396;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 596, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6398;
			expression(0);
			State = 6403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6399;
				Match(COMMA);
				State = 6400;
				expression(0);
				}
				}
				State = 6405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsWithDefaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext[] expressionOrDefault() {
			return GetRuleContexts<ExpressionOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return GetRuleContext<ExpressionOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsWithDefaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionsWithDefaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionsWithDefaults(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsWithDefaultsContext expressionsWithDefaults() {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(Context, State);
		EnterRule(_localctx, 598, RULE_expressionsWithDefaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6406;
			expressionOrDefault();
			State = 6411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6407;
				Match(COMMA);
				State = 6408;
				expressionOrDefault();
				}
				}
				State = 6413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 600, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6414;
			constant();
			State = 6419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6415;
				Match(COMMA);
				State = 6416;
				constant();
				}
				}
				State = 6421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MySqlParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStrings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleStrings(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStringsContext simpleStrings() {
		SimpleStringsContext _localctx = new SimpleStringsContext(Context, State);
		EnterRule(_localctx, 602, RULE_simpleStrings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6422;
			Match(STRING_LITERAL);
			State = 6427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6423;
				Match(COMMA);
				State = 6424;
				Match(STRING_LITERAL);
				}
				}
				State = 6429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(MySqlParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(MySqlParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserVariables(this);
		}
	}

	[RuleVersion(0)]
	public UserVariablesContext userVariables() {
		UserVariablesContext _localctx = new UserVariablesContext(Context, State);
		EnterRule(_localctx, 604, RULE_userVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6430;
			Match(LOCAL_ID);
			State = 6435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6431;
				Match(COMMA);
				State = 6432;
				Match(LOCAL_ID);
				}
				}
				State = 6437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext[] currentTimestamp() {
			return GetRuleContexts<CurrentTimestampContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp(int i) {
			return GetRuleContext<CurrentTimestampContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTVAL() { return GetToken(MySqlParser.LASTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTVAL() { return GetToken(MySqlParser.NEXTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUS() { return GetToken(MySqlParser.PREVIOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 606, RULE_defaultValue);
		int _la;
		try {
			State = 6473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,964,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6438;
				Match(NULL_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6439;
				Match(CAST);
				State = 6440;
				Match(LR_BRACKET);
				State = 6441;
				expression(0);
				State = 6442;
				Match(AS);
				State = 6443;
				convertedDataType();
				State = 6444;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6447;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,962,Context) ) {
				case 1:
					{
					State = 6446;
					unaryOperator();
					}
					break;
				}
				State = 6449;
				constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6450;
				currentTimestamp();
				State = 6454;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
				case 1:
					{
					State = 6451;
					Match(ON);
					State = 6452;
					Match(UPDATE);
					State = 6453;
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6456;
				Match(LR_BRACKET);
				State = 6457;
				expression(0);
				State = 6458;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6460;
				_la = TokenStream.LA(1);
				if ( !(_la==LASTVAL || _la==NEXTVAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6461;
				Match(LR_BRACKET);
				State = 6462;
				fullId();
				State = 6463;
				Match(RR_BRACKET);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6465;
				Match(LR_BRACKET);
				State = 6466;
				_la = TokenStream.LA(1);
				if ( !(_la==NEXT || _la==PREVIOUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6467;
				Match(VALUE);
				State = 6468;
				Match(FOR);
				State = 6469;
				fullId();
				State = 6470;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6472;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentTimestampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MySqlParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MySqlParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentTimestamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCurrentTimestamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCurrentTimestamp(this);
		}
	}

	[RuleVersion(0)]
	public CurrentTimestampContext currentTimestamp() {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(Context, State);
		EnterRule(_localctx, 608, RULE_currentTimestamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case LOCALTIMESTAMP:
				{
				State = 6475;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (CURRENT_TIMESTAMP - 306)) | (1L << (LOCALTIME - 306)) | (1L << (CURDATE - 306)) | (1L << (CURTIME - 306)) | (1L << (LOCALTIMESTAMP - 306)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6481;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,966,Context) ) {
				case 1:
					{
					State = 6476;
					Match(LR_BRACKET);
					State = 6478;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 1125)) & ~0x3f) == 0 && ((1L << (_la - 1125)) & ((1L << (ZERO_DECIMAL - 1125)) | (1L << (ONE_DECIMAL - 1125)) | (1L << (TWO_DECIMAL - 1125)) | (1L << (DECIMAL_LITERAL - 1125)) | (1L << (REAL_LITERAL - 1125)))) != 0)) {
						{
						State = 6477;
						decimalLiteral();
						}
					}

					State = 6480;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				State = 6483;
				Match(NOW);
				State = 6484;
				Match(LR_BRACKET);
				State = 6486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1125)) & ~0x3f) == 0 && ((1L << (_la - 1125)) & ((1L << (ZERO_DECIMAL - 1125)) | (1L << (ONE_DECIMAL - 1125)) | (1L << (TWO_DECIMAL - 1125)) | (1L << (DECIMAL_LITERAL - 1125)) | (1L << (REAL_LITERAL - 1125)))) != 0)) {
					{
					State = 6485;
					decimalLiteral();
					}
				}

				State = 6488;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrDefault(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrDefaultContext expressionOrDefault() {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(Context, State);
		EnterRule(_localctx, 610, RULE_expressionOrDefault);
		try {
			State = 6493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,969,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6491;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6492;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 612, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6495;
			Match(IF);
			State = 6496;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 614, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6498;
			Match(IF);
			State = 6499;
			Match(NOT);
			State = 6500;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitNowaitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MySqlParser.NOWAIT, 0); }
		public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitNowaitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWaitNowaitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWaitNowaitClause(this);
		}
	}

	[RuleVersion(0)]
	public WaitNowaitClauseContext waitNowaitClause() {
		WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(Context, State);
		EnterRule(_localctx, 616, RULE_waitNowaitClause);
		try {
			State = 6505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6502;
				Match(WAIT);
				State = 6503;
				decimalLiteral();
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6504;
				Match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(MySqlParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(MySqlParser.LOCKED, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockOption(this);
		}
	}

	[RuleVersion(0)]
	public LockOptionContext lockOption() {
		LockOptionContext _localctx = new LockOptionContext(Context, State);
		EnterRule(_localctx, 618, RULE_lockOption);
		try {
			State = 6510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6507;
				waitNowaitClause();
				}
				break;
			case SKIP_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6508;
				Match(SKIP_);
				State = 6509;
				Match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecificFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificFunctionContext specificFunction() {
			return GetRuleContext<SpecificFunctionContext>(0);
		}
		public SpecificFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpecificFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpecificFunctionCall(this);
		}
	}
	public partial class PasswordFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public PasswordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionCall(this);
		}
	}
	public partial class UdfFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public UdfFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfFunctionCall(this);
		}
	}
	public partial class NonAggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return GetRuleContext<NonAggregateWindowedFunctionContext>(0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNonAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNonAggregateFunctionCall(this);
		}
	}
	public partial class AggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return GetRuleContext<AggregateWindowedFunctionContext>(0);
		}
		public AggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateFunctionCall(this);
		}
	}
	public partial class ScalarFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ScalarFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 620, RULE_functionCall);
		try {
			State = 6530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6512;
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6513;
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6514;
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6515;
				scalarFunctionName();
				State = 6516;
				Match(LR_BRACKET);
				State = 6518;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
				case 1:
					{
					State = 6517;
					functionArgs();
					}
					break;
				}
				State = 6520;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6522;
				fullId();
				State = 6523;
				Match(LR_BRACKET);
				State = 6525;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
				case 1:
					{
					State = 6524;
					functionArgs();
					}
					break;
				}
				State = 6527;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6529;
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificFunctionContext : ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificFunction; } }
	 
		public SpecificFunctionContext() { }
		public virtual void CopyFrom(SpecificFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPositionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPositionFunctionCall(this);
		}
	}
	public partial class TrimFunctionCallContext : SpecificFunctionContext {
		public IToken positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(MySqlParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(MySqlParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(MySqlParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTrimFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTrimFunctionCall(this);
		}
	}
	public partial class JsonValueFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(MySqlParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MySqlParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(MySqlParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(MySqlParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(MySqlParser.ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NULL_LITERAL() { return GetTokens(MySqlParser.NULL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL(int i) {
			return GetToken(MySqlParser.NULL_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MySqlParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext[] defaultValue() {
			return GetRuleContexts<DefaultValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue(int i) {
			return GetRuleContext<DefaultValueContext>(i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonValueFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonValueFunctionCall(this);
		}
	}
	public partial class CaseFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseFunctionCall(this);
		}
	}
	public partial class ExtractFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(MySqlParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExtractFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExtractFunctionCall(this);
		}
	}
	public partial class DataTypeFunctionCallContext : SpecificFunctionContext {
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeFunctionCall(this);
		}
	}
	public partial class ValuesFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValuesFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValuesFunctionCall(this);
		}
	}
	public partial class CaseExpressionFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseExpressionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseExpressionFunctionCall(this);
		}
	}
	public partial class SimpleFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleFunctionCall(this);
		}
	}
	public partial class CharFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharFunctionCall(this);
		}
	}
	public partial class WeightFunctionCallContext : SpecificFunctionContext {
		public IToken stringFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MySqlParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MySqlParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelsInWeightStringContext levelsInWeightString() {
			return GetRuleContext<LevelsInWeightStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWeightFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWeightFunctionCall(this);
		}
	}
	public partial class GetFormatFunctionCallContext : SpecificFunctionContext {
		public IToken datetimeFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGetFormatFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGetFormatFunctionCall(this);
		}
	}
	public partial class SubstrFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubstrFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubstrFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public SpecificFunctionContext specificFunction() {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(Context, State);
		EnterRule(_localctx, 622, RULE_specificFunction);
		int _la;
		try {
			State = 6724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6532;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (CURRENT_DATE - 304)) | (1L << (CURRENT_TIME - 304)) | (1L << (CURRENT_TIMESTAMP - 304)) | (1L << (LOCALTIME - 304)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6535;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,975,Context) ) {
				case 1:
					{
					State = 6533;
					Match(LR_BRACKET);
					State = 6534;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6537;
				Match(CONVERT);
				State = 6538;
				Match(LR_BRACKET);
				State = 6539;
				expression(0);
				State = 6540;
				((DataTypeFunctionCallContext)_localctx).separator = Match(COMMA);
				State = 6541;
				convertedDataType();
				State = 6542;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6544;
				Match(CONVERT);
				State = 6545;
				Match(LR_BRACKET);
				State = 6546;
				expression(0);
				State = 6547;
				Match(USING);
				State = 6548;
				charsetName();
				State = 6549;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6551;
				Match(CAST);
				State = 6552;
				Match(LR_BRACKET);
				State = 6553;
				expression(0);
				State = 6554;
				Match(AS);
				State = 6555;
				convertedDataType();
				State = 6556;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6558;
				Match(VALUES);
				State = 6559;
				Match(LR_BRACKET);
				State = 6560;
				fullColumnName();
				State = 6561;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6563;
				Match(CASE);
				State = 6564;
				expression(0);
				State = 6566;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6565;
					caseFuncAlternative();
					}
					}
					State = 6568;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6570;
					Match(ELSE);
					State = 6571;
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6574;
				Match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6576;
				Match(CASE);
				State = 6578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6577;
					caseFuncAlternative();
					}
					}
					State = 6580;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 6584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 6582;
					Match(ELSE);
					State = 6583;
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 6586;
				Match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6588;
				Match(CHAR);
				State = 6589;
				Match(LR_BRACKET);
				State = 6590;
				functionArgs();
				State = 6593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 6591;
					Match(USING);
					State = 6592;
					charsetName();
					}
				}

				State = 6595;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6597;
				Match(POSITION);
				State = 6598;
				Match(LR_BRACKET);
				State = 6601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
				case 1:
					{
					State = 6599;
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6600;
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				State = 6603;
				Match(IN);
				State = 6606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
				case 1:
					{
					State = 6604;
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6605;
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				State = 6608;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6610;
				_la = TokenStream.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6611;
				Match(LR_BRACKET);
				State = 6614;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,983,Context) ) {
				case 1:
					{
					State = 6612;
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6613;
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6616;
				Match(FROM);
				State = 6619;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,984,Context) ) {
				case 1:
					{
					State = 6617;
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					State = 6618;
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6621;
					Match(FOR);
					State = 6624;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
					case 1:
						{
						State = 6622;
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						State = 6623;
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				State = 6628;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6630;
				Match(TRIM);
				State = 6631;
				Match(LR_BRACKET);
				State = 6632;
				((TrimFunctionCallContext)_localctx).positioinForm = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6635;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,987,Context) ) {
				case 1:
					{
					State = 6633;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6634;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6637;
				Match(FROM);
				State = 6640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,988,Context) ) {
				case 1:
					{
					State = 6638;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6639;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6642;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6644;
				Match(TRIM);
				State = 6645;
				Match(LR_BRACKET);
				State = 6648;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,989,Context) ) {
				case 1:
					{
					State = 6646;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6647;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6650;
				Match(FROM);
				State = 6653;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,990,Context) ) {
				case 1:
					{
					State = 6651;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6652;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 6655;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6657;
				Match(WEIGHT_STRING);
				State = 6658;
				Match(LR_BRACKET);
				State = 6661;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
				case 1:
					{
					State = 6659;
					stringLiteral();
					}
					break;
				case 2:
					{
					State = 6660;
					expression(0);
					}
					break;
				}
				State = 6669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 6663;
					Match(AS);
					State = 6664;
					((WeightFunctionCallContext)_localctx).stringFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6665;
					Match(LR_BRACKET);
					State = 6666;
					decimalLiteral();
					State = 6667;
					Match(RR_BRACKET);
					}
				}

				State = 6672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEVEL) {
					{
					State = 6671;
					levelsInWeightString();
					}
				}

				State = 6674;
				Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6676;
				Match(EXTRACT);
				State = 6677;
				Match(LR_BRACKET);
				State = 6678;
				intervalType();
				State = 6679;
				Match(FROM);
				State = 6682;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,994,Context) ) {
				case 1:
					{
					State = 6680;
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 6681;
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 6684;
				Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 6686;
				Match(GET_FORMAT);
				State = 6687;
				Match(LR_BRACKET);
				State = 6688;
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (DATETIME - 211)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6689;
				Match(COMMA);
				State = 6690;
				stringLiteral();
				State = 6691;
				Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 6693;
				Match(JSON_VALUE);
				State = 6694;
				Match(LR_BRACKET);
				State = 6695;
				expression(0);
				State = 6696;
				Match(COMMA);
				State = 6697;
				expression(0);
				State = 6700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 6698;
					Match(RETURNING);
					State = 6699;
					convertedDataType();
					}
				}

				State = 6710;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
				case 1:
					{
					State = 6706;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL_LITERAL:
						{
						State = 6702;
						Match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						State = 6703;
						Match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						State = 6704;
						Match(DEFAULT);
						State = 6705;
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6708;
					Match(ON);
					State = 6709;
					Match(EMPTY);
					}
					break;
				}
				State = 6720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					State = 6716;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NULL_LITERAL:
						{
						State = 6712;
						Match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						State = 6713;
						Match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						State = 6714;
						Match(DEFAULT);
						State = 6715;
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6718;
					Match(ON);
					State = 6719;
					Match(ERROR);
					}
				}

				State = 6722;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseFuncAlternativeContext : ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseFuncAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseFuncAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseFuncAlternative(this);
		}
	}

	[RuleVersion(0)]
	public CaseFuncAlternativeContext caseFuncAlternative() {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(Context, State);
		EnterRule(_localctx, 624, RULE_caseFuncAlternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6726;
			Match(WHEN);
			State = 6727;
			_localctx.condition = functionArg();
			State = 6728;
			Match(THEN);
			State = 6729;
			_localctx.consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelsInWeightStringContext : ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelsInWeightString; } }
	 
		public LevelsInWeightStringContext() { }
		public virtual void CopyFrom(LevelsInWeightStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LevelWeightRangeContext : LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightRange(this);
		}
	}
	public partial class LevelWeightListContext : LevelsInWeightStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext[] levelInWeightListElement() {
			return GetRuleContexts<LevelInWeightListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return GetRuleContext<LevelInWeightListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightList(this);
		}
	}

	[RuleVersion(0)]
	public LevelsInWeightStringContext levelsInWeightString() {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(Context, State);
		EnterRule(_localctx, 626, RULE_levelsInWeightString);
		int _la;
		try {
			State = 6745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6731;
				Match(LEVEL);
				State = 6732;
				levelInWeightListElement();
				State = 6737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6733;
					Match(COMMA);
					State = 6734;
					levelInWeightListElement();
					}
					}
					State = 6739;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6740;
				Match(LEVEL);
				State = 6741;
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				State = 6742;
				Match(MINUS);
				State = 6743;
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelInWeightListElementContext : ParserRuleContext {
		public IToken orderType;
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelInWeightListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLevelInWeightListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLevelInWeightListElement(this);
		}
	}

	[RuleVersion(0)]
	public LevelInWeightListElementContext levelInWeightListElement() {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(Context, State);
		EnterRule(_localctx, 628, RULE_levelInWeightListElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6747;
			decimalLiteral();
			State = 6749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				State = 6748;
				_localctx.orderType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					_localctx.orderType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateWindowedFunctionContext : ParserRuleContext {
		public IToken aggregator;
		public IToken starArg;
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(MySqlParser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAggregateWindowedFunction(this);
		}
	}

	[RuleVersion(0)]
	public AggregateWindowedFunctionContext aggregateWindowedFunction() {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 630, RULE_aggregateWindowedFunction);
		int _la;
		try {
			State = 6810;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6751;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (AVG - 277)) | (1L << (MAX - 277)) | (1L << (MIN - 277)) | (1L << (SUM - 277)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6752;
				Match(LR_BRACKET);
				State = 6754;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
				case 1:
					{
					State = 6753;
					_localctx.aggregator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						_localctx.aggregator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6756;
				functionArg();
				State = 6757;
				Match(RR_BRACKET);
				State = 6759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
				case 1:
					{
					State = 6758;
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6761;
				Match(COUNT);
				State = 6762;
				Match(LR_BRACKET);
				State = 6770;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1007,Context) ) {
				case 1:
					{
					State = 6763;
					_localctx.starArg = Match(STAR);
					}
					break;
				case 2:
					{
					State = 6765;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
					case 1:
						{
						State = 6764;
						_localctx.aggregator = Match(ALL);
						}
						break;
					}
					State = 6767;
					functionArg();
					}
					break;
				case 3:
					{
					State = 6768;
					_localctx.aggregator = Match(DISTINCT);
					State = 6769;
					functionArgs();
					}
					break;
				}
				State = 6772;
				Match(RR_BRACKET);
				State = 6774;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1008,Context) ) {
				case 1:
					{
					State = 6773;
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6776;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (BIT_AND - 278)) | (1L << (BIT_OR - 278)) | (1L << (BIT_XOR - 278)) | (1L << (STD - 278)) | (1L << (STDDEV - 278)) | (1L << (STDDEV_POP - 278)) | (1L << (STDDEV_SAMP - 278)) | (1L << (VAR_POP - 278)) | (1L << (VAR_SAMP - 278)) | (1L << (VARIANCE - 278)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6777;
				Match(LR_BRACKET);
				State = 6779;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
				case 1:
					{
					State = 6778;
					_localctx.aggregator = Match(ALL);
					}
					break;
				}
				State = 6781;
				functionArg();
				State = 6782;
				Match(RR_BRACKET);
				State = 6784;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1010,Context) ) {
				case 1:
					{
					State = 6783;
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6786;
				Match(GROUP_CONCAT);
				State = 6787;
				Match(LR_BRACKET);
				State = 6789;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1011,Context) ) {
				case 1:
					{
					State = 6788;
					_localctx.aggregator = Match(DISTINCT);
					}
					break;
				}
				State = 6791;
				functionArgs();
				State = 6802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 6792;
					Match(ORDER);
					State = 6793;
					Match(BY);
					State = 6794;
					orderByExpression();
					State = 6799;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 6795;
						Match(COMMA);
						State = 6796;
						orderByExpression();
						}
						}
						State = 6801;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 6806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 6804;
					Match(SEPARATOR);
					State = 6805;
					_localctx.separator = Match(STRING_LITERAL);
					}
				}

				State = 6808;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAggregateWindowedFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MySqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MySqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MySqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MySqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MySqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MySqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MySqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MySqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MySqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MySqlParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNonAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNonAggregateWindowedFunction(this);
		}
	}

	[RuleVersion(0)]
	public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 632, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			State = 6850;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6812;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6813;
				Match(LR_BRACKET);
				State = 6814;
				expression(0);
				State = 6817;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1016,Context) ) {
				case 1:
					{
					State = 6815;
					Match(COMMA);
					State = 6816;
					decimalLiteral();
					}
					break;
				}
				State = 6821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6819;
					Match(COMMA);
					State = 6820;
					decimalLiteral();
					}
				}

				State = 6823;
				Match(RR_BRACKET);
				State = 6824;
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6826;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6827;
				Match(LR_BRACKET);
				State = 6828;
				expression(0);
				State = 6829;
				Match(RR_BRACKET);
				State = 6830;
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6832;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (CUME_DIST - 282)) | (1L << (DENSE_RANK - 282)) | (1L << (PERCENT_RANK - 282)) | (1L << (RANK - 282)) | (1L << (ROW_NUMBER - 282)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6833;
				Match(LR_BRACKET);
				State = 6834;
				Match(RR_BRACKET);
				State = 6835;
				overClause();
				}
				break;
			case NTH_VALUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6836;
				Match(NTH_VALUE);
				State = 6837;
				Match(LR_BRACKET);
				State = 6838;
				expression(0);
				State = 6839;
				Match(COMMA);
				State = 6840;
				decimalLiteral();
				State = 6841;
				Match(RR_BRACKET);
				State = 6842;
				overClause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6844;
				Match(NTILE);
				State = 6845;
				Match(LR_BRACKET);
				State = 6846;
				decimalLiteral();
				State = 6847;
				Match(RR_BRACKET);
				State = 6848;
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(MySqlParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOverClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOverClause(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(Context, State);
		EnterRule(_localctx, 634, RULE_overClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6852;
			Match(OVER);
			State = 6859;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				State = 6853;
				Match(LR_BRACKET);
				State = 6855;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1019,Context) ) {
				case 1:
					{
					State = 6854;
					windowSpec();
					}
					break;
				}
				State = 6857;
				Match(RR_BRACKET);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IGNORED:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				State = 6858;
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameClauseContext frameClause() {
			return GetRuleContext<FrameClauseContext>(0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 636, RULE_windowSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6862;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1021,Context) ) {
			case 1:
				{
				State = 6861;
				windowName();
				}
				break;
			}
			State = 6865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6864;
				partitionClause();
				}
			}

			State = 6868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 6867;
				orderByClause();
				}
			}

			State = 6871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 6870;
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 638, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6873;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameUnitsContext frameUnits() {
			return GetRuleContext<FrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameExtentContext frameExtent() {
			return GetRuleContext<FrameExtentContext>(0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameClause(this);
		}
	}

	[RuleVersion(0)]
	public FrameClauseContext frameClause() {
		FrameClauseContext _localctx = new FrameClauseContext(Context, State);
		EnterRule(_localctx, 640, RULE_frameClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6875;
			frameUnits();
			State = 6876;
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameUnits(this);
		}
	}

	[RuleVersion(0)]
	public FrameUnitsContext frameUnits() {
		FrameUnitsContext _localctx = new FrameUnitsContext(Context, State);
		EnterRule(_localctx, 642, RULE_frameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6878;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameBetweenContext frameBetween() {
			return GetRuleContext<FrameBetweenContext>(0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameExtent(this);
		}
	}

	[RuleVersion(0)]
	public FrameExtentContext frameExtent() {
		FrameExtentContext _localctx = new FrameExtentContext(Context, State);
		EnterRule(_localctx, 644, RULE_frameExtent);
		try {
			State = 6882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1025,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6880;
				frameRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6881;
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext[] frameRange() {
			return GetRuleContexts<FrameRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange(int i) {
			return GetRuleContext<FrameRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameBetween(this);
		}
	}

	[RuleVersion(0)]
	public FrameBetweenContext frameBetween() {
		FrameBetweenContext _localctx = new FrameBetweenContext(Context, State);
		EnterRule(_localctx, 646, RULE_frameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6884;
			Match(BETWEEN);
			State = 6885;
			frameRange();
			State = 6886;
			Match(AND);
			State = 6887;
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MySqlParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(MySqlParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(MySqlParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 648, RULE_frameRange);
		int _la;
		try {
			State = 6896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1026,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6889;
				Match(CURRENT);
				State = 6890;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6891;
				Match(UNBOUNDED);
				State = 6892;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6893;
				expression(0);
				State = 6894;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 650, RULE_partitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6898;
			Match(PARTITION);
			State = 6899;
			Match(BY);
			State = 6900;
			expression(0);
			State = 6905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6901;
				Match(COMMA);
				State = 6902;
				expression(0);
				}
				}
				State = 6907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarFunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MySqlParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MySqlParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD() { return GetToken(MySqlParser.DATE_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB() { return GetToken(MySqlParser.DATE_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE() { return GetToken(MySqlParser.SYSDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE() { return GetToken(MySqlParser.UTC_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME() { return GetToken(MySqlParser.UTC_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP() { return GetToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarFunctionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public ScalarFunctionNameContext scalarFunctionName() {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(Context, State);
		EnterRule(_localctx, 652, RULE_scalarFunctionName);
		try {
			State = 6931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6908;
				functionNameBase();
				}
				break;
			case ASCII:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6909;
				Match(ASCII);
				}
				break;
			case CURDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6910;
				Match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6911;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6912;
				Match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6913;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6914;
				Match(CURTIME);
				}
				break;
			case DATE_ADD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6915;
				Match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6916;
				Match(DATE_SUB);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6917;
				Match(IF);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6918;
				Match(INSERT);
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6919;
				Match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6920;
				Match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6921;
				Match(MID);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6922;
				Match(NOW);
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6923;
				Match(REPLACE);
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6924;
				Match(SUBSTR);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6925;
				Match(SUBSTRING);
				}
				break;
			case SYSDATE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6926;
				Match(SYSDATE);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6927;
				Match(TRIM);
				}
				break;
			case UTC_DATE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6928;
				Match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6929;
				Match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6930;
				Match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordFunctionClauseContext : ParserRuleContext {
		public IToken functionName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordFunctionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionClause(this);
		}
	}

	[RuleVersion(0)]
	public PasswordFunctionClauseContext passwordFunctionClause() {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(Context, State);
		EnterRule(_localctx, 654, RULE_passwordFunctionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6933;
			_localctx.functionName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				_localctx.functionName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6934;
			Match(LR_BRACKET);
			State = 6935;
			functionArg();
			State = 6936;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgs(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 656, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1029,Context) ) {
			case 1:
				{
				State = 6938;
				constant();
				}
				break;
			case 2:
				{
				State = 6939;
				fullColumnName();
				}
				break;
			case 3:
				{
				State = 6940;
				functionCall();
				}
				break;
			case 4:
				{
				State = 6941;
				expression(0);
				}
				break;
			}
			State = 6953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6944;
				Match(COMMA);
				State = 6949;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1030,Context) ) {
				case 1:
					{
					State = 6945;
					constant();
					}
					break;
				case 2:
					{
					State = 6946;
					fullColumnName();
					}
					break;
				case 3:
					{
					State = 6947;
					functionCall();
					}
					break;
				case 4:
					{
					State = 6948;
					expression(0);
					}
					break;
				}
				}
				}
				State = 6955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 658, RULE_functionArg);
		try {
			State = 6960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6956;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6957;
				fullColumnName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6958;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6959;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public IToken testValue;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public IToken notOperator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
	}
	public partial class PredicateExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 660;
		EnterRecursionRule(_localctx, 660, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1034,Context) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6963;
				((NotExpressionContext)_localctx).notOperator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6964;
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6965;
				predicate(0);
				State = 6966;
				Match(IS);
				State = 6968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6967;
					Match(NOT);
					}
				}

				State = 6970;
				((IsExpressionContext)_localctx).testValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6972;
				predicate(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6981;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1035,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 6975;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 6976;
					logicalOperator();
					State = 6977;
					expression(4);
					}
					} 
				}
				State = 6983;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1035,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SoundsLikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSoundsLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSoundsLikePredicate(this);
		}
	}
	public partial class ExpressionAtomPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExpressionAtomPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExpressionAtomPredicate(this);
		}
	}
	public partial class SubqueryComparisonPredicateContext : PredicateContext {
		public IToken quantifier;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryComparisonPredicate(this);
		}
	}
	public partial class JsonMemberOfPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonMemberOfPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonMemberOfPredicate(this);
		}
	}
	public partial class BinaryComparisonPredicateContext : PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public BinaryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryComparisonPredicate(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInPredicate(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBetweenPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBetweenPredicate(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsNullPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsNullPredicate(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLikePredicate(this);
		}
	}
	public partial class RegexpPredicateContext : PredicateContext {
		public IToken regex;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(MySqlParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(MySqlParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRegexpPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRegexpPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 662;
		EnterRecursionRule(_localctx, 662, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 6987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1036,Context) ) {
			case 1:
				{
				State = 6985;
				Match(LOCAL_ID);
				State = 6986;
				Match(VAR_ASSIGN);
				}
				break;
			}
			State = 6989;
			expressionAtom(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7055;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1044,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 7053;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6991;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 6992;
						comparisonOperator();
						State = 6993;
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 6995;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 6997;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6996;
							Match(NOT);
							}
						}

						State = 6999;
						Match(BETWEEN);
						State = 7000;
						predicate(0);
						State = 7001;
						Match(AND);
						State = 7002;
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7004;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 7005;
						Match(SOUNDS);
						State = 7006;
						Match(LIKE);
						State = 7007;
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7008;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 7010;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7009;
							Match(NOT);
							}
						}

						State = 7012;
						((RegexpPredicateContext)_localctx).regex = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7013;
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7014;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 7016;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7015;
							Match(NOT);
							}
						}

						State = 7018;
						Match(IN);
						State = 7019;
						Match(LR_BRACKET);
						State = 7022;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1040,Context) ) {
						case 1:
							{
							State = 7020;
							selectStatement();
							}
							break;
						case 2:
							{
							State = 7021;
							expressions();
							}
							break;
						}
						State = 7024;
						Match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7026;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 7027;
						Match(IS);
						State = 7028;
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7029;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 7030;
						comparisonOperator();
						State = 7031;
						((SubqueryComparisonPredicateContext)_localctx).quantifier = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7032;
						Match(LR_BRACKET);
						State = 7033;
						selectStatement();
						State = 7034;
						Match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7036;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 7038;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7037;
							Match(NOT);
							}
						}

						State = 7040;
						Match(LIKE);
						State = 7041;
						predicate(0);
						State = 7044;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1042,Context) ) {
						case 1:
							{
							State = 7042;
							Match(ESCAPE);
							State = 7043;
							Match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7046;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 7047;
						Match(MEMBER);
						State = 7048;
						Match(OF);
						State = 7049;
						Match(LR_BRACKET);
						State = 7050;
						predicate(0);
						State = 7051;
						Match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				State = 7057;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1044,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionAtomContext : ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionAtom; } }
	 
		public ExpressionAtomContext() { }
		public virtual void CopyFrom(ExpressionAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionAtom(this);
		}
	}
	public partial class CollateExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollateExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollateExpressionAtom(this);
		}
	}
	public partial class MysqlVariableExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariableExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariableExpressionAtom(this);
		}
	}
	public partial class NestedExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNestedExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNestedExpressionAtom(this);
		}
	}
	public partial class NestedRowExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNestedRowExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNestedRowExpressionAtom(this);
		}
	}
	public partial class MathExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MathOperatorContext mathOperator() {
			return GetRuleContext<MathOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMathExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMathExpressionAtom(this);
		}
	}
	public partial class ExistsExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExistsExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExistsExpressionAtom(this);
		}
	}
	public partial class IntervalExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpressionAtom(this);
		}
	}
	public partial class JsonExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonExpressionAtom(this);
		}
	}
	public partial class SubqueryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubqueryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubqueryExpressionAtom(this);
		}
	}
	public partial class ConstantExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstantExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstantExpressionAtom(this);
		}
	}
	public partial class FunctionCallExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpressionAtom(this);
		}
	}
	public partial class BinaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpressionAtom(this);
		}
	}
	public partial class FullColumnNameExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFullColumnNameExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFullColumnNameExpressionAtom(this);
		}
	}
	public partial class BitExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitExpressionAtom(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionAtomContext expressionAtom() {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionAtomContext _localctx = new ExpressionAtomContext(Context, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 664;
		EnterRecursionRule(_localctx, 664, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1047,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 7059;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7060;
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7061;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7062;
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7063;
				unaryOperator();
				State = 7064;
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7066;
				Match(BINARY);
				State = 7067;
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7068;
				Match(LR_BRACKET);
				State = 7069;
				expression(0);
				State = 7074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7070;
					Match(COMMA);
					State = 7071;
					expression(0);
					}
					}
					State = 7076;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7077;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7079;
				Match(ROW);
				State = 7080;
				Match(LR_BRACKET);
				State = 7081;
				expression(0);
				State = 7084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7082;
					Match(COMMA);
					State = 7083;
					expression(0);
					}
					}
					State = 7086;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 7088;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7090;
				Match(EXISTS);
				State = 7091;
				Match(LR_BRACKET);
				State = 7092;
				selectStatement();
				State = 7093;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7095;
				Match(LR_BRACKET);
				State = 7096;
				selectStatement();
				State = 7097;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7099;
				Match(INTERVAL);
				State = 7100;
				expression(0);
				State = 7101;
				intervalType();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1049,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 7120;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1048,Context) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7105;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 7106;
						bitOperator();
						State = 7107;
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7109;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 7110;
						mathOperator();
						State = 7111;
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7113;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 7114;
						jsonOperator();
						State = 7115;
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7117;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 7118;
						Match(COLLATE);
						State = 7119;
						collationName();
						}
						break;
					}
					} 
				}
				State = 7124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1049,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT_OP() { return GetToken(MySqlParser.BIT_NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 666, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7125;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || ((((_la - 1107)) & ~0x3f) == 0 && ((1L << (_la - 1107)) & ((1L << (PLUS - 1107)) | (1L << (MINUS - 1107)) | (1L << (EXCLAMATION_SYMBOL - 1107)) | (1L << (BIT_NOT_OP - 1107)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 668, RULE_comparisonOperator);
		try {
			State = 7141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1050,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7127;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7128;
				Match(GREATER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7129;
				Match(LESS_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7130;
				Match(LESS_SYMBOL);
				State = 7131;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7132;
				Match(GREATER_SYMBOL);
				State = 7133;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7134;
				Match(LESS_SYMBOL);
				State = 7135;
				Match(GREATER_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7136;
				Match(EXCLAMATION_SYMBOL);
				State = 7137;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7138;
				Match(LESS_SYMBOL);
				State = 7139;
				Match(EQUAL_SYMBOL);
				State = 7140;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_AND_OP() { return GetTokens(MySqlParser.BIT_AND_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP(int i) {
			return GetToken(MySqlParser.BIT_AND_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(MySqlParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR_OP() { return GetTokens(MySqlParser.BIT_OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP(int i) {
			return GetToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 670, RULE_logicalOperator);
		try {
			State = 7150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7143;
				Match(AND);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7144;
				Match(BIT_AND_OP);
				State = 7145;
				Match(BIT_AND_OP);
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7146;
				Match(XOR);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7147;
				Match(OR);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7148;
				Match(BIT_OR_OP);
				State = 7149;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_SYMBOL() { return GetTokens(MySqlParser.LESS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL(int i) {
			return GetToken(MySqlParser.LESS_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP() { return GetToken(MySqlParser.BIT_AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_OP() { return GetToken(MySqlParser.BIT_XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP() { return GetToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitOperator(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 672, RULE_bitOperator);
		try {
			State = 7159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7152;
				Match(LESS_SYMBOL);
				State = 7153;
				Match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7154;
				Match(GREATER_SYMBOL);
				State = 7155;
				Match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7156;
				Match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7157;
				Match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7158;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MySqlParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MySqlParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MySqlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMathOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMathOperator(this);
		}
	}

	[RuleVersion(0)]
	public MathOperatorContext mathOperator() {
		MathOperatorContext _localctx = new MathOperatorContext(Context, State);
		EnterRule(_localctx, 674, RULE_mathOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7161;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1104)) & ~0x3f) == 0 && ((1L << (_la - 1104)) & ((1L << (STAR - 1104)) | (1L << (DIVIDE - 1104)) | (1L << (MODULE - 1104)) | (1L << (PLUS - 1104)) | (1L << (MINUS - 1104)) | (1L << (DIV - 1104)) | (1L << (MOD - 1104)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 676, RULE_jsonOperator);
		try {
			State = 7168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1053,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7163;
				Match(MINUS);
				State = 7164;
				Match(GREATER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7165;
				Match(MINUS);
				State = 7166;
				Match(GREATER_SYMBOL);
				State = 7167;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARMSCII8() { return GetToken(MySqlParser.ARMSCII8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIG5() { return GetToken(MySqlParser.BIG5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1250() { return GetToken(MySqlParser.CP1250, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1251() { return GetToken(MySqlParser.CP1251, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1256() { return GetToken(MySqlParser.CP1256, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1257() { return GetToken(MySqlParser.CP1257, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP850() { return GetToken(MySqlParser.CP850, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP852() { return GetToken(MySqlParser.CP852, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP866() { return GetToken(MySqlParser.CP866, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP932() { return GetToken(MySqlParser.CP932, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC8() { return GetToken(MySqlParser.DEC8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCJPMS() { return GetToken(MySqlParser.EUCJPMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCKR() { return GetToken(MySqlParser.EUCKR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB18030() { return GetToken(MySqlParser.GB18030, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB2312() { return GetToken(MySqlParser.GB2312, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GBK() { return GetToken(MySqlParser.GBK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOSTD8() { return GetToken(MySqlParser.GEOSTD8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEK() { return GetToken(MySqlParser.GREEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEBREW() { return GetToken(MySqlParser.HEBREW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HP8() { return GetToken(MySqlParser.HP8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYBCS2() { return GetToken(MySqlParser.KEYBCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8R() { return GetToken(MySqlParser.KOI8R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8U() { return GetToken(MySqlParser.KOI8U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN1() { return GetToken(MySqlParser.LATIN1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN2() { return GetToken(MySqlParser.LATIN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN5() { return GetToken(MySqlParser.LATIN5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN7() { return GetToken(MySqlParser.LATIN7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACCE() { return GetToken(MySqlParser.MACCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACROMAN() { return GetToken(MySqlParser.MACROMAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SJIS() { return GetToken(MySqlParser.SJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWE7() { return GetToken(MySqlParser.SWE7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIS620() { return GetToken(MySqlParser.TIS620, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCS2() { return GetToken(MySqlParser.UCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UJIS() { return GetToken(MySqlParser.UJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16() { return GetToken(MySqlParser.UTF16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16LE() { return GetToken(MySqlParser.UTF16LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF32() { return GetToken(MySqlParser.UTF32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8() { return GetToken(MySqlParser.UTF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB3() { return GetToken(MySqlParser.UTF8MB3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB4() { return GetToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetNameBase(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameBaseContext charsetNameBase() {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(Context, State);
		EnterRule(_localctx, 678, RULE_charsetNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7170;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || ((((_la - 723)) & ~0x3f) == 0 && ((1L << (_la - 723)) & ((1L << (ARMSCII8 - 723)) | (1L << (ASCII - 723)) | (1L << (BIG5 - 723)) | (1L << (CP1250 - 723)) | (1L << (CP1251 - 723)) | (1L << (CP1256 - 723)) | (1L << (CP1257 - 723)) | (1L << (CP850 - 723)) | (1L << (CP852 - 723)) | (1L << (CP866 - 723)) | (1L << (CP932 - 723)) | (1L << (DEC8 - 723)) | (1L << (EUCJPMS - 723)) | (1L << (EUCKR - 723)) | (1L << (GB18030 - 723)) | (1L << (GB2312 - 723)) | (1L << (GBK - 723)) | (1L << (GEOSTD8 - 723)) | (1L << (GREEK - 723)) | (1L << (HEBREW - 723)) | (1L << (HP8 - 723)) | (1L << (KEYBCS2 - 723)) | (1L << (KOI8R - 723)) | (1L << (KOI8U - 723)) | (1L << (LATIN1 - 723)) | (1L << (LATIN2 - 723)) | (1L << (LATIN5 - 723)) | (1L << (LATIN7 - 723)) | (1L << (MACCE - 723)) | (1L << (MACROMAN - 723)) | (1L << (SJIS - 723)) | (1L << (SWE7 - 723)) | (1L << (TIS620 - 723)) | (1L << (UCS2 - 723)) | (1L << (UJIS - 723)) | (1L << (UTF16 - 723)) | (1L << (UTF16LE - 723)) | (1L << (UTF32 - 723)) | (1L << (UTF8 - 723)) | (1L << (UTF8MB3 - 723)) | (1L << (UTF8MB4 - 723)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevelBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevelBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevelBase(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelBaseContext transactionLevelBase() {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(Context, State);
		EnterRule(_localctx, 680, RULE_transactionLevelBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7172;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (REPEATABLE - 776)) | (1L << (COMMITTED - 776)) | (1L << (UNCOMMITTED - 776)) | (1L << (SERIALIZABLE - 776)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegesBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilegesBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilegesBase(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesBaseContext privilegesBase() {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(Context, State);
		EnterRule(_localctx, 682, RULE_privilegesBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7174;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 680)) & ~0x3f) == 0 && ((1L << (_la - 680)) & ((1L << (TABLES - 680)) | (1L << (ROUTINE - 680)) | (1L << (EXECUTE - 680)) | (1L << (FILE - 680)) | (1L << (PROCESS - 680)) | (1L << (RELOAD - 680)) | (1L << (SHUTDOWN - 680)) | (1L << (SUPER - 680)) | (1L << (PRIVILEGES - 680)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalTypeBase(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeBaseContext intervalTypeBase() {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(Context, State);
		EnterRule(_localctx, 684, RULE_intervalTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7176;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 672)) & ~0x3f) == 0 && ((1L << (_la - 672)) & ((1L << (QUARTER - 672)) | (1L << (MONTH - 672)) | (1L << (DAY - 672)) | (1L << (HOUR - 672)) | (1L << (MINUTE - 672)) | (1L << (WEEK - 672)) | (1L << (SECOND - 672)) | (1L << (MICROSECOND - 672)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeBase(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeBaseContext dataTypeBase() {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(Context, State);
		EnterRule(_localctx, 686, RULE_dataTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7178;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsCanBeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MySqlParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MySqlParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MySqlParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MySqlParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MySqlParser.BUCKETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MySqlParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERING() { return GetToken(MySqlParser.CLUSTERING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MySqlParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MySqlParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUR() { return GetToken(MySqlParser.EUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVEN() { return GetToken(MySqlParser.EVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MySqlParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MySqlParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MySqlParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORED() { return GetToken(MySqlParser.IGNORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MySqlParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(MySqlParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISO() { return GetToken(MySqlParser.ISO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JIS() { return GetToken(MySqlParser.JIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MySqlParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MySqlParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY() { return GetToken(MySqlParser.NOCOPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MySqlParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MySqlParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MySqlParser.ODBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MySqlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ() { return GetToken(MySqlParser.OJ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(MySqlParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORDLESS_USER_ADMIN() { return GetToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MySqlParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MySqlParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MySqlParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MySqlParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE() { return GetToken(MySqlParser.RTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MySqlParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MySqlParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTIONAL() { return GetToken(MySqlParser.TRANSACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USA() { return GetToken(MySqlParser.USA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(MySqlParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTVAL() { return GetToken(MySqlParser.LASTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTVAL() { return GetToken(MySqlParser.NEXTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETVAL() { return GetToken(MySqlParser.SETVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUS() { return GetToken(MySqlParser.PREVIOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSISTENT() { return GetToken(MySqlParser.PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_MASTER_ADMIN() { return GetToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(MySqlParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_ADMIN() { return GetToken(MySqlParser.READ_ONLY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED_ADMIN() { return GetToken(MySqlParser.FEDERATED_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_MONITOR() { return GetToken(MySqlParser.BINLOG_MONITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_REPLAY() { return GetToken(MySqlParser.BINLOG_REPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(MySqlParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(MySqlParser.LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(MySqlParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MySqlParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(MySqlParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCACHE() { return GetToken(MySqlParser.NOCACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCYCLE() { return GetToken(MySqlParser.NOCYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMINVALUE() { return GetToken(MySqlParser.NOMINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMAXVALUE() { return GetToken(MySqlParser.NOMAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(MySqlParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MySqlParser.SEQUENCE, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordsCanBeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeywordsCanBeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeywordsCanBeId(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsCanBeIdContext keywordsCanBeId() {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(Context, State);
		EnterRule(_localctx, 688, RULE_keywordsCanBeId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7180;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (BUCKETS - 17)) | (1L << (CURRENT - 17)) | (1L << (DIAGNOSTICS - 17)) | (1L << (EXCEPT - 17)) | (1L << (GROUP - 17)) | (1L << (IGNORED - 17)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCKED - 100)) | (1L << (MAXVALUE - 100)) | (1L << (MINVALUE - 100)) | (1L << (NUMBER - 100)) | (1L << (OPTIONAL - 100)) | (1L << (ORDER - 100)) | (1L << (SKIP_ - 100)) | (1L << (STACKED - 100)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (SERIAL - 233)) | (1L << (AVG - 233)) | (1L << (BIT_AND - 233)) | (1L << (BIT_OR - 233)) | (1L << (BIT_XOR - 233)) | (1L << (COUNT - 233)) | (1L << (GROUP_CONCAT - 233)) | (1L << (MAX - 233)) | (1L << (MIN - 233)) | (1L << (STD - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (STDDEV - 297)) | (1L << (STDDEV_POP - 297)) | (1L << (STDDEV_SAMP - 297)) | (1L << (SUM - 297)) | (1L << (VAR_POP - 297)) | (1L << (VAR_SAMP - 297)) | (1L << (VARIANCE - 297)) | (1L << (ACCOUNT - 297)) | (1L << (ACTION - 297)) | (1L << (AFTER - 297)) | (1L << (AGGREGATE - 297)) | (1L << (ALGORITHM - 297)) | (1L << (ANY - 297)) | (1L << (AT - 297)) | (1L << (AUTHORS - 297)) | (1L << (AUTOCOMMIT - 297)) | (1L << (AUTOEXTEND_SIZE - 297)) | (1L << (AUTO_INCREMENT - 297)) | (1L << (AVG_ROW_LENGTH - 297)) | (1L << (BEGIN - 297)) | (1L << (BINLOG - 297)) | (1L << (BIT - 297)) | (1L << (BLOCK - 297)) | (1L << (BOOL - 297)) | (1L << (BOOLEAN - 297)) | (1L << (BTREE - 297)) | (1L << (CACHE - 297)) | (1L << (CASCADED - 297)) | (1L << (CHAIN - 297)) | (1L << (CHANGED - 297)) | (1L << (CHANNEL - 297)) | (1L << (CHECKSUM - 297)) | (1L << (PAGE_CHECKSUM - 297)) | (1L << (CIPHER - 297)) | (1L << (CLASS_ORIGIN - 297)) | (1L << (CLIENT - 297)) | (1L << (CLOSE - 297)) | (1L << (CLUSTERING - 297)) | (1L << (COALESCE - 297)) | (1L << (CODE - 297)) | (1L << (COLUMNS - 297)) | (1L << (COLUMN_FORMAT - 297)) | (1L << (COLUMN_NAME - 297)) | (1L << (COMMENT - 297)) | (1L << (COMMIT - 297)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (COMPACT - 361)) | (1L << (COMPLETION - 361)) | (1L << (COMPRESSED - 361)) | (1L << (COMPRESSION - 361)) | (1L << (CONCURRENT - 361)) | (1L << (CONNECT - 361)) | (1L << (CONNECTION - 361)) | (1L << (CONSISTENT - 361)) | (1L << (CONSTRAINT_CATALOG - 361)) | (1L << (CONSTRAINT_SCHEMA - 361)) | (1L << (CONSTRAINT_NAME - 361)) | (1L << (CONTAINS - 361)) | (1L << (CONTEXT - 361)) | (1L << (CONTRIBUTORS - 361)) | (1L << (COPY - 361)) | (1L << (CPU - 361)) | (1L << (CYCLE - 361)) | (1L << (CURSOR_NAME - 361)) | (1L << (DATA - 361)) | (1L << (DATAFILE - 361)) | (1L << (DEALLOCATE - 361)) | (1L << (DEFAULT_AUTH - 361)) | (1L << (DEFINER - 361)) | (1L << (DELAY_KEY_WRITE - 361)) | (1L << (DES_KEY_FILE - 361)) | (1L << (DIRECTORY - 361)) | (1L << (DISABLE - 361)) | (1L << (DISCARD - 361)) | (1L << (DISK - 361)) | (1L << (DO - 361)) | (1L << (DUMPFILE - 361)) | (1L << (DUPLICATE - 361)) | (1L << (DYNAMIC - 361)) | (1L << (ENABLE - 361)) | (1L << (ENCRYPTION - 361)) | (1L << (END - 361)) | (1L << (ENDS - 361)) | (1L << (ENGINE - 361)) | (1L << (ENGINES - 361)) | (1L << (ERROR - 361)) | (1L << (ERRORS - 361)) | (1L << (ESCAPE - 361)) | (1L << (EVEN - 361)) | (1L << (EVENT - 361)) | (1L << (EVENTS - 361)) | (1L << (EVERY - 361)) | (1L << (EXCHANGE - 361)) | (1L << (EXCLUSIVE - 361)) | (1L << (EXPIRE - 361)) | (1L << (EXPORT - 361)) | (1L << (EXTENDED - 361)) | (1L << (EXTENT_SIZE - 361)) | (1L << (FAST - 361)) | (1L << (FAULTS - 361)) | (1L << (FIELDS - 361)) | (1L << (FILE_BLOCK_SIZE - 361)) | (1L << (FILTER - 361)) | (1L << (FIRST - 361)) | (1L << (FIXED - 361)) | (1L << (FLUSH - 361)) | (1L << (FOLLOWS - 361)) | (1L << (FOUND - 361)) | (1L << (FULL - 361)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (FUNCTION - 425)) | (1L << (GENERAL - 425)) | (1L << (GLOBAL - 425)) | (1L << (GRANTS - 425)) | (1L << (GROUP_REPLICATION - 425)) | (1L << (HANDLER - 425)) | (1L << (HASH - 425)) | (1L << (HELP - 425)) | (1L << (HOST - 425)) | (1L << (HOSTS - 425)) | (1L << (IDENTIFIED - 425)) | (1L << (IGNORE_SERVER_IDS - 425)) | (1L << (IMPORT - 425)) | (1L << (INCREMENT - 425)) | (1L << (INDEXES - 425)) | (1L << (INITIAL_SIZE - 425)) | (1L << (INPLACE - 425)) | (1L << (INSERT_METHOD - 425)) | (1L << (INSTALL - 425)) | (1L << (INSTANCE - 425)) | (1L << (INSTANT - 425)) | (1L << (INVOKER - 425)) | (1L << (IO - 425)) | (1L << (IO_THREAD - 425)) | (1L << (IPC - 425)) | (1L << (ISOLATION - 425)) | (1L << (ISSUER - 425)) | (1L << (JSON - 425)) | (1L << (KEY_BLOCK_SIZE - 425)) | (1L << (LANGUAGE - 425)) | (1L << (LAST - 425)) | (1L << (LEAVES - 425)) | (1L << (LESS - 425)) | (1L << (LEVEL - 425)) | (1L << (LIST - 425)) | (1L << (LOCAL - 425)) | (1L << (LOGFILE - 425)) | (1L << (LOGS - 425)) | (1L << (MASTER - 425)) | (1L << (MASTER_AUTO_POSITION - 425)) | (1L << (MASTER_CONNECT_RETRY - 425)) | (1L << (MASTER_DELAY - 425)) | (1L << (MASTER_HEARTBEAT_PERIOD - 425)) | (1L << (MASTER_HOST - 425)) | (1L << (MASTER_LOG_FILE - 425)) | (1L << (MASTER_LOG_POS - 425)) | (1L << (MASTER_PASSWORD - 425)) | (1L << (MASTER_PORT - 425)) | (1L << (MASTER_RETRY_COUNT - 425)) | (1L << (MASTER_SSL - 425)) | (1L << (MASTER_SSL_CA - 425)) | (1L << (MASTER_SSL_CAPATH - 425)) | (1L << (MASTER_SSL_CERT - 425)) | (1L << (MASTER_SSL_CIPHER - 425)) | (1L << (MASTER_SSL_CRL - 425)) | (1L << (MASTER_SSL_CRLPATH - 425)) | (1L << (MASTER_SSL_KEY - 425)) | (1L << (MASTER_TLS_VERSION - 425)) | (1L << (MASTER_USER - 425)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 425)) | (1L << (MAX_QUERIES_PER_HOUR - 425)) | (1L << (MAX_ROWS - 425)) | (1L << (MAX_SIZE - 425)))) != 0) || ((((_la - 489)) & ~0x3f) == 0 && ((1L << (_la - 489)) & ((1L << (MAX_UPDATES_PER_HOUR - 489)) | (1L << (MAX_USER_CONNECTIONS - 489)) | (1L << (MEDIUM - 489)) | (1L << (MEMBER - 489)) | (1L << (MERGE - 489)) | (1L << (MESSAGE_TEXT - 489)) | (1L << (MID - 489)) | (1L << (MIGRATE - 489)) | (1L << (MIN_ROWS - 489)) | (1L << (MODE - 489)) | (1L << (MODIFY - 489)) | (1L << (MUTEX - 489)) | (1L << (MYSQL - 489)) | (1L << (MYSQL_ERRNO - 489)) | (1L << (NAME - 489)) | (1L << (NAMES - 489)) | (1L << (NCHAR - 489)) | (1L << (NEVER - 489)) | (1L << (NEXT - 489)) | (1L << (NO - 489)) | (1L << (NOCACHE - 489)) | (1L << (NOCOPY - 489)) | (1L << (NOCYCLE - 489)) | (1L << (NOMAXVALUE - 489)) | (1L << (NOMINVALUE - 489)) | (1L << (NOWAIT - 489)) | (1L << (NODEGROUP - 489)) | (1L << (NONE - 489)) | (1L << (ODBC - 489)) | (1L << (OFFLINE - 489)) | (1L << (OFFSET - 489)) | (1L << (OF - 489)) | (1L << (OJ - 489)) | (1L << (OLD_PASSWORD - 489)) | (1L << (ONE - 489)) | (1L << (ONLINE - 489)) | (1L << (ONLY - 489)) | (1L << (OPEN - 489)) | (1L << (OPTIMIZER_COSTS - 489)) | (1L << (OPTIONS - 489)) | (1L << (OWNER - 489)) | (1L << (PACK_KEYS - 489)) | (1L << (PAGE - 489)) | (1L << (PARSER - 489)) | (1L << (PARTIAL - 489)) | (1L << (PARTITIONING - 489)) | (1L << (PARTITIONS - 489)) | (1L << (PASSWORD - 489)) | (1L << (PHASE - 489)) | (1L << (PLUGIN - 489)) | (1L << (PLUGIN_DIR - 489)) | (1L << (PLUGINS - 489)) | (1L << (PORT - 489)) | (1L << (PRECEDES - 489)) | (1L << (PREPARE - 489)) | (1L << (PRESERVE - 489)) | (1L << (PREV - 489)) | (1L << (PROCESSLIST - 489)) | (1L << (PROFILE - 489)) | (1L << (PROFILES - 489)) | (1L << (PROXY - 489)) | (1L << (QUERY - 489)) | (1L << (QUICK - 489)))) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & ((1L << (REBUILD - 553)) | (1L << (RECOVER - 553)) | (1L << (RECURSIVE - 553)) | (1L << (REDO_BUFFER_SIZE - 553)) | (1L << (REDUNDANT - 553)) | (1L << (RELAY - 553)) | (1L << (RELAY_LOG_FILE - 553)) | (1L << (RELAY_LOG_POS - 553)) | (1L << (RELAYLOG - 553)) | (1L << (REMOVE - 553)) | (1L << (REORGANIZE - 553)) | (1L << (REPAIR - 553)) | (1L << (REPLICATE_DO_DB - 553)) | (1L << (REPLICATE_DO_TABLE - 553)) | (1L << (REPLICATE_IGNORE_DB - 553)) | (1L << (REPLICATE_IGNORE_TABLE - 553)) | (1L << (REPLICATE_REWRITE_DB - 553)) | (1L << (REPLICATE_WILD_DO_TABLE - 553)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 553)) | (1L << (REPLICATION - 553)) | (1L << (RESET - 553)) | (1L << (RESTART - 553)) | (1L << (RESUME - 553)) | (1L << (RETURNED_SQLSTATE - 553)) | (1L << (RETURNS - 553)) | (1L << (ROLE - 553)) | (1L << (ROLLBACK - 553)) | (1L << (ROLLUP - 553)) | (1L << (ROTATE - 553)) | (1L << (ROW - 553)) | (1L << (ROWS - 553)) | (1L << (ROW_FORMAT - 553)) | (1L << (RTREE - 553)) | (1L << (SAVEPOINT - 553)) | (1L << (SCHEDULE - 553)) | (1L << (SECURITY - 553)) | (1L << (SEQUENCE - 553)) | (1L << (SERVER - 553)) | (1L << (SESSION - 553)) | (1L << (SHARE - 553)) | (1L << (SHARED - 553)) | (1L << (SIGNED - 553)) | (1L << (SIMPLE - 553)) | (1L << (SLAVE - 553)) | (1L << (SLOW - 553)) | (1L << (SNAPSHOT - 553)) | (1L << (SOCKET - 553)) | (1L << (SOME - 553)) | (1L << (SONAME - 553)) | (1L << (SOUNDS - 553)) | (1L << (SOURCE - 553)) | (1L << (SQL_AFTER_GTIDS - 553)) | (1L << (SQL_AFTER_MTS_GAPS - 553)) | (1L << (SQL_BEFORE_GTIDS - 553)) | (1L << (SQL_BUFFER_RESULT - 553)) | (1L << (SQL_CACHE - 553)) | (1L << (SQL_NO_CACHE - 553)) | (1L << (SQL_THREAD - 553)) | (1L << (START - 553)) | (1L << (STARTS - 553)) | (1L << (STATS_AUTO_RECALC - 553)) | (1L << (STATS_PERSISTENT - 553)) | (1L << (STATS_SAMPLE_PAGES - 553)))) != 0) || ((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (STATUS - 617)) | (1L << (STOP - 617)) | (1L << (STORAGE - 617)) | (1L << (STRING - 617)) | (1L << (SUBCLASS_ORIGIN - 617)) | (1L << (SUBJECT - 617)) | (1L << (SUBPARTITION - 617)) | (1L << (SUBPARTITIONS - 617)) | (1L << (SUSPEND - 617)) | (1L << (SWAPS - 617)) | (1L << (SWITCHES - 617)) | (1L << (TABLE_NAME - 617)) | (1L << (TABLESPACE - 617)) | (1L << (TEMPORARY - 617)) | (1L << (TEMPTABLE - 617)) | (1L << (THAN - 617)) | (1L << (TRADITIONAL - 617)) | (1L << (TRANSACTION - 617)) | (1L << (TRANSACTIONAL - 617)) | (1L << (TRIGGERS - 617)) | (1L << (TRUNCATE - 617)) | (1L << (UNDEFINED - 617)) | (1L << (UNDOFILE - 617)) | (1L << (UNDO_BUFFER_SIZE - 617)) | (1L << (UNINSTALL - 617)) | (1L << (UNKNOWN - 617)) | (1L << (UNTIL - 617)) | (1L << (UPGRADE - 617)) | (1L << (USER - 617)) | (1L << (USE_FRM - 617)) | (1L << (USER_RESOURCES - 617)) | (1L << (VALIDATION - 617)) | (1L << (VALUE - 617)) | (1L << (VARIABLES - 617)) | (1L << (VIEW - 617)) | (1L << (WAIT - 617)) | (1L << (WARNINGS - 617)) | (1L << (WITHOUT - 617)) | (1L << (WORK - 617)) | (1L << (WRAPPER - 617)) | (1L << (X509 - 617)) | (1L << (XA - 617)) | (1L << (XML - 617)) | (1L << (EUR - 617)) | (1L << (USA - 617)) | (1L << (JIS - 617)) | (1L << (ISO - 617)) | (1L << (INTERNAL - 617)))) != 0) || ((((_la - 690)) & ~0x3f) == 0 && ((1L << (_la - 690)) & ((1L << (AUDIT_ADMIN - 690)) | (1L << (BACKUP_ADMIN - 690)) | (1L << (BINLOG_ADMIN - 690)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 690)) | (1L << (CLONE_ADMIN - 690)) | (1L << (CONNECTION_ADMIN - 690)) | (1L << (ENCRYPTION_KEY_ADMIN - 690)) | (1L << (FIREWALL_ADMIN - 690)) | (1L << (FIREWALL_USER - 690)) | (1L << (ADMIN - 690)) | (1L << (GROUP_REPLICATION_ADMIN - 690)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 690)) | (1L << (NDB_STORED_USER - 690)) | (1L << (PASSWORDLESS_USER_ADMIN - 690)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 690)) | (1L << (REPLICATION_APPLIER - 690)) | (1L << (REPLICATION_SLAVE_ADMIN - 690)) | (1L << (RESOURCE_GROUP_ADMIN - 690)) | (1L << (RESOURCE_GROUP_USER - 690)) | (1L << (ROLE_ADMIN - 690)) | (1L << (SESSION_VARIABLES_ADMIN - 690)) | (1L << (SET_USER_ID - 690)) | (1L << (SHOW_ROUTINE - 690)) | (1L << (SYSTEM_VARIABLES_ADMIN - 690)) | (1L << (TABLE_ENCRYPTION_ADMIN - 690)) | (1L << (VERSION_TOKEN_ADMIN - 690)) | (1L << (XA_RECOVER_ADMIN - 690)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME || ((((_la - 1083)) & ~0x3f) == 0 && ((1L << (_la - 1083)) & ((1L << (VIA - 1083)) | (1L << (LASTVAL - 1083)) | (1L << (NEXTVAL - 1083)) | (1L << (SETVAL - 1083)) | (1L << (PREVIOUS - 1083)) | (1L << (PERSISTENT - 1083)) | (1L << (BINLOG_MONITOR - 1083)) | (1L << (BINLOG_REPLAY - 1083)) | (1L << (FEDERATED_ADMIN - 1083)) | (1L << (READ_ONLY_ADMIN - 1083)) | (1L << (REPLICA - 1083)) | (1L << (REPLICATION_MASTER_ADMIN - 1083)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(MySqlParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(MySqlParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE() { return GetToken(MySqlParser.ADDDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDTIME() { return GetToken(MySqlParser.ADDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_DECRYPT() { return GetToken(MySqlParser.AES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_ENCRYPT() { return GetToken(MySqlParser.AES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AREA() { return GetToken(MySqlParser.AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASBINARY() { return GetToken(MySqlParser.ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(MySqlParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTEXT() { return GetToken(MySqlParser.ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKB() { return GetToken(MySqlParser.ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKT() { return GetToken(MySqlParser.ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DECRYPT() { return GetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DERIVE() { return GetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_ENCRYPT() { return GetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_SIGN() { return GetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_VERIFY() { return GetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(MySqlParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(MySqlParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BENCHMARK() { return GetToken(MySqlParser.BENCHMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(MySqlParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_COUNT() { return GetToken(MySqlParser.BIT_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_LENGTH() { return GetToken(MySqlParser.BIT_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(MySqlParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(MySqlParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(MySqlParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTROID() { return GetToken(MySqlParser.CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LENGTH() { return GetToken(MySqlParser.CHARACTER_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LENGTH() { return GetToken(MySqlParser.CHAR_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COERCIBILITY() { return GetToken(MySqlParser.COERCIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESS() { return GetToken(MySqlParser.COMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(MySqlParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_WS() { return GetToken(MySqlParser.CONCAT_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ID() { return GetToken(MySqlParser.CONNECTION_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONV() { return GetToken(MySqlParser.CONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_TZ() { return GetToken(MySqlParser.CONVERT_TZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(MySqlParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(MySqlParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRC32() { return GetToken(MySqlParser.CRC32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DH_PARAMETERS() { return GetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DIGEST() { return GetToken(MySqlParser.CREATE_DIGEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSES() { return GetToken(MySqlParser.CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MySqlParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(MySqlParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_FORMAT() { return GetToken(MySqlParser.DATE_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYNAME() { return GetToken(MySqlParser.DAYNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFMONTH() { return GetToken(MySqlParser.DAYOFMONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFWEEK() { return GetToken(MySqlParser.DAYOFWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(MySqlParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECODE() { return GetToken(MySqlParser.DECODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEGREES() { return GetToken(MySqlParser.DEGREES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MySqlParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_DECRYPT() { return GetToken(MySqlParser.DES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_ENCRYPT() { return GetToken(MySqlParser.DES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(MySqlParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISJOINT() { return GetToken(MySqlParser.DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELT() { return GetToken(MySqlParser.ELT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODE() { return GetToken(MySqlParser.ENCODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPT() { return GetToken(MySqlParser.ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(MySqlParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENVELOPE() { return GetToken(MySqlParser.ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MySqlParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(MySqlParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SET() { return GetToken(MySqlParser.EXPORT_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERIORRING() { return GetToken(MySqlParser.EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACTVALUE() { return GetToken(MySqlParser.EXTRACTVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MySqlParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIND_IN_SET() { return GetToken(MySqlParser.FIND_IN_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MySqlParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(MySqlParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_ROWS() { return GetToken(MySqlParser.FOUND_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_BASE64() { return GetToken(MySqlParser.FROM_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_DAYS() { return GetToken(MySqlParser.FROM_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_UNIXTIME() { return GetToken(MySqlParser.FROM_UNIXTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMWKB() { return GetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMTEXT() { return GetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMWKB() { return GetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYN() { return GetToken(MySqlParser.GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYTYPE() { return GetToken(MySqlParser.GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMTEXT() { return GetToken(MySqlParser.GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMWKB() { return GetToken(MySqlParser.GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_LOCK() { return GetToken(MySqlParser.GET_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLENGTH() { return GetToken(MySqlParser.GLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(MySqlParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBSET() { return GetToken(MySqlParser.GTID_SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBTRACT() { return GetToken(MySqlParser.GTID_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MySqlParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(MySqlParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_ATON() { return GetToken(MySqlParser.INET6_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_NTOA() { return GetToken(MySqlParser.INET6_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_ATON() { return GetToken(MySqlParser.INET_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_NTOA() { return GetToken(MySqlParser.INET_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTR() { return GetToken(MySqlParser.INSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERIORRINGN() { return GetToken(MySqlParser.INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTS() { return GetToken(MySqlParser.INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISCLOSED() { return GetToken(MySqlParser.ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEMPTY() { return GetToken(MySqlParser.ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(MySqlParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSIMPLE() { return GetToken(MySqlParser.ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_FREE_LOCK() { return GetToken(MySqlParser.IS_FREE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4() { return GetToken(MySqlParser.IS_IPV4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_COMPAT() { return GetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_MAPPED() { return GetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV6() { return GetToken(MySqlParser.IS_IPV6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_USED_LOCK() { return GetToken(MySqlParser.IS_USED_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MySqlParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_INSERT_ID() { return GetToken(MySqlParser.LAST_INSERT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MySqlParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCASE() { return GetToken(MySqlParser.LCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MySqlParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(MySqlParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(MySqlParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMTEXT() { return GetToken(MySqlParser.LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMWKB() { return GetToken(MySqlParser.LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMTEXT() { return GetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMWKB() { return GetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(MySqlParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_FILE() { return GetToken(MySqlParser.LOAD_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATE() { return GetToken(MySqlParser.LOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(MySqlParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(MySqlParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(MySqlParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(MySqlParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAD() { return GetToken(MySqlParser.LPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTRIM() { return GetToken(MySqlParser.LTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKEDATE() { return GetToken(MySqlParser.MAKEDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKETIME() { return GetToken(MySqlParser.MAKETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_SET() { return GetToken(MySqlParser.MAKE_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_POS_WAIT() { return GetToken(MySqlParser.MASTER_POS_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRCONTAINS() { return GetToken(MySqlParser.MBRCONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRDISJOINT() { return GetToken(MySqlParser.MBRDISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBREQUAL() { return GetToken(MySqlParser.MBREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRINTERSECTS() { return GetToken(MySqlParser.MBRINTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBROVERLAPS() { return GetToken(MySqlParser.MBROVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRTOUCHES() { return GetToken(MySqlParser.MBRTOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRWITHIN() { return GetToken(MySqlParser.MBRWITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(MySqlParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMTEXT() { return GetToken(MySqlParser.MLINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMWKB() { return GetToken(MySqlParser.MLINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHNAME() { return GetToken(MySqlParser.MONTHNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMTEXT() { return GetToken(MySqlParser.MPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMWKB() { return GetToken(MySqlParser.MPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMTEXT() { return GetToken(MySqlParser.MPOLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMWKB() { return GetToken(MySqlParser.MPOLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMTEXT() { return GetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMWKB() { return GetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMTEXT() { return GetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMWKB() { return GetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMTEXT() { return GetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMWKB() { return GetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_CONST() { return GetToken(MySqlParser.NAME_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MySqlParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MySqlParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(MySqlParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMGEOMETRIES() { return GetToken(MySqlParser.NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMINTERIORRINGS() { return GetToken(MySqlParser.NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMPOINTS() { return GetToken(MySqlParser.NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT() { return GetToken(MySqlParser.OCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTET_LENGTH() { return GetToken(MySqlParser.OCTET_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORD() { return GetToken(MySqlParser.ORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(MySqlParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MySqlParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_ADD() { return GetToken(MySqlParser.PERIOD_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_DIFF() { return GetToken(MySqlParser.PERIOD_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(MySqlParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMTEXT() { return GetToken(MySqlParser.POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMWKB() { return GetToken(MySqlParser.POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTN() { return GetToken(MySqlParser.POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMTEXT() { return GetToken(MySqlParser.POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMWKB() { return GetToken(MySqlParser.POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMTEXT() { return GetToken(MySqlParser.POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMWKB() { return GetToken(MySqlParser.POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(MySqlParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(MySqlParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(MySqlParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RADIANS() { return GetToken(MySqlParser.RADIANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAND() { return GetToken(MySqlParser.RAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MySqlParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_BYTES() { return GetToken(MySqlParser.RANDOM_BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_LOCK() { return GetToken(MySqlParser.RELEASE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(MySqlParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT() { return GetToken(MySqlParser.ROW_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MySqlParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAD() { return GetToken(MySqlParser.RPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTRIM() { return GetToken(MySqlParser.RTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC_TO_TIME() { return GetToken(MySqlParser.SEC_TO_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(MySqlParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA() { return GetToken(MySqlParser.SHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA1() { return GetToken(MySqlParser.SHA1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA2() { return GetToken(MySqlParser.SHA2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(MySqlParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(MySqlParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(MySqlParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDEX() { return GetToken(MySqlParser.SOUNDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(MySqlParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID() { return GetToken(MySqlParser.SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTPOINT() { return GetToken(MySqlParser.STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCMP() { return GetToken(MySqlParser.STRCMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_TO_DATE() { return GetToken(MySqlParser.STR_TO_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_AREA() { return GetToken(MySqlParser.ST_AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASBINARY() { return GetToken(MySqlParser.ST_ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASTEXT() { return GetToken(MySqlParser.ST_ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKB() { return GetToken(MySqlParser.ST_ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKT() { return GetToken(MySqlParser.ST_ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_BUFFER() { return GetToken(MySqlParser.ST_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CENTROID() { return GetToken(MySqlParser.ST_CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CONTAINS() { return GetToken(MySqlParser.ST_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CROSSES() { return GetToken(MySqlParser.ST_CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIFFERENCE() { return GetToken(MySqlParser.ST_DIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIMENSION() { return GetToken(MySqlParser.ST_DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISJOINT() { return GetToken(MySqlParser.ST_DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISTANCE() { return GetToken(MySqlParser.ST_DISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENDPOINT() { return GetToken(MySqlParser.ST_ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENVELOPE() { return GetToken(MySqlParser.ST_ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EQUALS() { return GetToken(MySqlParser.ST_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EXTERIORRING() { return GetToken(MySqlParser.ST_EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMWKB() { return GetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYN() { return GetToken(MySqlParser.ST_GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYTYPE() { return GetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMTEXT() { return GetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMWKB() { return GetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERIORRINGN() { return GetToken(MySqlParser.ST_INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTION() { return GetToken(MySqlParser.ST_INTERSECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTS() { return GetToken(MySqlParser.ST_INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISCLOSED() { return GetToken(MySqlParser.ST_ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISEMPTY() { return GetToken(MySqlParser.ST_ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISSIMPLE() { return GetToken(MySqlParser.ST_ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMTEXT() { return GetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMWKB() { return GetToken(MySqlParser.ST_LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMTEXT() { return GetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMWKB() { return GetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMGEOMETRIES() { return GetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRING() { return GetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRINGS() { return GetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMPOINTS() { return GetToken(MySqlParser.ST_NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_OVERLAPS() { return GetToken(MySqlParser.ST_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMTEXT() { return GetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMWKB() { return GetToken(MySqlParser.ST_POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTN() { return GetToken(MySqlParser.ST_POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMTEXT() { return GetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMWKB() { return GetToken(MySqlParser.ST_POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMTEXT() { return GetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMWKB() { return GetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SRID() { return GetToken(MySqlParser.ST_SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_STARTPOINT() { return GetToken(MySqlParser.ST_STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SYMDIFFERENCE() { return GetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_TOUCHES() { return GetToken(MySqlParser.ST_TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_UNION() { return GetToken(MySqlParser.ST_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_WITHIN() { return GetToken(MySqlParser.ST_WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_X() { return GetToken(MySqlParser.ST_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_Y() { return GetToken(MySqlParser.ST_Y, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE() { return GetToken(MySqlParser.SUBDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_INDEX() { return GetToken(MySqlParser.SUBSTRING_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTIME() { return GetToken(MySqlParser.SUBTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(MySqlParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEDIFF() { return GetToken(MySqlParser.TIMEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD() { return GetToken(MySqlParser.TIMESTAMPADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF() { return GetToken(MySqlParser.TIMESTAMPDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_FORMAT() { return GetToken(MySqlParser.TIME_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_TO_SEC() { return GetToken(MySqlParser.TIME_TO_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUCHES() { return GetToken(MySqlParser.TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_BASE64() { return GetToken(MySqlParser.TO_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_DAYS() { return GetToken(MySqlParser.TO_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SECONDS() { return GetToken(MySqlParser.TO_SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCASE() { return GetToken(MySqlParser.UCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESS() { return GetToken(MySqlParser.UNCOMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESSED_LENGTH() { return GetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNHEX() { return GetToken(MySqlParser.UNHEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIX_TIMESTAMP() { return GetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEXML() { return GetToken(MySqlParser.UPDATEXML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPER() { return GetToken(MySqlParser.UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(MySqlParser.UUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID_SHORT() { return GetToken(MySqlParser.UUID_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE_PASSWORD_STRENGTH() { return GetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(MySqlParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return GetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(MySqlParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKOFYEAR() { return GetToken(MySqlParser.WEEKOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(MySqlParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARWEEK() { return GetToken(MySqlParser.YEARWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y_FUNCTION() { return GetToken(MySqlParser.Y_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_FUNCTION() { return GetToken(MySqlParser.X_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(MySqlParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(MySqlParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUOTE() { return GetToken(MySqlParser.JSON_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS() { return GetToken(MySqlParser.JSON_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS_PATH() { return GetToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXTRACT() { return GetToken(MySqlParser.JSON_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_KEYS() { return GetToken(MySqlParser.JSON_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OVERLAPS() { return GetToken(MySqlParser.JSON_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEARCH() { return GetToken(MySqlParser.JSON_SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MySqlParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_APPEND() { return GetToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_INSERT() { return GetToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_INSERT() { return GetToken(MySqlParser.JSON_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE() { return GetToken(MySqlParser.JSON_MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PATCH() { return GetToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PRESERVE() { return GetToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REMOVE() { return GetToken(MySqlParser.JSON_REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REPLACE() { return GetToken(MySqlParser.JSON_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SET() { return GetToken(MySqlParser.JSON_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTE() { return GetToken(MySqlParser.JSON_UNQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_DEPTH() { return GetToken(MySqlParser.JSON_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_LENGTH() { return GetToken(MySqlParser.JSON_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TYPE() { return GetToken(MySqlParser.JSON_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALID() { return GetToken(MySqlParser.JSON_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(MySqlParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALID() { return GetToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return GetToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_PRETTY() { return GetToken(MySqlParser.JSON_PRETTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_FREE() { return GetToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_SIZE() { return GetToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(MySqlParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(MySqlParser.JSON_OBJECTAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTVAL() { return GetToken(MySqlParser.LASTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTVAL() { return GetToken(MySqlParser.NEXTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETVAL() { return GetToken(MySqlParser.SETVAL, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionNameBase(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameBaseContext functionNameBase() {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(Context, State);
		EnterRule(_localctx, 690, RULE_functionNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7182;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (LEFT - 93)) | (1L << (RIGHT - 93)) | (1L << (SCHEMA - 93)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (YEAR - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (POSITION - 275)))) != 0) || _la==INVISIBLE || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (VISIBLE - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)))) != 0) || ((((_la - 780)) & ~0x3f) == 0 && ((1L << (_la - 780)) & ((1L << (GEOMETRYCOLLECTION - 780)) | (1L << (LINESTRING - 780)) | (1L << (MULTILINESTRING - 780)) | (1L << (MULTIPOINT - 780)) | (1L << (MULTIPOLYGON - 780)) | (1L << (POINT - 780)) | (1L << (POLYGON - 780)) | (1L << (ABS - 780)) | (1L << (ACOS - 780)) | (1L << (ADDDATE - 780)) | (1L << (ADDTIME - 780)) | (1L << (AES_DECRYPT - 780)) | (1L << (AES_ENCRYPT - 780)) | (1L << (AREA - 780)) | (1L << (ASBINARY - 780)) | (1L << (ASIN - 780)) | (1L << (ASTEXT - 780)) | (1L << (ASWKB - 780)) | (1L << (ASWKT - 780)) | (1L << (ASYMMETRIC_DECRYPT - 780)) | (1L << (ASYMMETRIC_DERIVE - 780)) | (1L << (ASYMMETRIC_ENCRYPT - 780)) | (1L << (ASYMMETRIC_SIGN - 780)) | (1L << (ASYMMETRIC_VERIFY - 780)) | (1L << (ATAN - 780)) | (1L << (ATAN2 - 780)) | (1L << (BENCHMARK - 780)) | (1L << (BIN - 780)) | (1L << (BIT_COUNT - 780)) | (1L << (BIT_LENGTH - 780)) | (1L << (BUFFER - 780)) | (1L << (CEIL - 780)) | (1L << (CEILING - 780)) | (1L << (CENTROID - 780)) | (1L << (CHARACTER_LENGTH - 780)) | (1L << (CHARSET - 780)) | (1L << (CHAR_LENGTH - 780)) | (1L << (COERCIBILITY - 780)) | (1L << (COLLATION - 780)) | (1L << (COMPRESS - 780)) | (1L << (CONCAT - 780)) | (1L << (CONCAT_WS - 780)) | (1L << (CONNECTION_ID - 780)) | (1L << (CONV - 780)) | (1L << (CONVERT_TZ - 780)) | (1L << (COS - 780)) | (1L << (COT - 780)) | (1L << (CRC32 - 780)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 780)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 780)) | (1L << (CREATE_DH_PARAMETERS - 780)) | (1L << (CREATE_DIGEST - 780)) | (1L << (CROSSES - 780)) | (1L << (DATEDIFF - 780)) | (1L << (DATE_FORMAT - 780)) | (1L << (DAYNAME - 780)) | (1L << (DAYOFMONTH - 780)) | (1L << (DAYOFWEEK - 780)) | (1L << (DAYOFYEAR - 780)) | (1L << (DECODE - 780)) | (1L << (DEGREES - 780)))) != 0) || ((((_la - 844)) & ~0x3f) == 0 && ((1L << (_la - 844)) & ((1L << (DES_DECRYPT - 844)) | (1L << (DES_ENCRYPT - 844)) | (1L << (DIMENSION - 844)) | (1L << (DISJOINT - 844)) | (1L << (ELT - 844)) | (1L << (ENCODE - 844)) | (1L << (ENCRYPT - 844)) | (1L << (ENDPOINT - 844)) | (1L << (ENVELOPE - 844)) | (1L << (EQUALS - 844)) | (1L << (EXP - 844)) | (1L << (EXPORT_SET - 844)) | (1L << (EXTERIORRING - 844)) | (1L << (EXTRACTVALUE - 844)) | (1L << (FIELD - 844)) | (1L << (FIND_IN_SET - 844)) | (1L << (FLOOR - 844)) | (1L << (FORMAT - 844)) | (1L << (FOUND_ROWS - 844)) | (1L << (FROM_BASE64 - 844)) | (1L << (FROM_DAYS - 844)) | (1L << (FROM_UNIXTIME - 844)) | (1L << (GEOMCOLLFROMTEXT - 844)) | (1L << (GEOMCOLLFROMWKB - 844)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 844)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 844)) | (1L << (GEOMETRYFROMTEXT - 844)) | (1L << (GEOMETRYFROMWKB - 844)) | (1L << (GEOMETRYN - 844)) | (1L << (GEOMETRYTYPE - 844)) | (1L << (GEOMFROMTEXT - 844)) | (1L << (GEOMFROMWKB - 844)) | (1L << (GET_FORMAT - 844)) | (1L << (GET_LOCK - 844)) | (1L << (GLENGTH - 844)) | (1L << (GREATEST - 844)) | (1L << (GTID_SUBSET - 844)) | (1L << (GTID_SUBTRACT - 844)) | (1L << (HEX - 844)) | (1L << (IFNULL - 844)) | (1L << (INET6_ATON - 844)) | (1L << (INET6_NTOA - 844)) | (1L << (INET_ATON - 844)) | (1L << (INET_NTOA - 844)) | (1L << (INSTR - 844)) | (1L << (INTERIORRINGN - 844)) | (1L << (INTERSECTS - 844)) | (1L << (ISCLOSED - 844)) | (1L << (ISEMPTY - 844)) | (1L << (ISNULL - 844)) | (1L << (ISSIMPLE - 844)) | (1L << (IS_FREE_LOCK - 844)) | (1L << (IS_IPV4 - 844)) | (1L << (IS_IPV4_COMPAT - 844)) | (1L << (IS_IPV4_MAPPED - 844)) | (1L << (IS_IPV6 - 844)) | (1L << (IS_USED_LOCK - 844)) | (1L << (LAST_INSERT_ID - 844)) | (1L << (LCASE - 844)) | (1L << (LEAST - 844)) | (1L << (LENGTH - 844)) | (1L << (LINEFROMTEXT - 844)) | (1L << (LINEFROMWKB - 844)))) != 0) || ((((_la - 908)) & ~0x3f) == 0 && ((1L << (_la - 908)) & ((1L << (LINESTRINGFROMTEXT - 908)) | (1L << (LINESTRINGFROMWKB - 908)) | (1L << (LN - 908)) | (1L << (LOAD_FILE - 908)) | (1L << (LOCATE - 908)) | (1L << (LOG - 908)) | (1L << (LOG10 - 908)) | (1L << (LOG2 - 908)) | (1L << (LOWER - 908)) | (1L << (LPAD - 908)) | (1L << (LTRIM - 908)) | (1L << (MAKEDATE - 908)) | (1L << (MAKETIME - 908)) | (1L << (MAKE_SET - 908)) | (1L << (MASTER_POS_WAIT - 908)) | (1L << (MBRCONTAINS - 908)) | (1L << (MBRDISJOINT - 908)) | (1L << (MBREQUAL - 908)) | (1L << (MBRINTERSECTS - 908)) | (1L << (MBROVERLAPS - 908)) | (1L << (MBRTOUCHES - 908)) | (1L << (MBRWITHIN - 908)) | (1L << (MD5 - 908)) | (1L << (MLINEFROMTEXT - 908)) | (1L << (MLINEFROMWKB - 908)) | (1L << (MONTHNAME - 908)) | (1L << (MPOINTFROMTEXT - 908)) | (1L << (MPOINTFROMWKB - 908)) | (1L << (MPOLYFROMTEXT - 908)) | (1L << (MPOLYFROMWKB - 908)) | (1L << (MULTILINESTRINGFROMTEXT - 908)) | (1L << (MULTILINESTRINGFROMWKB - 908)) | (1L << (MULTIPOINTFROMTEXT - 908)) | (1L << (MULTIPOINTFROMWKB - 908)) | (1L << (MULTIPOLYGONFROMTEXT - 908)) | (1L << (MULTIPOLYGONFROMWKB - 908)) | (1L << (NAME_CONST - 908)) | (1L << (NULLIF - 908)) | (1L << (NUMGEOMETRIES - 908)) | (1L << (NUMINTERIORRINGS - 908)) | (1L << (NUMPOINTS - 908)) | (1L << (OCT - 908)) | (1L << (OCTET_LENGTH - 908)) | (1L << (ORD - 908)) | (1L << (OVERLAPS - 908)) | (1L << (PERIOD_ADD - 908)) | (1L << (PERIOD_DIFF - 908)) | (1L << (PI - 908)) | (1L << (POINTFROMTEXT - 908)) | (1L << (POINTFROMWKB - 908)) | (1L << (POINTN - 908)) | (1L << (POLYFROMTEXT - 908)) | (1L << (POLYFROMWKB - 908)) | (1L << (POLYGONFROMTEXT - 908)) | (1L << (POLYGONFROMWKB - 908)) | (1L << (POW - 908)) | (1L << (POWER - 908)) | (1L << (QUOTE - 908)) | (1L << (RADIANS - 908)) | (1L << (RAND - 908)) | (1L << (RANDOM_BYTES - 908)) | (1L << (RELEASE_LOCK - 908)) | (1L << (REVERSE - 908)) | (1L << (ROUND - 908)))) != 0) || ((((_la - 972)) & ~0x3f) == 0 && ((1L << (_la - 972)) & ((1L << (ROW_COUNT - 972)) | (1L << (RPAD - 972)) | (1L << (RTRIM - 972)) | (1L << (SEC_TO_TIME - 972)) | (1L << (SESSION_USER - 972)) | (1L << (SHA - 972)) | (1L << (SHA1 - 972)) | (1L << (SHA2 - 972)) | (1L << (SIGN - 972)) | (1L << (SIN - 972)) | (1L << (SLEEP - 972)) | (1L << (SOUNDEX - 972)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 972)) | (1L << (SQRT - 972)) | (1L << (SRID - 972)) | (1L << (STARTPOINT - 972)) | (1L << (STRCMP - 972)) | (1L << (STR_TO_DATE - 972)) | (1L << (ST_AREA - 972)) | (1L << (ST_ASBINARY - 972)) | (1L << (ST_ASTEXT - 972)) | (1L << (ST_ASWKB - 972)) | (1L << (ST_ASWKT - 972)) | (1L << (ST_BUFFER - 972)) | (1L << (ST_CENTROID - 972)) | (1L << (ST_CONTAINS - 972)) | (1L << (ST_CROSSES - 972)) | (1L << (ST_DIFFERENCE - 972)) | (1L << (ST_DIMENSION - 972)) | (1L << (ST_DISJOINT - 972)) | (1L << (ST_DISTANCE - 972)) | (1L << (ST_ENDPOINT - 972)) | (1L << (ST_ENVELOPE - 972)) | (1L << (ST_EQUALS - 972)) | (1L << (ST_EXTERIORRING - 972)) | (1L << (ST_GEOMCOLLFROMTEXT - 972)) | (1L << (ST_GEOMCOLLFROMTXT - 972)) | (1L << (ST_GEOMCOLLFROMWKB - 972)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 972)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 972)) | (1L << (ST_GEOMETRYFROMTEXT - 972)) | (1L << (ST_GEOMETRYFROMWKB - 972)) | (1L << (ST_GEOMETRYN - 972)) | (1L << (ST_GEOMETRYTYPE - 972)) | (1L << (ST_GEOMFROMTEXT - 972)) | (1L << (ST_GEOMFROMWKB - 972)) | (1L << (ST_INTERIORRINGN - 972)) | (1L << (ST_INTERSECTION - 972)) | (1L << (ST_INTERSECTS - 972)) | (1L << (ST_ISCLOSED - 972)) | (1L << (ST_ISEMPTY - 972)) | (1L << (ST_ISSIMPLE - 972)) | (1L << (ST_LINEFROMTEXT - 972)) | (1L << (ST_LINEFROMWKB - 972)) | (1L << (ST_LINESTRINGFROMTEXT - 972)) | (1L << (ST_LINESTRINGFROMWKB - 972)) | (1L << (ST_NUMGEOMETRIES - 972)) | (1L << (ST_NUMINTERIORRING - 972)) | (1L << (ST_NUMINTERIORRINGS - 972)) | (1L << (ST_NUMPOINTS - 972)) | (1L << (ST_OVERLAPS - 972)) | (1L << (ST_POINTFROMTEXT - 972)))) != 0) || ((((_la - 1036)) & ~0x3f) == 0 && ((1L << (_la - 1036)) & ((1L << (ST_POINTFROMWKB - 1036)) | (1L << (ST_POINTN - 1036)) | (1L << (ST_POLYFROMTEXT - 1036)) | (1L << (ST_POLYFROMWKB - 1036)) | (1L << (ST_POLYGONFROMTEXT - 1036)) | (1L << (ST_POLYGONFROMWKB - 1036)) | (1L << (ST_SRID - 1036)) | (1L << (ST_STARTPOINT - 1036)) | (1L << (ST_SYMDIFFERENCE - 1036)) | (1L << (ST_TOUCHES - 1036)) | (1L << (ST_UNION - 1036)) | (1L << (ST_WITHIN - 1036)) | (1L << (ST_X - 1036)) | (1L << (ST_Y - 1036)) | (1L << (SUBDATE - 1036)) | (1L << (SUBSTRING_INDEX - 1036)) | (1L << (SUBTIME - 1036)) | (1L << (SYSTEM_USER - 1036)) | (1L << (TAN - 1036)) | (1L << (TIMEDIFF - 1036)) | (1L << (TIMESTAMPADD - 1036)) | (1L << (TIMESTAMPDIFF - 1036)) | (1L << (TIME_FORMAT - 1036)) | (1L << (TIME_TO_SEC - 1036)) | (1L << (TOUCHES - 1036)) | (1L << (TO_BASE64 - 1036)) | (1L << (TO_DAYS - 1036)) | (1L << (TO_SECONDS - 1036)) | (1L << (UCASE - 1036)) | (1L << (UNCOMPRESS - 1036)) | (1L << (UNCOMPRESSED_LENGTH - 1036)) | (1L << (UNHEX - 1036)) | (1L << (UNIX_TIMESTAMP - 1036)) | (1L << (UPDATEXML - 1036)) | (1L << (UPPER - 1036)) | (1L << (UUID - 1036)) | (1L << (UUID_SHORT - 1036)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1036)) | (1L << (VERSION - 1036)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1036)) | (1L << (WEEKDAY - 1036)) | (1L << (WEEKOFYEAR - 1036)) | (1L << (WEIGHT_STRING - 1036)) | (1L << (WITHIN - 1036)) | (1L << (YEARWEEK - 1036)) | (1L << (Y_FUNCTION - 1036)) | (1L << (X_FUNCTION - 1036)) | (1L << (LASTVAL - 1036)) | (1L << (NEXTVAL - 1036)) | (1L << (SETVAL - 1036)))) != 0) || _la==MOD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 330: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 331: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 332: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 12);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,1150,7185,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,1,0,3,0,694,8,0,1,0,1,0,3,0,698,8,0,1,0,1,0,1,1,1,1,1,1,3,
		1,705,8,1,1,1,3,1,708,8,1,1,1,5,1,711,8,1,10,1,12,1,714,9,1,1,1,1,1,1,
		1,3,1,719,8,1,1,1,3,1,722,8,1,1,1,3,1,725,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,3,2,734,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,779,8,4,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,791,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,3,6,802,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,3,7,819,8,7,1,8,1,8,1,8,3,8,824,8,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,3,9,836,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,3,10,863,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,872,
		8,11,1,12,1,12,1,12,3,12,877,8,12,1,12,1,12,5,12,881,8,12,10,12,12,12,
		884,9,12,1,13,1,13,3,13,888,8,13,1,13,1,13,3,13,892,8,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,3,13,901,8,13,1,13,3,13,904,8,13,1,13,3,13,907,8,13,
		1,13,1,13,3,13,911,8,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,919,8,14,1,
		14,3,14,922,8,14,1,14,3,14,925,8,14,1,14,1,14,1,14,1,14,3,14,931,8,14,
		1,14,1,14,3,14,935,8,14,1,14,1,14,1,14,1,14,3,14,941,8,14,1,14,5,14,944,
		8,14,10,14,12,14,947,9,14,1,14,1,14,3,14,951,8,14,1,14,1,14,1,14,3,14,
		956,8,14,1,14,5,14,959,8,14,10,14,12,14,962,9,14,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,3,15,973,8,15,1,15,3,15,976,8,15,1,15,1,15,3,15,
		980,8,15,1,15,3,15,983,8,15,1,15,1,15,3,15,987,8,15,1,15,3,15,990,8,15,
		1,15,1,15,3,15,994,8,15,1,15,3,15,997,8,15,1,15,3,15,1000,8,15,1,15,1,
		15,3,15,1004,8,15,1,15,3,15,1007,8,15,1,15,1,15,3,15,1011,8,15,1,15,1,
		15,1,16,1,16,3,16,1017,8,16,1,16,1,16,1,16,1,16,3,16,1023,8,16,1,16,1,
		16,5,16,1027,8,16,10,16,12,16,1030,9,16,1,16,1,16,5,16,1034,8,16,10,16,
		12,16,1037,9,16,1,16,1,16,1,17,1,17,3,17,1043,8,17,1,17,1,17,1,17,1,17,
		3,17,1049,8,17,1,17,1,17,5,17,1053,8,17,10,17,12,17,1056,9,17,1,17,1,17,
		1,17,1,17,5,17,1062,8,17,10,17,12,17,1065,9,17,1,17,1,17,3,17,1069,8,17,
		1,18,1,18,1,18,1,18,1,18,3,18,1076,8,18,1,18,1,18,1,18,5,18,1081,8,18,
		10,18,12,18,1084,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,5,19,1098,8,19,10,19,12,19,1101,9,19,1,19,1,19,1,20,1,20,1,20,
		3,20,1108,8,20,1,20,3,20,1111,8,20,1,20,1,20,3,20,1115,8,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,3,20,1125,8,20,1,20,1,20,1,20,3,20,1130,
		8,20,1,20,3,20,1133,8,20,1,20,1,20,3,20,1137,8,20,1,20,1,20,3,20,1141,
		8,20,1,20,1,20,3,20,1145,8,20,1,20,5,20,1148,8,20,10,20,12,20,1151,9,20,
		3,20,1153,8,20,1,20,3,20,1156,8,20,1,20,3,20,1159,8,20,1,20,3,20,1162,
		8,20,1,20,1,20,1,20,1,20,1,20,3,20,1169,8,20,1,20,3,20,1172,8,20,1,20,
		1,20,3,20,1176,8,20,1,20,1,20,1,20,1,20,3,20,1182,8,20,1,20,5,20,1185,
		8,20,10,20,12,20,1188,9,20,3,20,1190,8,20,1,20,3,20,1193,8,20,3,20,1195,
		8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1206,8,21,1,21,
		1,21,3,21,1210,8,21,1,21,3,21,1213,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,1,22,3,22,1227,8,22,1,22,3,22,1230,8,22,1,22,
		1,22,3,22,1234,8,22,1,22,3,22,1237,8,22,1,22,1,22,3,22,1241,8,22,1,22,
		3,22,1244,8,22,1,22,1,22,3,22,1248,8,22,1,22,3,22,1251,8,22,1,22,1,22,
		3,22,1255,8,22,1,22,3,22,1258,8,22,1,22,3,22,1261,8,22,1,22,1,22,3,22,
		1265,8,22,1,22,3,22,1268,8,22,1,22,1,22,3,22,1272,8,22,1,22,1,22,1,23,
		1,23,1,23,3,23,1279,8,23,1,23,3,23,1282,8,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,3,23,1295,8,23,1,23,1,23,1,24,1,24,3,24,
		1301,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,5,25,1310,8,25,10,25,12,25,
		1313,9,25,1,25,1,25,3,25,1317,8,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,
		1325,8,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,3,28,1334,8,28,1,28,1,28,
		1,28,3,28,1339,8,28,1,28,3,28,1342,8,28,1,28,1,28,1,28,3,28,1347,8,28,
		1,28,1,28,1,28,1,28,1,28,1,28,3,28,1355,8,28,1,28,1,28,3,28,1359,8,28,
		1,28,1,28,1,28,3,28,1364,8,28,1,28,1,28,3,28,1368,8,28,1,29,1,29,1,29,
		3,29,1373,8,29,1,29,3,29,1376,8,29,1,29,1,29,3,29,1380,8,29,1,29,1,29,
		1,29,5,29,1385,8,29,10,29,12,29,1388,9,29,1,30,1,30,3,30,1392,8,30,1,30,
		1,30,1,30,3,30,1397,8,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1405,8,30,
		1,30,1,30,1,30,1,30,1,30,1,30,3,30,1413,8,30,1,30,1,30,1,30,3,30,1418,
		8,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1426,8,30,1,30,3,30,1429,8,30,
		1,31,3,31,1432,8,31,1,31,1,31,3,31,1436,8,31,1,31,1,31,3,31,1440,8,31,
		1,31,3,31,1443,8,31,1,31,1,31,3,31,1447,8,31,1,31,3,31,1450,8,31,1,32,
		1,32,1,32,1,32,1,32,3,32,1457,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,
		1465,8,33,3,33,1467,8,33,1,34,1,34,1,34,5,34,1472,8,34,10,34,12,34,1475,
		9,34,1,34,1,34,1,34,3,34,1480,8,34,1,34,1,34,1,34,1,34,5,34,1486,8,34,
		10,34,12,34,1489,9,34,3,34,1491,8,34,1,34,1,34,1,34,5,34,1496,8,34,10,
		34,12,34,1499,9,34,3,34,1501,8,34,3,34,1503,8,34,1,35,1,35,1,35,1,35,3,
		35,1509,8,35,1,36,1,36,1,36,1,36,3,36,1515,8,36,1,36,1,36,1,37,1,37,1,
		37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1532,8,37,1,
		38,1,38,1,38,1,38,1,38,3,38,1539,8,38,1,39,1,39,1,39,1,40,1,40,3,40,1546,
		8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1558,8,40,
		1,40,1,40,1,40,3,40,1563,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
		1572,8,40,3,40,1574,8,40,1,41,3,41,1577,8,41,1,41,1,41,1,41,1,42,1,42,
		1,42,1,43,1,43,1,43,1,43,1,43,3,43,1590,8,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,3,43,1603,8,43,1,43,1,43,1,43,3,43,1608,
		8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
		1,44,3,44,1624,8,44,1,45,1,45,1,45,1,45,5,45,1630,8,45,10,45,12,45,1633,
		9,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,3,46,1642,8,46,1,47,1,47,5,47,
		1646,8,47,10,47,12,47,1649,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,3,48,1660,8,48,1,48,3,48,1663,8,48,1,48,1,48,1,48,3,48,1668,8,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1681,8,48,
		1,48,1,48,1,48,1,48,1,48,3,48,1688,8,48,1,48,1,48,1,48,1,48,1,48,3,48,
		1695,8,48,3,48,1697,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1704,8,48,1,49,
		1,49,3,49,1708,8,49,3,49,1710,8,49,1,49,1,49,1,49,3,49,1715,8,49,1,49,
		3,49,1718,8,49,1,49,1,49,5,49,1722,8,49,10,49,12,49,1725,9,49,1,49,1,49,
		3,49,1729,8,49,3,49,1731,8,49,1,49,1,49,3,49,1735,8,49,1,49,3,49,1738,
		8,49,1,49,3,49,1741,8,49,1,49,1,49,5,49,1745,8,49,10,49,12,49,1748,9,49,
		1,49,1,49,3,49,1752,8,49,3,49,1754,8,49,1,49,1,49,1,49,3,49,1759,8,49,
		1,49,1,49,1,49,1,49,1,49,3,49,1766,8,49,3,49,1768,8,49,1,49,1,49,1,49,
		1,49,1,49,3,49,1775,8,49,1,50,1,50,1,50,3,50,1780,8,50,1,50,1,50,3,50,
		1784,8,50,1,50,3,50,1787,8,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1795,
		8,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1803,8,51,3,51,1805,8,51,1,52,
		1,52,1,52,1,52,1,52,1,52,3,52,1813,8,52,1,53,1,53,3,53,1817,8,53,1,53,
		3,53,1820,8,53,1,53,1,53,5,53,1824,8,53,10,53,12,53,1827,9,53,1,53,1,53,
		3,53,1831,8,53,1,53,3,53,1834,8,53,1,53,1,53,5,53,1838,8,53,10,53,12,53,
		1841,9,53,3,53,1843,8,53,1,54,1,54,3,54,1847,8,54,1,54,3,54,1850,8,54,
		1,54,1,54,3,54,1854,8,54,1,54,1,54,1,54,3,54,1859,8,54,1,54,1,54,1,54,
		3,54,1864,8,54,1,54,1,54,1,54,3,54,1869,8,54,1,54,1,54,3,54,1873,8,54,
		1,54,1,54,3,54,1877,8,54,1,54,1,54,3,54,1881,8,54,1,54,1,54,3,54,1885,
		8,54,1,54,1,54,3,54,1889,8,54,1,54,1,54,3,54,1893,8,54,1,54,1,54,1,54,
		3,54,1898,8,54,1,54,1,54,1,54,3,54,1903,8,54,1,54,1,54,1,54,3,54,1908,
		8,54,1,54,1,54,1,54,1,54,3,54,1914,8,54,1,54,1,54,1,54,3,54,1919,8,54,
		1,54,1,54,1,54,3,54,1924,8,54,1,54,1,54,1,54,1,54,3,54,1930,8,54,1,54,
		1,54,1,54,3,54,1935,8,54,1,54,1,54,1,54,3,54,1940,8,54,1,54,1,54,1,54,
		3,54,1945,8,54,1,54,1,54,1,54,3,54,1950,8,54,1,54,1,54,1,54,3,54,1955,
		8,54,1,54,1,54,1,54,3,54,1960,8,54,1,54,1,54,1,54,3,54,1965,8,54,1,54,
		1,54,1,54,1,54,1,54,3,54,1972,8,54,1,54,1,54,1,54,3,54,1977,8,54,1,54,
		1,54,1,54,3,54,1982,8,54,1,54,1,54,1,54,3,54,1987,8,54,1,54,1,54,1,54,
		1,54,3,54,1993,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,2001,8,54,1,54,
		1,54,1,54,1,54,3,54,2007,8,54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,
		1,57,1,57,3,57,2019,8,57,1,57,1,57,1,57,1,57,1,57,3,57,2026,8,57,3,57,
		2028,8,57,1,57,1,57,1,57,1,57,5,57,2034,8,57,10,57,12,57,2037,9,57,1,57,
		1,57,3,57,2041,8,57,1,58,3,58,2044,8,58,1,58,1,58,1,58,1,58,1,58,1,58,
		3,58,2052,8,58,1,58,1,58,1,58,1,58,3,58,2058,8,58,1,58,1,58,1,58,1,58,
		1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2074,8,58,1,58,
		1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2086,8,58,3,58,2088,
		8,58,1,59,3,59,2091,8,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2099,8,59,
		1,59,1,59,1,59,1,59,3,59,2105,8,59,1,59,1,59,1,59,1,59,3,59,2111,8,59,
		1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,2122,8,60,10,60,12,60,
		2125,9,60,1,60,1,60,5,60,2129,8,60,10,60,12,60,2132,9,60,1,60,1,60,1,60,
		1,60,5,60,2138,8,60,10,60,12,60,2141,9,60,1,60,1,60,3,60,2145,8,60,1,60,
		1,60,1,60,1,60,1,60,1,60,1,60,5,60,2154,8,60,10,60,12,60,2157,9,60,1,60,
		1,60,1,60,1,60,5,60,2163,8,60,10,60,12,60,2166,9,60,1,60,1,60,3,60,2170,
		8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,2180,8,60,10,60,12,60,
		2183,9,60,1,60,1,60,5,60,2187,8,60,10,60,12,60,2190,9,60,1,60,1,60,1,60,
		1,60,5,60,2196,8,60,10,60,12,60,2199,9,60,1,60,1,60,3,60,2203,8,60,1,60,
		1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,2213,8,60,10,60,12,60,2216,9,60,
		1,60,1,60,5,60,2220,8,60,10,60,12,60,2223,9,60,1,60,1,60,1,60,1,60,5,60,
		2229,8,60,10,60,12,60,2232,9,60,1,60,1,60,3,60,2236,8,60,1,60,1,60,1,60,
		5,60,2241,8,60,10,60,12,60,2244,9,60,1,60,1,60,1,60,1,60,5,60,2250,8,60,
		10,60,12,60,2253,9,60,1,60,1,60,3,60,2257,8,60,3,60,2259,8,60,1,61,1,61,
		1,61,3,61,2264,8,61,1,62,1,62,1,62,1,62,4,62,2270,8,62,11,62,12,62,2271,
		1,62,1,62,1,63,1,63,1,63,5,63,2279,8,63,10,63,12,63,2282,9,63,1,64,3,64,
		2285,8,64,1,64,3,64,2288,8,64,1,64,1,64,3,64,2292,8,64,1,64,1,64,1,64,
		3,64,2297,8,64,1,64,1,64,1,64,1,64,3,64,2303,8,64,1,64,1,64,1,64,1,64,
		3,64,2309,8,64,1,64,1,64,1,64,3,64,2314,8,64,1,64,1,64,1,64,3,64,2319,
		8,64,1,64,1,64,1,64,3,64,2324,8,64,1,64,1,64,1,64,3,64,2329,8,64,1,64,
		3,64,2332,8,64,1,65,1,65,1,65,3,65,2337,8,65,1,65,4,65,2340,8,65,11,65,
		12,65,2341,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,2352,8,65,1,66,
		1,66,3,66,2356,8,66,1,66,1,66,1,66,1,66,1,66,3,66,2363,8,66,1,66,1,66,
		1,66,3,66,2368,8,66,1,66,3,66,2371,8,66,1,66,1,66,1,66,3,66,2376,8,66,
		1,66,3,66,2379,8,66,1,66,1,66,3,66,2383,8,66,1,66,1,66,3,66,2387,8,66,
		1,67,1,67,1,67,1,67,5,67,2393,8,67,10,67,12,67,2396,9,67,1,68,1,68,1,68,
		1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,
		2414,8,69,1,69,3,69,2417,8,69,1,69,3,69,2420,8,69,1,69,1,69,3,69,2424,
		8,69,1,69,1,69,1,70,1,70,1,70,1,70,5,70,2432,8,70,10,70,12,70,2435,9,70,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,2445,8,71,10,71,12,71,2448,
		9,71,1,71,1,71,1,72,1,72,3,72,2454,8,72,1,72,3,72,2457,8,72,1,72,1,72,
		1,72,3,72,2462,8,72,1,72,1,72,1,72,5,72,2467,8,72,10,72,12,72,2470,9,72,
		3,72,2472,8,72,1,72,3,72,2475,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,3,73,2486,8,73,1,73,3,73,2489,8,73,1,73,1,73,3,73,2493,8,73,
		1,73,1,73,1,74,1,74,1,74,1,74,3,74,2501,8,74,1,74,3,74,2504,8,74,1,74,
		1,74,1,74,3,74,2509,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2517,8,74,
		1,74,1,74,1,74,1,74,3,74,2523,8,74,1,74,1,74,3,74,2527,8,74,1,75,1,75,
		1,75,3,75,2532,8,75,1,75,1,75,4,75,2536,8,75,11,75,12,75,2537,1,76,1,76,
		3,76,2542,8,76,1,76,5,76,2545,8,76,10,76,12,76,2548,9,76,1,76,1,76,3,76,
		2552,8,76,1,76,3,76,2555,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2562,8,76,
		1,76,1,76,3,76,2566,8,76,1,76,3,76,2569,8,76,1,76,1,76,1,76,1,76,1,76,
		1,76,1,76,5,76,2578,8,76,10,76,12,76,2581,9,76,1,76,1,76,1,76,1,76,1,76,
		3,76,2588,8,76,1,76,3,76,2591,8,76,1,76,3,76,2594,8,76,1,76,1,76,5,76,
		2598,8,76,10,76,12,76,2601,9,76,1,76,1,76,1,76,3,76,2606,8,76,3,76,2608,
		8,76,1,76,1,76,1,76,3,76,2613,8,76,1,76,3,76,2616,8,76,1,76,1,76,5,76,
		2620,8,76,10,76,12,76,2623,9,76,1,76,1,76,1,76,3,76,2628,8,76,3,76,2630,
		8,76,1,76,1,76,3,76,2634,8,76,1,76,3,76,2637,8,76,1,76,3,76,2640,8,76,
		1,76,1,76,5,76,2644,8,76,10,76,12,76,2647,9,76,1,76,1,76,1,76,3,76,2652,
		8,76,1,76,3,76,2655,8,76,1,76,1,76,5,76,2659,8,76,10,76,12,76,2662,9,76,
		1,76,1,76,1,76,3,76,2667,8,76,3,76,2669,8,76,1,76,1,76,1,76,3,76,2674,
		8,76,1,76,3,76,2677,8,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2685,8,76,
		3,76,2687,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2696,8,76,1,76,
		1,76,1,76,3,76,2701,8,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2709,8,76,
		1,76,1,76,3,76,2713,8,76,1,76,3,76,2716,8,76,1,76,1,76,1,76,1,76,1,76,
		1,76,3,76,2724,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2734,
		8,76,1,76,1,76,1,76,3,76,2739,8,76,1,76,3,76,2742,8,76,1,76,1,76,1,76,
		1,76,1,76,3,76,2749,8,76,1,76,1,76,3,76,2753,8,76,1,76,3,76,2756,8,76,
		1,76,1,76,3,76,2760,8,76,1,76,1,76,1,76,3,76,2765,8,76,1,76,1,76,1,76,
		1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
		1,76,3,76,2785,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2792,8,76,1,76,1,76,
		1,76,1,76,1,76,1,76,1,76,3,76,2801,8,76,1,76,1,76,3,76,2805,8,76,1,76,
		1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2817,8,76,1,76,3,76,
		2820,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2829,8,76,1,76,1,76,
		1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2841,8,76,1,76,1,76,1,76,
		1,76,5,76,2847,8,76,10,76,12,76,2850,9,76,1,76,1,76,1,76,1,76,1,76,3,76,
		2857,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2864,8,76,1,76,1,76,1,76,1,76,
		1,76,3,76,2871,8,76,1,76,1,76,1,76,1,76,1,76,3,76,2878,8,76,1,76,1,76,
		1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,2891,8,76,10,76,12,76,
		2894,9,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,2906,
		8,76,1,76,1,76,1,76,1,76,3,76,2912,8,76,1,76,1,76,1,76,1,76,3,76,2918,
		8,76,1,76,1,76,1,76,1,76,3,76,2924,8,76,1,76,1,76,1,76,1,76,3,76,2930,
		8,76,1,76,1,76,1,76,1,76,3,76,2936,8,76,1,76,1,76,1,76,1,76,3,76,2942,
		8,76,1,77,1,77,1,77,3,77,2947,8,77,1,77,1,77,1,78,1,78,1,78,3,78,2954,
		8,78,1,78,1,78,1,79,1,79,1,79,3,79,2961,8,79,1,79,1,79,1,79,1,79,1,79,
		3,79,2968,8,79,1,79,1,79,1,79,3,79,2973,8,79,1,79,5,79,2976,8,79,10,79,
		12,79,2979,9,79,1,79,3,79,2982,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,81,1,81,1,81,3,81,2995,8,81,1,81,1,81,1,82,1,82,1,82,3,82,3002,
		8,82,1,82,1,82,1,83,1,83,1,83,3,83,3009,8,83,1,83,1,83,1,84,1,84,3,84,
		3015,8,84,1,84,1,84,3,84,3019,8,84,1,84,1,84,3,84,3023,8,84,1,84,3,84,
		3026,8,84,1,85,1,85,1,85,1,85,1,85,3,85,3033,8,85,1,85,3,85,3036,8,85,
		1,86,1,86,1,86,3,86,3041,8,86,1,86,1,86,1,87,1,87,1,87,3,87,3048,8,87,
		1,87,1,87,1,87,5,87,3053,8,87,10,87,12,87,3056,9,87,1,87,3,87,3059,8,87,
		1,88,1,88,1,88,3,88,3064,8,88,1,88,1,88,1,88,5,88,3069,8,88,10,88,12,88,
		3072,9,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,3082,8,89,10,89,
		12,89,3085,9,89,3,89,3087,8,89,1,89,1,89,1,89,3,89,3092,8,89,1,89,1,89,
		1,89,3,89,3097,8,89,5,89,3099,8,89,10,89,12,89,3102,9,89,1,89,1,89,1,89,
		3,89,3107,8,89,1,90,1,90,3,90,3111,8,90,1,90,1,90,3,90,3115,8,90,1,90,
		3,90,3118,8,90,1,90,1,90,1,90,5,90,3123,8,90,10,90,12,90,3126,9,90,1,91,
		1,91,1,91,1,91,1,91,5,91,3133,8,91,10,91,12,91,3136,9,91,1,92,1,92,3,92,
		3140,8,92,1,92,1,92,1,92,1,93,1,93,3,93,3147,8,93,1,93,1,93,3,93,3151,
		8,93,1,94,1,94,1,94,1,94,1,94,3,94,3158,8,94,1,94,3,94,3161,8,94,1,95,
		1,95,3,95,3165,8,95,1,96,1,96,1,96,1,97,1,97,1,97,1,97,3,97,3174,8,97,
		1,98,1,98,3,98,3178,8,98,1,98,3,98,3181,8,98,1,98,3,98,3184,8,98,1,98,
		1,98,1,98,1,98,3,98,3190,8,98,1,98,3,98,3193,8,98,1,98,1,98,1,98,1,98,
		3,98,3199,8,98,1,98,1,98,1,98,1,98,1,98,5,98,3206,8,98,10,98,12,98,3209,
		9,98,3,98,3211,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,3220,8,98,
		10,98,12,98,3223,9,98,3,98,3225,8,98,1,99,1,99,1,99,3,99,3230,8,99,1,99,
		3,99,3233,8,99,1,99,1,99,1,99,3,99,3238,8,99,1,99,1,99,1,99,1,99,1,99,
		1,99,1,99,1,99,3,99,3248,8,99,1,99,1,99,1,99,3,99,3253,8,99,1,99,1,99,
		4,99,3257,8,99,11,99,12,99,3258,3,99,3261,8,99,1,99,1,99,4,99,3265,8,99,
		11,99,12,99,3266,3,99,3269,8,99,1,99,1,99,1,99,1,99,3,99,3275,8,99,1,99,
		1,99,1,99,1,99,5,99,3281,8,99,10,99,12,99,3284,9,99,1,99,1,99,3,99,3288,
		8,99,1,99,1,99,1,99,1,99,5,99,3294,8,99,10,99,12,99,3297,9,99,3,99,3299,
		8,99,1,100,1,100,1,100,3,100,3304,8,100,1,100,3,100,3307,8,100,1,100,1,
		100,1,100,3,100,3312,8,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3320,
		8,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,3328,8,100,1,100,1,100,
		1,100,1,100,3,100,3334,8,100,1,100,1,100,1,100,1,100,5,100,3340,8,100,
		10,100,12,100,3343,9,100,1,100,1,100,3,100,3347,8,100,1,100,1,100,1,100,
		1,100,5,100,3353,8,100,10,100,12,100,3356,9,100,3,100,3358,8,100,1,101,
		1,101,3,101,3362,8,101,1,101,3,101,3365,8,101,1,101,1,101,1,101,1,101,
		1,101,1,101,3,101,3373,8,101,1,101,1,101,1,101,1,101,3,101,3379,8,101,
		1,101,1,101,1,101,1,101,1,101,5,101,3386,8,101,10,101,12,101,3389,9,101,
		3,101,3391,8,101,1,102,1,102,3,102,3395,8,102,1,102,1,102,3,102,3399,8,
		102,1,102,1,102,4,102,3403,8,102,11,102,12,102,3404,1,102,1,102,3,102,
		3409,8,102,1,102,1,102,3,102,3413,8,102,3,102,3415,8,102,1,102,3,102,3418,
		8,102,1,102,3,102,3421,8,102,1,102,3,102,3424,8,102,1,102,1,102,4,102,
		3428,8,102,11,102,12,102,3429,1,102,1,102,3,102,3434,8,102,1,102,3,102,
		3437,8,102,1,102,3,102,3440,8,102,1,102,3,102,3443,8,102,1,102,3,102,3446,
		8,102,3,102,3448,8,102,1,103,1,103,3,103,3452,8,103,1,104,1,104,1,104,
		1,104,3,104,3458,8,104,1,104,1,104,1,104,1,104,3,104,3464,8,104,1,104,
		5,104,3467,8,104,10,104,12,104,3470,9,104,3,104,3472,8,104,1,105,1,105,
		1,105,1,105,3,105,3478,8,105,1,106,1,106,3,106,3482,8,106,1,107,1,107,
		1,107,1,107,1,107,1,107,3,107,3490,8,107,1,107,3,107,3493,8,107,1,108,
		1,108,3,108,3497,8,108,1,108,3,108,3500,8,108,1,108,3,108,3503,8,108,1,
		108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3512,8,108,1,108,1,108,3,
		108,3516,8,108,1,108,3,108,3519,8,108,1,108,1,108,3,108,3523,8,108,1,109,
		1,109,3,109,3527,8,109,1,109,3,109,3530,8,109,1,109,3,109,3533,8,109,1,
		109,1,109,1,109,3,109,3538,8,109,1,109,1,109,1,109,1,109,3,109,3544,8,
		109,5,109,3546,8,109,10,109,12,109,3549,9,109,1,109,1,109,1,109,1,109,
		1,109,1,109,1,109,3,109,3558,8,109,1,109,1,109,1,109,1,109,3,109,3564,
		8,109,5,109,3566,8,109,10,109,12,109,3569,9,109,1,109,1,109,1,109,3,109,
		3574,8,109,1,109,1,109,3,109,3578,8,109,1,110,1,110,1,110,1,110,3,110,
		3584,8,110,1,110,3,110,3587,8,110,1,111,1,111,1,111,1,111,1,111,1,111,
		1,111,1,111,1,111,1,111,3,111,3599,8,111,1,111,1,111,3,111,3603,8,111,
		1,111,1,111,3,111,3607,8,111,1,112,1,112,1,112,1,112,1,112,1,112,3,112,
		3615,8,112,1,112,1,112,3,112,3619,8,112,1,113,1,113,1,113,1,113,1,114,
		1,114,3,114,3627,8,114,1,114,3,114,3630,8,114,1,114,1,114,3,114,3634,8,
		114,1,114,3,114,3637,8,114,1,114,1,114,1,114,1,114,5,114,3643,8,114,10,
		114,12,114,3646,9,114,1,114,1,114,3,114,3650,8,114,1,114,3,114,3653,8,
		114,1,114,3,114,3656,8,114,1,115,1,115,3,115,3660,8,115,1,115,3,115,3663,
		8,115,1,115,1,115,1,115,1,115,1,115,5,115,3670,8,115,10,115,12,115,3673,
		9,115,1,115,1,115,3,115,3677,8,115,1,116,1,116,1,116,1,116,1,116,5,116,
		3684,8,116,10,116,12,116,3687,9,116,1,117,1,117,3,117,3691,8,117,1,118,
		1,118,1,118,5,118,3696,8,118,10,118,12,118,3699,9,118,1,119,1,119,5,119,
		3703,8,119,10,119,12,119,3706,9,119,1,119,1,119,1,119,5,119,3711,8,119,
		10,119,12,119,3714,9,119,1,119,1,119,3,119,3718,8,119,1,120,1,120,1,120,
		1,120,1,120,1,120,3,120,3726,8,120,1,120,3,120,3729,8,120,1,120,3,120,
		3732,8,120,1,120,1,120,1,120,5,120,3737,8,120,10,120,12,120,3740,9,120,
		3,120,3742,8,120,1,120,1,120,1,120,1,120,1,120,3,120,3749,8,120,1,120,
		3,120,3752,8,120,1,120,1,120,1,120,1,120,1,120,1,120,3,120,3760,8,120,
		1,121,1,121,1,121,1,121,3,121,3766,8,121,1,121,1,121,1,121,1,121,1,122,
		1,122,1,122,1,122,1,122,3,122,3777,8,122,1,123,3,123,3780,8,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,3791,8,123,1,123,
		1,123,1,123,1,123,3,123,3797,8,123,1,123,1,123,3,123,3801,8,123,1,123,
		1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,3812,8,123,1,123,
		1,123,1,123,3,123,3817,8,123,3,123,3819,8,123,1,123,1,123,3,123,3823,8,
		123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3833,8,124,1,
		125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,3843,8,125,1,126,1,
		126,5,126,3847,8,126,10,126,12,126,3850,9,126,1,126,1,126,3,126,3854,8,
		126,1,126,3,126,3857,8,126,1,126,3,126,3860,8,126,1,126,3,126,3863,8,126,
		1,126,3,126,3866,8,126,1,126,3,126,3869,8,126,1,126,3,126,3872,8,126,1,
		126,1,126,5,126,3876,8,126,10,126,12,126,3879,9,126,1,126,1,126,3,126,
		3883,8,126,1,126,3,126,3886,8,126,1,126,3,126,3889,8,126,1,126,3,126,3892,
		8,126,1,126,3,126,3895,8,126,1,126,3,126,3898,8,126,1,126,3,126,3901,8,
		126,3,126,3903,8,126,1,127,1,127,5,127,3907,8,127,10,127,12,127,3910,9,
		127,1,127,1,127,3,127,3914,8,127,1,127,3,127,3917,8,127,1,127,3,127,3920,
		8,127,1,127,3,127,3923,8,127,1,127,3,127,3926,8,127,1,127,3,127,3929,8,
		127,1,128,1,128,3,128,3933,8,128,1,128,1,128,1,129,1,129,3,129,3939,8,
		129,1,129,1,129,3,129,3943,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,
		130,1,130,3,130,3953,8,130,1,131,1,131,3,131,3957,8,131,1,131,1,131,5,
		131,3961,8,131,10,131,12,131,3964,9,131,1,132,1,132,1,132,1,132,1,132,
		1,132,3,132,3972,8,132,1,132,3,132,3975,8,132,1,132,1,132,3,132,3979,8,
		132,1,132,3,132,3982,8,132,1,132,1,132,3,132,3986,8,132,1,132,1,132,3,
		132,3990,8,132,1,132,3,132,3993,8,132,3,132,3995,8,132,1,133,1,133,1,133,
		1,133,5,133,4001,8,133,10,133,12,133,4004,9,133,1,133,1,133,1,133,1,133,
		1,133,1,133,1,133,1,133,1,133,3,133,4015,8,133,1,133,1,133,4,133,4019,
		8,133,11,133,12,133,4020,3,133,4023,8,133,1,133,1,133,4,133,4027,8,133,
		11,133,12,133,4028,3,133,4031,8,133,3,133,4033,8,133,1,134,1,134,1,134,
		1,134,3,134,4039,8,134,1,134,1,134,1,134,1,134,1,134,1,134,3,134,4047,
		8,134,1,135,1,135,1,135,1,135,1,135,1,135,3,135,4055,8,135,1,136,1,136,
		3,136,4059,8,136,1,136,1,136,3,136,4063,8,136,1,137,1,137,1,137,1,137,
		1,137,5,137,4070,8,137,10,137,12,137,4073,9,137,1,137,1,137,3,137,4077,
		8,137,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
		1,139,1,139,1,139,1,139,1,139,5,139,4095,8,139,10,139,12,139,4098,9,139,
		1,140,1,140,3,140,4102,8,140,1,141,1,141,1,141,1,141,3,141,4108,8,141,
		1,141,1,141,1,141,1,141,1,141,3,141,4115,8,141,1,142,1,142,1,142,3,142,
		4120,8,142,1,143,1,143,1,143,1,143,1,143,5,143,4127,8,143,10,143,12,143,
		4130,9,143,3,143,4132,8,143,1,144,1,144,3,144,4136,8,144,1,145,1,145,3,
		145,4140,8,145,1,145,1,145,3,145,4144,8,145,1,145,3,145,4147,8,145,1,145,
		3,145,4150,8,145,1,145,3,145,4153,8,145,1,146,1,146,3,146,4157,8,146,1,
		146,1,146,3,146,4161,8,146,1,146,3,146,4164,8,146,1,146,3,146,4167,8,146,
		1,146,3,146,4170,8,146,1,147,1,147,1,147,1,148,1,148,3,148,4177,8,148,
		1,148,1,148,3,148,4181,8,148,1,148,1,148,1,149,1,149,1,149,1,149,1,150,
		1,150,1,150,1,150,1,150,5,150,4194,8,150,10,150,12,150,4197,9,150,1,150,
		3,150,4200,8,150,1,151,1,151,1,151,1,152,1,152,1,152,1,152,1,152,1,153,
		1,153,3,153,4212,8,153,1,153,1,153,1,153,1,153,5,153,4218,8,153,10,153,
		12,153,4221,9,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,4230,
		8,154,1,155,1,155,3,155,4234,8,155,1,155,3,155,4237,8,155,1,155,1,155,
		1,156,1,156,3,156,4243,8,156,1,156,3,156,4246,8,156,1,156,3,156,4249,8,
		156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,4258,8,157,1,158,1,
		158,1,158,1,158,1,158,1,158,1,158,3,158,4267,8,158,1,159,1,159,1,159,1,
		159,1,159,1,159,5,159,4275,8,159,10,159,12,159,4278,9,159,1,159,3,159,
		4281,8,159,1,160,1,160,1,160,1,160,1,160,1,160,5,160,4289,8,160,10,160,
		12,160,4292,9,160,1,161,1,161,1,161,1,161,1,161,1,161,1,161,3,161,4301,
		8,161,1,162,1,162,1,162,1,163,1,163,1,163,3,163,4309,8,163,1,163,3,163,
		4312,8,163,1,164,1,164,1,164,1,164,1,164,5,164,4319,8,164,10,164,12,164,
		4322,9,164,3,164,4324,8,164,1,164,1,164,3,164,4328,8,164,1,164,5,164,4331,
		8,164,10,164,12,164,4334,9,164,1,164,3,164,4337,8,164,1,165,1,165,1,165,
		1,165,1,165,5,165,4344,8,165,10,165,12,165,4347,9,165,3,165,4349,8,165,
		1,166,1,166,1,166,1,167,1,167,1,167,1,168,1,168,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
		1,168,1,168,1,168,5,168,4378,8,168,10,168,12,168,4381,9,168,3,168,4383,
		8,168,1,168,3,168,4386,8,168,1,169,1,169,1,170,1,170,1,171,1,171,1,172,
		1,172,1,172,1,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,5,173,4440,8,173,
		10,173,12,173,4443,9,173,1,173,1,173,3,173,4447,8,173,1,174,1,174,1,174,
		1,174,1,174,1,174,1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
		1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
		4475,8,176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
		1,177,1,177,3,177,4489,8,177,1,178,1,178,1,178,5,178,4494,8,178,10,178,
		12,178,4497,9,178,1,178,3,178,4500,8,178,1,179,1,179,1,179,1,179,3,179,
		4506,8,179,1,180,1,180,1,180,1,180,1,180,1,180,3,180,4514,8,180,3,180,
		4516,8,180,1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,3,182,
		4527,8,182,1,183,1,183,1,183,1,183,1,184,1,184,1,184,1,184,3,184,4537,
		8,184,1,185,1,185,1,185,1,185,1,185,3,185,4544,8,185,1,186,1,186,1,186,
		1,186,3,186,4550,8,186,1,187,1,187,1,187,1,187,1,188,1,188,3,188,4558,
		8,188,1,189,1,189,1,189,3,189,4563,8,189,1,189,1,189,1,189,1,189,5,189,
		4569,8,189,10,189,12,189,4572,9,189,1,189,1,189,1,189,5,189,4577,8,189,
		10,189,12,189,4580,9,189,1,189,1,189,1,189,5,189,4585,8,189,10,189,12,
		189,4588,9,189,1,189,1,189,1,189,5,189,4593,8,189,10,189,12,189,4596,9,
		189,1,189,5,189,4599,8,189,10,189,12,189,4602,9,189,3,189,4604,8,189,1,
		189,1,189,3,189,4608,8,189,1,190,1,190,1,190,3,190,4613,8,190,1,190,4,
		190,4616,8,190,11,190,12,190,4617,1,190,1,190,4,190,4622,8,190,11,190,
		12,190,4623,3,190,4626,8,190,1,190,1,190,1,190,1,191,1,191,1,191,1,191,
		4,191,4635,8,191,11,191,12,191,4636,1,191,5,191,4640,8,191,10,191,12,191,
		4643,9,191,1,191,1,191,4,191,4647,8,191,11,191,12,191,4648,3,191,4651,
		8,191,1,191,1,191,1,191,1,192,1,192,1,192,1,193,1,193,1,193,1,194,1,194,
		1,194,3,194,4665,8,194,1,194,1,194,4,194,4669,8,194,11,194,12,194,4670,
		1,194,1,194,1,194,3,194,4676,8,194,1,195,1,195,1,195,3,195,4681,8,195,
		1,195,1,195,4,195,4685,8,195,11,195,12,195,4686,1,195,1,195,1,195,1,195,
		1,195,3,195,4694,8,195,1,196,1,196,1,196,1,197,1,197,1,197,3,197,4702,
		8,197,1,197,1,197,1,197,1,197,4,197,4708,8,197,11,197,12,197,4709,1,197,
		1,197,1,197,3,197,4715,8,197,1,198,1,198,1,198,1,198,3,198,4721,8,198,
		1,198,3,198,4724,8,198,1,198,1,198,1,198,1,198,1,198,1,198,3,198,4732,
		8,198,1,199,1,199,1,199,1,199,1,199,3,199,4739,8,199,1,200,1,200,1,200,
		1,200,1,200,1,200,1,200,3,200,4748,8,200,1,200,3,200,4751,8,200,1,201,
		1,201,1,201,1,201,1,201,1,201,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
		5,202,4766,8,202,10,202,12,202,4769,9,202,1,202,1,202,1,203,1,203,1,203,
		3,203,4776,8,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,4784,8,203,
		1,204,1,204,3,204,4788,8,204,1,204,1,204,1,205,1,205,1,205,3,205,4795,
		8,205,1,205,1,205,4,205,4799,8,205,11,205,12,205,4800,1,206,1,206,1,206,
		1,206,4,206,4807,8,206,11,206,12,206,4808,1,207,1,207,1,207,1,207,1,207,
		5,207,4816,8,207,10,207,12,207,4819,9,207,1,207,1,207,1,207,3,207,4824,
		8,207,1,207,1,207,1,207,5,207,4829,8,207,10,207,12,207,4832,9,207,1,207,
		1,207,1,207,1,207,3,207,4838,8,207,1,207,5,207,4841,8,207,10,207,12,207,
		4844,9,207,3,207,4846,8,207,3,207,4848,8,207,1,207,1,207,4,207,4852,8,
		207,11,207,12,207,4853,3,207,4856,8,207,1,207,1,207,5,207,4860,8,207,10,
		207,12,207,4863,9,207,3,207,4865,8,207,1,208,1,208,1,208,1,208,1,208,5,
		208,4872,8,208,10,208,12,208,4875,9,208,1,208,1,208,1,208,3,208,4880,8,
		208,1,208,1,208,1,208,5,208,4885,8,208,10,208,12,208,4888,9,208,1,208,
		1,208,1,208,1,208,3,208,4894,8,208,1,208,5,208,4897,8,208,10,208,12,208,
		4900,9,208,3,208,4902,8,208,3,208,4904,8,208,1,208,1,208,4,208,4908,8,
		208,11,208,12,208,4909,3,208,4912,8,208,1,208,1,208,5,208,4916,8,208,10,
		208,12,208,4919,9,208,3,208,4921,8,208,1,209,1,209,1,209,3,209,4926,8,
		209,1,209,1,209,1,209,5,209,4931,8,209,10,209,12,209,4934,9,209,1,210,
		1,210,1,210,1,210,5,210,4940,8,210,10,210,12,210,4943,9,210,1,210,1,210,
		3,210,4947,8,210,1,210,1,210,1,210,1,210,1,210,5,210,4954,8,210,10,210,
		12,210,4957,9,210,1,210,1,210,1,210,1,210,3,210,4963,8,210,1,210,5,210,
		4966,8,210,10,210,12,210,4969,9,210,3,210,4971,8,210,3,210,4973,8,210,
		1,210,1,210,1,210,1,210,5,210,4979,8,210,10,210,12,210,4982,9,210,3,210,
		4984,8,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,4992,8,210,1,210,
		1,210,1,210,3,210,4997,8,210,1,210,1,210,1,210,3,210,5002,8,210,5,210,
		5004,8,210,10,210,12,210,5007,9,210,1,210,1,210,1,210,3,210,5012,8,210,
		1,210,1,210,1,210,3,210,5017,8,210,5,210,5019,8,210,10,210,12,210,5022,
		9,210,1,210,1,210,1,210,3,210,5027,8,210,3,210,5029,8,210,1,211,1,211,
		1,211,1,211,1,211,1,211,1,211,5,211,5038,8,211,10,211,12,211,5041,9,211,
		3,211,5043,8,211,1,211,1,211,1,211,5,211,5048,8,211,10,211,12,211,5051,
		9,211,3,211,5053,8,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
		5,212,5063,8,212,10,212,12,212,5066,9,212,1,212,1,212,1,212,3,212,5071,
		8,212,1,213,1,213,1,213,1,213,1,213,5,213,5078,8,213,10,213,12,213,5081,
		9,213,1,214,1,214,1,214,1,214,5,214,5087,8,214,10,214,12,214,5090,9,214,
		1,214,1,214,3,214,5094,8,214,1,214,1,214,1,214,1,214,1,214,5,214,5101,
		8,214,10,214,12,214,5104,9,214,1,214,1,214,1,214,3,214,5109,8,214,1,214,
		1,214,1,214,1,214,1,214,1,214,1,214,5,214,5118,8,214,10,214,12,214,5121,
		9,214,1,214,1,214,1,214,1,214,5,214,5127,8,214,10,214,12,214,5130,9,214,
		1,214,1,214,1,214,3,214,5135,8,214,1,214,1,214,1,214,3,214,5140,8,214,
		5,214,5142,8,214,10,214,12,214,5145,9,214,3,214,5147,8,214,1,215,1,215,
		1,215,1,215,1,215,1,215,1,215,1,215,5,215,5157,8,215,10,215,12,215,5160,
		9,215,1,216,1,216,1,216,1,216,3,216,5166,8,216,1,216,1,216,1,216,3,216,
		5171,8,216,1,217,1,217,1,217,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
		1,218,1,218,1,218,3,218,5186,8,218,1,218,1,218,1,218,1,218,1,218,3,218,
		5193,8,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,5201,8,218,1,218,
		3,218,5204,8,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,
		5214,8,219,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,5224,
		8,220,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,3,221,5234,8,221,
		1,222,1,222,1,222,1,223,1,223,1,223,1,223,1,223,3,223,5244,8,223,1,224,
		1,224,3,224,5248,8,224,1,224,1,224,3,224,5252,8,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,1,224,3,224,5262,8,224,1,224,1,224,1,224,3,224,
		5267,8,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,3,224,5331,8,224,1,225,1,225,1,225,1,225,1,225,
		1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,
		5349,8,225,1,226,1,226,1,226,1,226,1,227,1,227,3,227,5357,8,227,1,227,
		1,227,1,227,1,227,1,227,1,227,1,227,1,227,5,227,5367,8,227,10,227,12,227,
		5370,9,227,1,227,1,227,1,227,1,227,3,227,5376,8,227,3,227,5378,8,227,1,
		227,1,227,1,227,1,227,1,227,1,227,5,227,5386,8,227,10,227,12,227,5389,
		9,227,3,227,5391,8,227,1,228,1,228,1,228,1,228,5,228,5397,8,228,10,228,
		12,228,5400,9,228,1,229,1,229,1,229,1,229,3,229,5406,8,229,1,230,1,230,
		3,230,5410,8,230,1,230,1,230,1,230,3,230,5415,8,230,1,231,1,231,3,231,
		5419,8,231,1,231,1,231,1,231,3,231,5424,8,231,1,231,3,231,5427,8,231,1,
		231,3,231,5430,8,231,1,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,5439,
		8,232,1,233,1,233,3,233,5443,8,233,1,233,1,233,1,233,1,233,1,233,1,233,
		1,233,1,234,1,234,1,234,1,234,1,234,1,234,1,235,1,235,1,235,1,235,1,236,
		1,236,1,236,1,236,1,236,3,236,5467,8,236,1,236,1,236,1,236,1,236,1,236,
		3,236,5474,8,236,5,236,5476,8,236,10,236,12,236,5479,9,236,1,236,1,236,
		1,236,1,236,3,236,5485,8,236,1,236,1,236,1,236,1,236,1,236,3,236,5492,
		8,236,1,236,3,236,5495,8,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,
		1,236,1,236,1,236,1,236,1,236,5,236,5509,8,236,10,236,12,236,5512,9,236,
		3,236,5514,8,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,
		5524,8,237,1,237,1,237,3,237,5528,8,237,1,237,1,237,1,237,1,237,3,237,
		5534,8,237,1,237,3,237,5537,8,237,1,237,1,237,1,237,3,237,5542,8,237,1,
		237,1,237,3,237,5546,8,237,1,237,1,237,1,237,1,237,1,237,3,237,5553,8,
		237,1,237,3,237,5556,8,237,1,237,1,237,1,237,1,237,3,237,5562,8,237,1,
		237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,5586,
		8,237,1,237,3,237,5589,8,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,3,237,5601,8,237,1,237,3,237,5604,8,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,3,237,5614,8,237,1,237,1,237,1,237,
		1,237,1,237,1,237,3,237,5622,8,237,1,237,1,237,3,237,5626,8,237,1,237,
		1,237,1,237,1,237,1,237,3,237,5633,8,237,1,237,3,237,5636,8,237,1,237,
		1,237,1,237,1,237,1,237,5,237,5643,8,237,10,237,12,237,5646,9,237,1,237,
		1,237,1,237,3,237,5651,8,237,1,237,1,237,1,237,1,237,3,237,5657,8,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,5667,8,237,3,237,
		5669,8,237,1,238,1,238,1,238,1,238,3,238,5675,8,238,1,238,3,238,5678,8,
		238,1,238,3,238,5681,8,238,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,
		239,1,239,1,239,3,239,5693,8,239,1,239,3,239,5696,8,239,1,240,1,240,1,
		240,1,240,3,240,5702,8,240,1,241,3,241,5705,8,241,1,241,1,241,1,241,1,
		241,1,241,1,241,3,241,5713,8,241,1,241,1,241,1,241,1,241,1,241,1,241,3,
		241,5721,8,241,1,242,1,242,1,242,1,242,3,242,5727,8,242,1,242,1,242,3,
		242,5731,8,242,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,
		243,1,243,1,243,3,243,5745,8,243,1,244,1,244,1,244,1,245,1,245,1,245,1,
		245,1,245,5,245,5755,8,245,10,245,12,245,5758,9,245,1,245,1,245,1,245,
		1,245,3,245,5764,8,245,1,245,3,245,5767,8,245,1,245,1,245,1,245,1,246,
		1,246,3,246,5774,8,246,1,246,1,246,1,246,5,246,5779,8,246,10,246,12,246,
		5782,9,246,1,247,1,247,3,247,5786,8,247,1,247,4,247,5789,8,247,11,247,
		12,247,5790,1,247,3,247,5794,8,247,1,248,1,248,1,248,1,248,1,248,1,248,
		1,248,5,248,5803,8,248,10,248,12,248,5806,9,248,1,249,1,249,1,249,1,249,
		1,250,1,250,1,251,1,251,3,251,5816,8,251,1,251,1,251,1,251,1,251,3,251,
		5822,8,251,1,252,1,252,1,252,3,252,5827,8,252,1,252,1,252,1,252,1,252,
		1,252,1,252,1,252,1,252,1,252,1,252,1,252,3,252,5840,8,252,3,252,5842,
		8,252,1,252,1,252,1,252,3,252,5847,8,252,1,252,1,252,3,252,5851,8,252,
		1,252,3,252,5854,8,252,3,252,5856,8,252,1,253,1,253,1,253,1,253,1,253,
		3,253,5863,8,253,1,254,1,254,1,254,1,254,1,254,3,254,5870,8,254,1,254,
		3,254,5873,8,254,1,254,3,254,5876,8,254,1,254,1,254,1,254,1,254,3,254,
		5882,8,254,1,254,1,254,3,254,5886,8,254,1,255,1,255,1,255,1,255,3,255,
		5892,8,255,1,256,1,256,1,256,1,256,3,256,5898,8,256,1,256,1,256,1,257,
		1,257,1,257,1,258,1,258,1,258,1,259,1,259,1,259,3,259,5911,8,259,1,259,
		1,259,1,259,3,259,5916,8,259,1,259,1,259,1,259,1,259,5,259,5922,8,259,
		10,259,12,259,5925,9,259,3,259,5927,8,259,1,260,1,260,1,260,3,260,5932,
		8,260,1,260,1,260,1,260,3,260,5937,8,260,1,260,1,260,1,260,1,260,5,260,
		5943,8,260,10,260,12,260,5946,9,260,3,260,5948,8,260,1,261,1,261,1,261,
		1,261,1,261,1,261,3,261,5956,8,261,1,262,1,262,3,262,5960,8,262,1,262,
		1,262,1,262,1,262,1,262,1,262,1,262,1,262,1,262,5,262,5971,8,262,10,262,
		12,262,5974,9,262,1,262,1,262,1,262,3,262,5979,8,262,1,262,1,262,1,262,
		1,262,1,262,1,262,1,262,1,262,5,262,5989,8,262,10,262,12,262,5992,9,262,
		3,262,5994,8,262,1,263,1,263,1,264,1,264,1,264,1,264,1,264,3,264,6003,
		8,264,1,264,1,264,1,264,3,264,6008,8,264,1,265,1,265,1,265,1,265,3,265,
		6014,8,265,1,266,1,266,1,267,1,267,3,267,6020,8,267,1,268,1,268,1,268,
		3,268,6025,8,268,3,268,6027,8,268,1,268,1,268,1,268,3,268,6032,8,268,3,
		268,6034,8,268,1,269,1,269,3,269,6038,8,269,1,269,1,269,1,269,1,269,3,
		269,6044,8,269,1,269,3,269,6047,8,269,1,269,3,269,6050,8,269,1,270,1,270,
		1,270,1,270,1,270,1,270,3,270,6058,8,270,1,271,1,271,1,272,1,272,1,272,
		1,272,3,272,6066,8,272,1,273,1,273,3,273,6070,8,273,1,274,1,274,1,275,
		1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,
		1,275,4,275,6088,8,275,11,275,12,275,6089,1,276,1,276,1,276,1,276,1,276,
		3,276,6097,8,276,3,276,6099,8,276,1,277,1,277,1,277,4,277,6104,8,277,11,
		277,12,277,6105,3,277,6108,8,277,1,278,1,278,3,278,6112,8,278,1,279,1,
		279,1,279,3,279,6117,8,279,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,
		280,1,280,3,280,6128,8,280,1,281,1,281,1,281,3,281,6133,8,281,1,282,1,
		282,1,283,1,283,3,283,6139,8,283,1,284,3,284,6142,8,284,1,284,1,284,3,
		284,6146,8,284,1,284,4,284,6149,8,284,11,284,12,284,6150,1,284,3,284,6154,
		8,284,1,284,1,284,3,284,6158,8,284,1,284,1,284,3,284,6162,8,284,3,284,
		6164,8,284,1,285,1,285,1,286,3,286,6169,8,286,1,286,1,286,1,287,3,287,
		6174,8,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
		1,288,3,288,6187,8,288,1,288,3,288,6190,8,288,1,289,1,289,3,289,6194,8,
		289,1,289,3,289,6197,8,289,1,289,3,289,6200,8,289,1,289,1,289,1,289,3,
		289,6205,8,289,1,289,1,289,1,289,3,289,6210,8,289,1,289,1,289,1,289,3,
		289,6215,8,289,1,289,3,289,6218,8,289,1,289,1,289,1,289,3,289,6223,8,289,
		1,289,3,289,6226,8,289,1,289,1,289,1,289,1,289,3,289,6232,8,289,1,289,
		3,289,6235,8,289,1,289,1,289,3,289,6239,8,289,1,289,5,289,6242,8,289,10,
		289,12,289,6245,9,289,1,289,1,289,3,289,6249,8,289,1,289,5,289,6252,8,
		289,10,289,12,289,6255,9,289,1,289,1,289,3,289,6259,8,289,1,289,3,289,
		6262,8,289,1,289,5,289,6265,8,289,10,289,12,289,6268,9,289,1,289,1,289,
		3,289,6272,8,289,1,289,5,289,6275,8,289,10,289,12,289,6278,9,289,1,289,
		1,289,1,289,3,289,6283,8,289,1,289,1,289,1,289,3,289,6288,8,289,1,289,
		1,289,1,289,3,289,6293,8,289,1,289,1,289,1,289,3,289,6298,8,289,1,289,
		3,289,6301,8,289,1,289,1,289,1,289,3,289,6306,8,289,1,289,1,289,3,289,
		6310,8,289,1,289,1,289,3,289,6314,8,289,1,290,1,290,1,290,1,290,5,290,
		6320,8,290,10,290,12,290,6323,9,290,1,290,1,290,1,291,1,291,3,291,6329,
		8,291,1,291,1,291,3,291,6333,8,291,1,291,1,291,1,291,3,291,6338,8,291,
		1,291,1,291,1,291,3,291,6343,8,291,1,291,1,291,3,291,6347,8,291,3,291,
		6349,8,291,1,291,3,291,6352,8,291,1,292,1,292,1,292,1,292,1,293,1,293,
		1,293,1,293,1,293,1,293,1,294,1,294,1,294,1,294,3,294,6368,8,294,1,294,
		1,294,1,295,1,295,1,295,5,295,6375,8,295,10,295,12,295,6378,9,295,1,296,
		1,296,1,296,5,296,6383,8,296,10,296,12,296,6386,9,296,1,297,1,297,1,297,
		1,297,5,297,6392,8,297,10,297,12,297,6395,9,297,1,297,1,297,1,298,1,298,
		1,298,5,298,6402,8,298,10,298,12,298,6405,9,298,1,299,1,299,1,299,5,299,
		6410,8,299,10,299,12,299,6413,9,299,1,300,1,300,1,300,5,300,6418,8,300,
		10,300,12,300,6421,9,300,1,301,1,301,1,301,5,301,6426,8,301,10,301,12,
		301,6429,9,301,1,302,1,302,1,302,5,302,6434,8,302,10,302,12,302,6437,9,
		302,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,3,303,6448,8,
		303,1,303,1,303,1,303,1,303,1,303,3,303,6455,8,303,1,303,1,303,1,303,1,
		303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,
		1,303,1,303,3,303,6474,8,303,1,304,1,304,1,304,3,304,6479,8,304,1,304,
		3,304,6482,8,304,1,304,1,304,1,304,3,304,6487,8,304,1,304,3,304,6490,8,
		304,1,305,1,305,3,305,6494,8,305,1,306,1,306,1,306,1,307,1,307,1,307,1,
		307,1,308,1,308,1,308,3,308,6506,8,308,1,309,1,309,1,309,3,309,6511,8,
		309,1,310,1,310,1,310,1,310,1,310,1,310,3,310,6519,8,310,1,310,1,310,1,
		310,1,310,1,310,3,310,6526,8,310,1,310,1,310,1,310,3,310,6531,8,310,1,
		311,1,311,1,311,3,311,6536,8,311,1,311,1,311,1,311,1,311,1,311,1,311,1,
		311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,
		1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,4,311,
		6567,8,311,11,311,12,311,6568,1,311,1,311,3,311,6573,8,311,1,311,1,311,
		1,311,1,311,4,311,6579,8,311,11,311,12,311,6580,1,311,1,311,3,311,6585,
		8,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,3,311,6594,8,311,1,311,
		1,311,1,311,1,311,1,311,1,311,3,311,6602,8,311,1,311,1,311,1,311,3,311,
		6607,8,311,1,311,1,311,1,311,1,311,1,311,1,311,3,311,6615,8,311,1,311,
		1,311,1,311,3,311,6620,8,311,1,311,1,311,1,311,3,311,6625,8,311,3,311,
		6627,8,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,3,311,6636,8,311,
		1,311,1,311,1,311,3,311,6641,8,311,1,311,1,311,1,311,1,311,1,311,1,311,
		3,311,6649,8,311,1,311,1,311,1,311,3,311,6654,8,311,1,311,1,311,1,311,
		1,311,1,311,1,311,3,311,6662,8,311,1,311,1,311,1,311,1,311,1,311,1,311,
		3,311,6670,8,311,1,311,3,311,6673,8,311,1,311,1,311,1,311,1,311,1,311,
		1,311,1,311,1,311,3,311,6683,8,311,1,311,1,311,1,311,1,311,1,311,1,311,
		1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,1,311,3,311,6701,
		8,311,1,311,1,311,1,311,1,311,3,311,6707,8,311,1,311,1,311,3,311,6711,
		8,311,1,311,1,311,1,311,1,311,3,311,6717,8,311,1,311,1,311,3,311,6721,
		8,311,1,311,1,311,3,311,6725,8,311,1,312,1,312,1,312,1,312,1,312,1,313,
		1,313,1,313,1,313,5,313,6736,8,313,10,313,12,313,6739,9,313,1,313,1,313,
		1,313,1,313,1,313,3,313,6746,8,313,1,314,1,314,3,314,6750,8,314,1,315,
		1,315,1,315,3,315,6755,8,315,1,315,1,315,1,315,3,315,6760,8,315,1,315,
		1,315,1,315,1,315,3,315,6766,8,315,1,315,1,315,1,315,3,315,6771,8,315,
		1,315,1,315,3,315,6775,8,315,1,315,1,315,1,315,3,315,6780,8,315,1,315,
		1,315,1,315,3,315,6785,8,315,1,315,1,315,1,315,3,315,6790,8,315,1,315,
		1,315,1,315,1,315,1,315,1,315,5,315,6798,8,315,10,315,12,315,6801,9,315,
		3,315,6803,8,315,1,315,1,315,3,315,6807,8,315,1,315,1,315,3,315,6811,8,
		315,1,316,1,316,1,316,1,316,1,316,3,316,6818,8,316,1,316,1,316,3,316,6822,
		8,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,
		1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,1,316,
		1,316,1,316,1,316,1,316,3,316,6851,8,316,1,317,1,317,1,317,3,317,6856,
		8,317,1,317,1,317,3,317,6860,8,317,1,318,3,318,6863,8,318,1,318,3,318,
		6866,8,318,1,318,3,318,6869,8,318,1,318,3,318,6872,8,318,1,319,1,319,1,
		320,1,320,1,320,1,321,1,321,1,322,1,322,3,322,6883,8,322,1,323,1,323,1,
		323,1,323,1,323,1,324,1,324,1,324,1,324,1,324,1,324,1,324,3,324,6897,8,
		324,1,325,1,325,1,325,1,325,1,325,5,325,6904,8,325,10,325,12,325,6907,
		9,325,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,
		1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,1,326,
		3,326,6932,8,326,1,327,1,327,1,327,1,327,1,327,1,328,1,328,1,328,1,328,
		3,328,6943,8,328,1,328,1,328,1,328,1,328,1,328,3,328,6950,8,328,5,328,
		6952,8,328,10,328,12,328,6955,9,328,1,329,1,329,1,329,1,329,3,329,6961,
		8,329,1,330,1,330,1,330,1,330,1,330,1,330,3,330,6969,8,330,1,330,1,330,
		1,330,3,330,6974,8,330,1,330,1,330,1,330,1,330,5,330,6980,8,330,10,330,
		12,330,6983,9,330,1,331,1,331,1,331,3,331,6988,8,331,1,331,1,331,1,331,
		1,331,1,331,1,331,1,331,1,331,3,331,6998,8,331,1,331,1,331,1,331,1,331,
		1,331,1,331,1,331,1,331,1,331,1,331,1,331,3,331,7011,8,331,1,331,1,331,
		1,331,1,331,3,331,7017,8,331,1,331,1,331,1,331,1,331,3,331,7023,8,331,
		1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,1,331,
		1,331,1,331,3,331,7039,8,331,1,331,1,331,1,331,1,331,3,331,7045,8,331,
		1,331,1,331,1,331,1,331,1,331,1,331,1,331,5,331,7054,8,331,10,331,12,331,
		7057,9,331,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,1,332,5,332,7073,8,332,10,332,12,332,7076,9,332,1,332,
		1,332,1,332,1,332,1,332,1,332,1,332,4,332,7085,8,332,11,332,12,332,7086,
		1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,3,332,7104,8,332,1,332,1,332,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,5,332,7121,8,332,
		10,332,12,332,7124,9,332,1,333,1,333,1,334,1,334,1,334,1,334,1,334,1,334,
		1,334,1,334,1,334,1,334,1,334,1,334,1,334,1,334,3,334,7142,8,334,1,335,
		1,335,1,335,1,335,1,335,1,335,1,335,3,335,7151,8,335,1,336,1,336,1,336,
		1,336,1,336,1,336,1,336,3,336,7160,8,336,1,337,1,337,1,338,1,338,1,338,
		1,338,1,338,3,338,7169,8,338,1,339,1,339,1,340,1,340,1,341,1,341,1,342,
		1,342,1,343,1,343,1,344,1,344,1,345,1,345,1,345,0,3,660,662,664,346,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
		100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
		136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
		172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
		208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
		244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
		280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
		316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
		352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
		388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
		424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
		460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
		496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,
		532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
		568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
		604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,
		640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
		676,678,680,682,684,686,688,690,0,142,2,0,37,37,146,146,2,0,518,518,524,
		524,3,0,66,66,154,154,175,175,5,0,40,40,375,375,441,441,445,445,510,510,
		4,0,40,40,408,408,516,516,594,594,2,0,501,501,1135,1135,2,0,75,75,137,
		137,2,0,14,14,325,325,3,0,42,42,82,82,178,178,2,0,422,422,542,542,3,0,
		493,493,633,633,641,641,2,0,383,383,447,447,2,0,343,343,461,461,2,0,18,
		18,1111,1111,2,0,186,186,1111,1111,3,0,341,341,431,431,586,586,2,0,446,
		446,656,656,2,0,508,508,666,666,3,0,77,77,81,81,121,121,3,0,40,40,393,
		393,419,419,3,0,40,40,389,389,769,769,2,0,620,620,655,655,2,0,78,78,88,
		88,3,0,424,424,533,533,596,596,2,0,66,66,154,154,1,0,347,348,1,0,1125,
		1126,2,0,1135,1135,1143,1143,2,0,78,78,379,379,3,0,418,418,456,456,508,
		508,2,0,40,40,1125,1126,7,0,40,40,361,361,363,363,393,393,419,419,557,
		557,1143,1143,2,0,501,501,517,517,1,0,1126,1127,2,0,5,5,49,49,4,0,40,40,
		375,375,441,441,445,445,2,0,25,25,29,29,2,0,12,12,169,169,2,0,186,186,
		660,660,3,0,40,40,375,375,441,441,2,0,20,20,140,140,3,0,41,41,72,72,102,
		102,2,0,102,102,365,365,2,0,356,356,415,415,2,0,97,97,584,584,2,0,41,41,
		102,102,2,0,6,6,47,47,2,0,182,182,652,652,4,0,418,418,456,456,507,507,
		546,546,2,0,418,418,507,507,2,0,13,13,43,43,3,0,63,63,75,75,180,180,2,
		0,33,33,80,80,2,0,93,93,144,144,2,0,6,6,47,48,1,0,609,610,2,0,166,166,
		680,680,2,0,427,427,592,592,2,0,220,220,464,464,5,0,103,103,469,470,472,
		472,476,484,559,559,4,0,466,467,471,471,473,474,560,560,3,0,104,104,465,
		465,475,475,2,0,449,449,611,611,2,0,605,605,607,607,2,0,335,335,612,612,
		2,0,87,87,575,575,2,0,49,49,381,381,3,0,30,30,58,58,173,173,3,0,127,127,
		166,166,425,425,2,0,99,99,176,176,3,0,351,351,597,597,1093,1093,2,0,38,
		38,654,654,2,0,111,111,461,461,2,0,411,411,552,552,4,0,200,200,202,202,
		208,208,621,621,2,0,1095,1095,1111,1111,2,0,336,336,561,561,2,0,65,65,
		77,77,6,0,127,127,166,166,171,171,404,404,425,425,654,654,2,0,500,500,
		617,617,2,0,401,401,658,658,2,0,127,127,425,425,3,0,78,78,89,89,439,439,
		3,0,427,427,461,461,592,592,2,0,617,617,653,653,2,0,367,367,551,551,6,
		0,220,220,398,398,400,400,426,426,558,558,598,598,2,0,43,44,59,59,3,0,
		411,411,535,535,862,862,2,0,453,453,635,635,10,0,350,350,358,358,369,371,
		378,378,494,494,502,502,622,622,629,629,813,813,981,981,2,0,34,34,163,
		163,2,0,113,113,972,972,11,0,350,350,358,358,369,371,378,378,494,494,502,
		502,576,576,622,622,629,629,813,813,981,981,1,0,1148,1149,4,0,366,366,
		764,775,1135,1135,1143,1144,3,0,1125,1127,1136,1136,1138,1138,2,0,60,60,
		172,172,2,0,112,112,1139,1139,5,0,24,24,216,218,225,225,227,230,505,505,
		2,0,24,24,217,217,2,0,24,24,216,216,1,0,190,201,3,0,177,177,189,189,595,
		595,2,0,205,210,419,419,6,0,211,211,222,222,224,224,226,226,233,233,339,
		340,4,0,212,215,220,221,223,223,337,337,2,0,149,149,231,231,2,0,453,453,
		780,788,2,0,220,220,505,505,5,0,194,194,200,200,211,212,214,214,453,453,
		2,0,177,177,595,595,1,0,1084,1085,2,0,507,507,1087,1087,2,0,306,309,313,
		313,2,0,35,35,304,307,1,0,316,317,3,0,16,16,91,91,170,170,2,0,216,216,
		220,220,2,0,211,212,214,214,3,0,13,13,43,43,970,970,3,0,277,277,289,290,
		300,300,3,0,278,280,296,299,301,303,2,0,286,286,288,288,2,0,284,284,287,
		287,2,0,282,283,293,295,2,0,129,129,584,584,2,0,421,421,543,543,2,0,522,
		522,536,536,2,0,110,110,1114,1114,3,0,60,60,172,172,645,645,2,0,133,133,
		145,145,3,0,6,6,328,328,601,601,3,0,110,110,1107,1108,1114,1115,1,0,1104,
		1110,2,0,220,220,723,763,1,0,776,779,1,0,680,688,1,0,672,679,3,0,211,215,
		228,228,231,231,39,0,17,17,34,34,46,46,56,56,70,70,76,76,100,100,106,107,
		113,113,117,117,120,120,153,153,163,163,233,233,277,281,285,285,289,290,
		296,303,323,420,422,445,447,542,544,576,578,619,621,630,632,639,641,654,
		657,658,660,665,667,671,690,698,703,705,707,714,716,722,769,769,813,813,
		852,852,976,976,981,981,1083,1094,23,0,37,37,93,93,144,144,146,146,211,
		213,215,215,245,276,281,284,286,288,291,295,315,315,446,446,656,656,672,
		679,716,716,780,780,783,812,814,851,853,975,977,980,982,1082,1084,1086,
		1110,1110,8472,0,693,1,0,0,0,2,712,1,0,0,0,4,733,1,0,0,0,6,735,1,0,0,0,
		8,778,1,0,0,0,10,790,1,0,0,0,12,801,1,0,0,0,14,818,1,0,0,0,16,823,1,0,
		0,0,18,835,1,0,0,0,20,862,1,0,0,0,22,871,1,0,0,0,24,873,1,0,0,0,26,885,
		1,0,0,0,28,915,1,0,0,0,30,963,1,0,0,0,32,1014,1,0,0,0,34,1040,1,0,0,0,
		36,1070,1,0,0,0,38,1085,1,0,0,0,40,1194,1,0,0,0,42,1196,1,0,0,0,44,1214,
		1,0,0,0,46,1275,1,0,0,0,48,1298,1,0,0,0,50,1304,1,0,0,0,52,1326,1,0,0,
		0,54,1328,1,0,0,0,56,1330,1,0,0,0,58,1369,1,0,0,0,60,1428,1,0,0,0,62,1449,
		1,0,0,0,64,1456,1,0,0,0,66,1458,1,0,0,0,68,1502,1,0,0,0,70,1508,1,0,0,
		0,72,1510,1,0,0,0,74,1531,1,0,0,0,76,1538,1,0,0,0,78,1540,1,0,0,0,80,1573,
		1,0,0,0,82,1576,1,0,0,0,84,1581,1,0,0,0,86,1607,1,0,0,0,88,1623,1,0,0,
		0,90,1625,1,0,0,0,92,1641,1,0,0,0,94,1643,1,0,0,0,96,1703,1,0,0,0,98,1774,
		1,0,0,0,100,1776,1,0,0,0,102,1804,1,0,0,0,104,1812,1,0,0,0,106,1842,1,
		0,0,0,108,2006,1,0,0,0,110,2008,1,0,0,0,112,2010,1,0,0,0,114,2013,1,0,
		0,0,116,2087,1,0,0,0,118,2110,1,0,0,0,120,2258,1,0,0,0,122,2263,1,0,0,
		0,124,2265,1,0,0,0,126,2275,1,0,0,0,128,2331,1,0,0,0,130,2351,1,0,0,0,
		132,2353,1,0,0,0,134,2388,1,0,0,0,136,2397,1,0,0,0,138,2404,1,0,0,0,140,
		2427,1,0,0,0,142,2436,1,0,0,0,144,2451,1,0,0,0,146,2476,1,0,0,0,148,2496,
		1,0,0,0,150,2528,1,0,0,0,152,2941,1,0,0,0,154,2943,1,0,0,0,156,2950,1,
		0,0,0,158,2957,1,0,0,0,160,2983,1,0,0,0,162,2991,1,0,0,0,164,2998,1,0,
		0,0,166,3005,1,0,0,0,168,3012,1,0,0,0,170,3027,1,0,0,0,172,3037,1,0,0,
		0,174,3044,1,0,0,0,176,3060,1,0,0,0,178,3106,1,0,0,0,180,3108,1,0,0,0,
		182,3127,1,0,0,0,184,3137,1,0,0,0,186,3144,1,0,0,0,188,3152,1,0,0,0,190,
		3164,1,0,0,0,192,3166,1,0,0,0,194,3173,1,0,0,0,196,3175,1,0,0,0,198,3226,
		1,0,0,0,200,3300,1,0,0,0,202,3359,1,0,0,0,204,3447,1,0,0,0,206,3451,1,
		0,0,0,208,3471,1,0,0,0,210,3473,1,0,0,0,212,3481,1,0,0,0,214,3489,1,0,
		0,0,216,3494,1,0,0,0,218,3524,1,0,0,0,220,3579,1,0,0,0,222,3588,1,0,0,
		0,224,3608,1,0,0,0,226,3620,1,0,0,0,228,3624,1,0,0,0,230,3657,1,0,0,0,
		232,3678,1,0,0,0,234,3688,1,0,0,0,236,3692,1,0,0,0,238,3717,1,0,0,0,240,
		3759,1,0,0,0,242,3761,1,0,0,0,244,3776,1,0,0,0,246,3822,1,0,0,0,248,3832,
		1,0,0,0,250,3842,1,0,0,0,252,3902,1,0,0,0,254,3904,1,0,0,0,256,3930,1,
		0,0,0,258,3936,1,0,0,0,260,3952,1,0,0,0,262,3956,1,0,0,0,264,3994,1,0,
		0,0,266,4032,1,0,0,0,268,4046,1,0,0,0,270,4054,1,0,0,0,272,4058,1,0,0,
		0,274,4064,1,0,0,0,276,4078,1,0,0,0,278,4081,1,0,0,0,280,4099,1,0,0,0,
		282,4103,1,0,0,0,284,4119,1,0,0,0,286,4121,1,0,0,0,288,4133,1,0,0,0,290,
		4137,1,0,0,0,292,4154,1,0,0,0,294,4171,1,0,0,0,296,4174,1,0,0,0,298,4184,
		1,0,0,0,300,4188,1,0,0,0,302,4201,1,0,0,0,304,4204,1,0,0,0,306,4209,1,
		0,0,0,308,4229,1,0,0,0,310,4231,1,0,0,0,312,4248,1,0,0,0,314,4257,1,0,
		0,0,316,4266,1,0,0,0,318,4268,1,0,0,0,320,4282,1,0,0,0,322,4293,1,0,0,
		0,324,4302,1,0,0,0,326,4305,1,0,0,0,328,4313,1,0,0,0,330,4338,1,0,0,0,
		332,4350,1,0,0,0,334,4353,1,0,0,0,336,4385,1,0,0,0,338,4387,1,0,0,0,340,
		4389,1,0,0,0,342,4391,1,0,0,0,344,4393,1,0,0,0,346,4446,1,0,0,0,348,4448,
		1,0,0,0,350,4454,1,0,0,0,352,4474,1,0,0,0,354,4488,1,0,0,0,356,4499,1,
		0,0,0,358,4501,1,0,0,0,360,4507,1,0,0,0,362,4517,1,0,0,0,364,4521,1,0,
		0,0,366,4528,1,0,0,0,368,4532,1,0,0,0,370,4538,1,0,0,0,372,4545,1,0,0,
		0,374,4551,1,0,0,0,376,4557,1,0,0,0,378,4562,1,0,0,0,380,4609,1,0,0,0,
		382,4630,1,0,0,0,384,4655,1,0,0,0,386,4658,1,0,0,0,388,4664,1,0,0,0,390,
		4680,1,0,0,0,392,4695,1,0,0,0,394,4701,1,0,0,0,396,4731,1,0,0,0,398,4733,
		1,0,0,0,400,4740,1,0,0,0,402,4752,1,0,0,0,404,4758,1,0,0,0,406,4783,1,
		0,0,0,408,4787,1,0,0,0,410,4791,1,0,0,0,412,4802,1,0,0,0,414,4864,1,0,
		0,0,416,4920,1,0,0,0,418,4922,1,0,0,0,420,5028,1,0,0,0,422,5052,1,0,0,
		0,424,5054,1,0,0,0,426,5072,1,0,0,0,428,5146,1,0,0,0,430,5148,1,0,0,0,
		432,5161,1,0,0,0,434,5172,1,0,0,0,436,5203,1,0,0,0,438,5213,1,0,0,0,440,
		5223,1,0,0,0,442,5225,1,0,0,0,444,5235,1,0,0,0,446,5238,1,0,0,0,448,5330,
		1,0,0,0,450,5348,1,0,0,0,452,5350,1,0,0,0,454,5354,1,0,0,0,456,5392,1,
		0,0,0,458,5401,1,0,0,0,460,5407,1,0,0,0,462,5416,1,0,0,0,464,5438,1,0,
		0,0,466,5440,1,0,0,0,468,5451,1,0,0,0,470,5457,1,0,0,0,472,5513,1,0,0,
		0,474,5668,1,0,0,0,476,5680,1,0,0,0,478,5695,1,0,0,0,480,5701,1,0,0,0,
		482,5720,1,0,0,0,484,5730,1,0,0,0,486,5744,1,0,0,0,488,5746,1,0,0,0,490,
		5749,1,0,0,0,492,5771,1,0,0,0,494,5783,1,0,0,0,496,5795,1,0,0,0,498,5807,
		1,0,0,0,500,5811,1,0,0,0,502,5813,1,0,0,0,504,5855,1,0,0,0,506,5862,1,
		0,0,0,508,5864,1,0,0,0,510,5887,1,0,0,0,512,5893,1,0,0,0,514,5901,1,0,
		0,0,516,5904,1,0,0,0,518,5907,1,0,0,0,520,5928,1,0,0,0,522,5949,1,0,0,
		0,524,5957,1,0,0,0,526,5995,1,0,0,0,528,6007,1,0,0,0,530,6009,1,0,0,0,
		532,6015,1,0,0,0,534,6019,1,0,0,0,536,6033,1,0,0,0,538,6046,1,0,0,0,540,
		6057,1,0,0,0,542,6059,1,0,0,0,544,6065,1,0,0,0,546,6069,1,0,0,0,548,6071,
		1,0,0,0,550,6073,1,0,0,0,552,6091,1,0,0,0,554,6107,1,0,0,0,556,6111,1,
		0,0,0,558,6116,1,0,0,0,560,6127,1,0,0,0,562,6132,1,0,0,0,564,6134,1,0,
		0,0,566,6138,1,0,0,0,568,6163,1,0,0,0,570,6165,1,0,0,0,572,6168,1,0,0,
		0,574,6173,1,0,0,0,576,6189,1,0,0,0,578,6313,1,0,0,0,580,6315,1,0,0,0,
		582,6348,1,0,0,0,584,6353,1,0,0,0,586,6357,1,0,0,0,588,6363,1,0,0,0,590,
		6371,1,0,0,0,592,6379,1,0,0,0,594,6387,1,0,0,0,596,6398,1,0,0,0,598,6406,
		1,0,0,0,600,6414,1,0,0,0,602,6422,1,0,0,0,604,6430,1,0,0,0,606,6473,1,
		0,0,0,608,6489,1,0,0,0,610,6493,1,0,0,0,612,6495,1,0,0,0,614,6498,1,0,
		0,0,616,6505,1,0,0,0,618,6510,1,0,0,0,620,6530,1,0,0,0,622,6724,1,0,0,
		0,624,6726,1,0,0,0,626,6745,1,0,0,0,628,6747,1,0,0,0,630,6810,1,0,0,0,
		632,6850,1,0,0,0,634,6852,1,0,0,0,636,6862,1,0,0,0,638,6873,1,0,0,0,640,
		6875,1,0,0,0,642,6878,1,0,0,0,644,6882,1,0,0,0,646,6884,1,0,0,0,648,6896,
		1,0,0,0,650,6898,1,0,0,0,652,6931,1,0,0,0,654,6933,1,0,0,0,656,6942,1,
		0,0,0,658,6960,1,0,0,0,660,6973,1,0,0,0,662,6984,1,0,0,0,664,7103,1,0,
		0,0,666,7125,1,0,0,0,668,7141,1,0,0,0,670,7150,1,0,0,0,672,7159,1,0,0,
		0,674,7161,1,0,0,0,676,7168,1,0,0,0,678,7170,1,0,0,0,680,7172,1,0,0,0,
		682,7174,1,0,0,0,684,7176,1,0,0,0,686,7178,1,0,0,0,688,7180,1,0,0,0,690,
		7182,1,0,0,0,692,694,3,2,1,0,693,692,1,0,0,0,693,694,1,0,0,0,694,697,1,
		0,0,0,695,696,5,1108,0,0,696,698,5,1108,0,0,697,695,1,0,0,0,697,698,1,
		0,0,0,698,699,1,0,0,0,699,700,5,0,0,1,700,1,1,0,0,0,701,704,3,4,2,0,702,
		703,5,1108,0,0,703,705,5,1108,0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,
		707,1,0,0,0,706,708,5,1123,0,0,707,706,1,0,0,0,707,708,1,0,0,0,708,711,
		1,0,0,0,709,711,3,6,3,0,710,701,1,0,0,0,710,709,1,0,0,0,711,714,1,0,0,
		0,712,710,1,0,0,0,712,713,1,0,0,0,713,724,1,0,0,0,714,712,1,0,0,0,715,
		721,3,4,2,0,716,717,5,1108,0,0,717,719,5,1108,0,0,718,716,1,0,0,0,718,
		719,1,0,0,0,719,720,1,0,0,0,720,722,5,1123,0,0,721,718,1,0,0,0,721,722,
		1,0,0,0,722,725,1,0,0,0,723,725,3,6,3,0,724,715,1,0,0,0,724,723,1,0,0,
		0,725,3,1,0,0,0,726,734,3,8,4,0,727,734,3,10,5,0,728,734,3,12,6,0,729,
		734,3,14,7,0,730,734,3,16,8,0,731,734,3,20,10,0,732,734,3,22,11,0,733,
		726,1,0,0,0,733,727,1,0,0,0,733,728,1,0,0,0,733,729,1,0,0,0,733,730,1,
		0,0,0,733,731,1,0,0,0,733,732,1,0,0,0,734,5,1,0,0,0,735,736,5,1123,0,0,
		736,7,1,0,0,0,737,779,3,24,12,0,738,779,3,26,13,0,739,779,3,28,14,0,740,
		779,3,30,15,0,741,779,3,32,16,0,742,779,3,34,17,0,743,779,3,38,19,0,744,
		779,3,40,20,0,745,779,3,42,21,0,746,779,3,44,22,0,747,779,3,46,23,0,748,
		779,3,56,28,0,749,779,3,36,18,0,750,779,3,58,29,0,751,779,3,130,65,0,752,
		779,3,132,66,0,753,779,3,134,67,0,754,779,3,136,68,0,755,779,3,138,69,
		0,756,779,3,140,70,0,757,779,3,142,71,0,758,779,3,144,72,0,759,779,3,146,
		73,0,760,779,3,148,74,0,761,779,3,150,75,0,762,779,3,154,77,0,763,779,
		3,156,78,0,764,779,3,158,79,0,765,779,3,160,80,0,766,779,3,162,81,0,767,
		779,3,164,82,0,768,779,3,166,83,0,769,779,3,168,84,0,770,779,3,170,85,
		0,771,779,3,172,86,0,772,779,3,174,87,0,773,779,3,176,88,0,774,779,3,180,
		90,0,775,779,3,178,89,0,776,779,3,182,91,0,777,779,3,186,93,0,778,737,
		1,0,0,0,778,738,1,0,0,0,778,739,1,0,0,0,778,740,1,0,0,0,778,741,1,0,0,
		0,778,742,1,0,0,0,778,743,1,0,0,0,778,744,1,0,0,0,778,745,1,0,0,0,778,
		746,1,0,0,0,778,747,1,0,0,0,778,748,1,0,0,0,778,749,1,0,0,0,778,750,1,
		0,0,0,778,751,1,0,0,0,778,752,1,0,0,0,778,753,1,0,0,0,778,754,1,0,0,0,
		778,755,1,0,0,0,778,756,1,0,0,0,778,757,1,0,0,0,778,758,1,0,0,0,778,759,
		1,0,0,0,778,760,1,0,0,0,778,761,1,0,0,0,778,762,1,0,0,0,778,763,1,0,0,
		0,778,764,1,0,0,0,778,765,1,0,0,0,778,766,1,0,0,0,778,767,1,0,0,0,778,
		768,1,0,0,0,778,769,1,0,0,0,778,770,1,0,0,0,778,771,1,0,0,0,778,772,1,
		0,0,0,778,773,1,0,0,0,778,774,1,0,0,0,778,775,1,0,0,0,778,776,1,0,0,0,
		778,777,1,0,0,0,779,9,1,0,0,0,780,791,3,204,102,0,781,791,3,196,98,0,782,
		791,3,206,103,0,783,791,3,190,95,0,784,791,3,202,101,0,785,791,3,188,94,
		0,786,791,3,198,99,0,787,791,3,200,100,0,788,791,3,192,96,0,789,791,3,
		194,97,0,790,780,1,0,0,0,790,781,1,0,0,0,790,782,1,0,0,0,790,783,1,0,0,
		0,790,784,1,0,0,0,790,785,1,0,0,0,790,786,1,0,0,0,790,787,1,0,0,0,790,
		788,1,0,0,0,790,789,1,0,0,0,791,11,1,0,0,0,792,802,3,286,143,0,793,802,
		3,288,144,0,794,802,3,290,145,0,795,802,3,292,146,0,796,802,3,294,147,
		0,797,802,3,296,148,0,798,802,3,298,149,0,799,802,3,300,150,0,800,802,
		3,302,151,0,801,792,1,0,0,0,801,793,1,0,0,0,801,794,1,0,0,0,801,795,1,
		0,0,0,801,796,1,0,0,0,801,797,1,0,0,0,801,798,1,0,0,0,801,799,1,0,0,0,
		801,800,1,0,0,0,802,13,1,0,0,0,803,819,3,318,159,0,804,819,3,320,160,0,
		805,819,3,322,161,0,806,819,3,324,162,0,807,819,3,326,163,0,808,819,3,
		328,164,0,809,819,3,330,165,0,810,819,3,332,166,0,811,819,3,334,167,0,
		812,819,3,358,179,0,813,819,3,360,180,0,814,819,3,362,181,0,815,819,3,
		364,182,0,816,819,3,366,183,0,817,819,3,368,184,0,818,803,1,0,0,0,818,
		804,1,0,0,0,818,805,1,0,0,0,818,806,1,0,0,0,818,807,1,0,0,0,818,808,1,
		0,0,0,818,809,1,0,0,0,818,810,1,0,0,0,818,811,1,0,0,0,818,812,1,0,0,0,
		818,813,1,0,0,0,818,814,1,0,0,0,818,815,1,0,0,0,818,816,1,0,0,0,818,817,
		1,0,0,0,819,15,1,0,0,0,820,824,3,370,185,0,821,824,3,372,186,0,822,824,
		3,374,187,0,823,820,1,0,0,0,823,821,1,0,0,0,823,822,1,0,0,0,824,17,1,0,
		0,0,825,836,3,378,189,0,826,836,3,380,190,0,827,836,3,382,191,0,828,836,
		3,386,193,0,829,836,3,388,194,0,830,836,3,390,195,0,831,836,3,394,197,
		0,832,836,3,384,192,0,833,836,3,392,196,0,834,836,3,396,198,0,835,825,
		1,0,0,0,835,826,1,0,0,0,835,827,1,0,0,0,835,828,1,0,0,0,835,829,1,0,0,
		0,835,830,1,0,0,0,835,831,1,0,0,0,835,832,1,0,0,0,835,833,1,0,0,0,835,
		834,1,0,0,0,836,19,1,0,0,0,837,863,3,414,207,0,838,863,3,416,208,0,839,
		863,3,418,209,0,840,863,3,420,210,0,841,863,3,424,212,0,842,863,3,426,
		213,0,843,863,3,428,214,0,844,863,3,430,215,0,845,863,3,454,227,0,846,
		863,3,456,228,0,847,863,3,458,229,0,848,863,3,460,230,0,849,863,3,462,
		231,0,850,863,3,466,233,0,851,863,3,468,234,0,852,863,3,470,235,0,853,
		863,3,472,236,0,854,863,3,474,237,0,855,863,3,488,244,0,856,863,3,490,
		245,0,857,863,3,492,246,0,858,863,3,494,247,0,859,863,3,496,248,0,860,
		863,3,498,249,0,861,863,3,500,250,0,862,837,1,0,0,0,862,838,1,0,0,0,862,
		839,1,0,0,0,862,840,1,0,0,0,862,841,1,0,0,0,862,842,1,0,0,0,862,843,1,
		0,0,0,862,844,1,0,0,0,862,845,1,0,0,0,862,846,1,0,0,0,862,847,1,0,0,0,
		862,848,1,0,0,0,862,849,1,0,0,0,862,850,1,0,0,0,862,851,1,0,0,0,862,852,
		1,0,0,0,862,853,1,0,0,0,862,854,1,0,0,0,862,855,1,0,0,0,862,856,1,0,0,
		0,862,857,1,0,0,0,862,858,1,0,0,0,862,859,1,0,0,0,862,860,1,0,0,0,862,
		861,1,0,0,0,863,21,1,0,0,0,864,872,3,510,255,0,865,872,3,512,256,0,866,
		872,3,514,257,0,867,872,3,516,258,0,868,872,3,518,259,0,869,872,3,520,
		260,0,870,872,3,524,262,0,871,864,1,0,0,0,871,865,1,0,0,0,871,866,1,0,
		0,0,871,867,1,0,0,0,871,868,1,0,0,0,871,869,1,0,0,0,871,870,1,0,0,0,872,
		23,1,0,0,0,873,874,5,32,0,0,874,876,7,0,0,0,875,877,3,614,307,0,876,875,
		1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,878,882,3,558,279,0,879,881,3,
		62,31,0,880,879,1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,
		0,883,25,1,0,0,0,884,882,1,0,0,0,885,887,5,32,0,0,886,888,3,66,33,0,887,
		886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,891,5,404,0,0,890,892,
		3,614,307,0,891,890,1,0,0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,894,3,
		530,265,0,894,895,5,114,0,0,895,896,5,588,0,0,896,903,3,68,34,0,897,898,
		5,114,0,0,898,900,5,362,0,0,899,901,5,110,0,0,900,899,1,0,0,0,900,901,
		1,0,0,0,901,902,1,0,0,0,902,904,5,545,0,0,903,897,1,0,0,0,903,904,1,0,
		0,0,904,906,1,0,0,0,905,907,3,76,38,0,906,905,1,0,0,0,906,907,1,0,0,0,
		907,910,1,0,0,0,908,909,5,359,0,0,909,911,5,1135,0,0,910,908,1,0,0,0,910,
		911,1,0,0,0,911,912,1,0,0,0,912,913,5,390,0,0,913,914,3,376,188,0,914,
		27,1,0,0,0,915,918,5,32,0,0,916,917,5,119,0,0,917,919,5,137,0,0,918,916,
		1,0,0,0,918,919,1,0,0,0,919,921,1,0,0,0,920,922,7,1,0,0,921,920,1,0,0,
		0,921,922,1,0,0,0,922,924,1,0,0,0,923,925,7,2,0,0,924,923,1,0,0,0,924,
		925,1,0,0,0,925,926,1,0,0,0,926,930,5,78,0,0,927,928,5,74,0,0,928,929,
		5,110,0,0,929,931,5,57,0,0,930,927,1,0,0,0,930,931,1,0,0,0,931,932,1,0,
		0,0,932,934,3,558,279,0,933,935,3,78,39,0,934,933,1,0,0,0,934,935,1,0,
		0,0,935,936,1,0,0,0,936,937,5,114,0,0,937,938,3,532,266,0,938,940,3,594,
		297,0,939,941,3,616,308,0,940,939,1,0,0,0,940,941,1,0,0,0,941,945,1,0,
		0,0,942,944,3,80,40,0,943,942,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,
		945,946,1,0,0,0,946,960,1,0,0,0,947,945,1,0,0,0,948,950,5,327,0,0,949,
		951,5,1111,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,959,
		7,3,0,0,953,955,5,99,0,0,954,956,5,1111,0,0,955,954,1,0,0,0,955,956,1,
		0,0,0,956,957,1,0,0,0,957,959,7,4,0,0,958,948,1,0,0,0,958,953,1,0,0,0,
		959,962,1,0,0,0,960,958,1,0,0,0,960,961,1,0,0,0,961,29,1,0,0,0,962,960,
		1,0,0,0,963,964,5,32,0,0,964,965,5,462,0,0,965,966,5,70,0,0,966,967,3,
		558,279,0,967,968,5,5,0,0,968,969,5,642,0,0,969,975,5,1135,0,0,970,972,
		5,440,0,0,971,973,5,1111,0,0,972,971,1,0,0,0,972,973,1,0,0,0,973,974,1,
		0,0,0,974,976,3,566,283,0,975,970,1,0,0,0,975,976,1,0,0,0,976,982,1,0,
		0,0,977,979,5,643,0,0,978,980,5,1111,0,0,979,978,1,0,0,0,979,980,1,0,0,
		0,980,981,1,0,0,0,981,983,3,566,283,0,982,977,1,0,0,0,982,983,1,0,0,0,
		983,989,1,0,0,0,984,986,5,556,0,0,985,987,5,1111,0,0,986,985,1,0,0,0,986,
		987,1,0,0,0,987,988,1,0,0,0,988,990,3,566,283,0,989,984,1,0,0,0,989,990,
		1,0,0,0,990,996,1,0,0,0,991,993,5,515,0,0,992,994,5,1111,0,0,993,992,1,
		0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,997,3,558,279,0,996,991,1,0,
		0,0,996,997,1,0,0,0,997,999,1,0,0,0,998,1000,5,657,0,0,999,998,1,0,0,0,
		999,1000,1,0,0,0,1000,1006,1,0,0,0,1001,1003,5,359,0,0,1002,1004,5,1111,
		0,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,1007,5,
		1135,0,0,1006,1001,1,0,0,0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1010,
		5,398,0,0,1009,1011,5,1111,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,
		1012,1,0,0,0,1012,1013,3,548,274,0,1013,31,1,0,0,0,1014,1016,5,32,0,0,
		1015,1017,3,66,33,0,1016,1015,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,
		0,0,1018,1019,5,127,0,0,1019,1020,3,530,265,0,1020,1022,5,1120,0,0,1021,
		1023,3,82,41,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,1028,1,0,0,0,1024,
		1025,5,1122,0,0,1025,1027,3,82,41,0,1026,1024,1,0,0,0,1027,1030,1,0,0,
		0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1031,1,0,0,0,1030,1028,1,0,
		0,0,1031,1035,5,1121,0,0,1032,1034,3,86,43,0,1033,1032,1,0,0,0,1034,1037,
		1,0,0,0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,1035,
		1,0,0,0,1038,1039,3,376,188,0,1039,33,1,0,0,0,1040,1042,5,32,0,0,1041,
		1043,3,66,33,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,
		1045,5,425,0,0,1045,1046,3,530,265,0,1046,1048,5,1120,0,0,1047,1049,3,
		84,42,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1054,1,0,0,0,1050,1051,
		5,1122,0,0,1051,1053,3,84,42,0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,
		1052,1,0,0,0,1054,1055,1,0,0,0,1055,1057,1,0,0,0,1056,1054,1,0,0,0,1057,
		1058,5,1121,0,0,1058,1059,5,578,0,0,1059,1063,3,578,289,0,1060,1062,3,
		86,43,0,1061,1060,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,
		1,0,0,0,1064,1068,1,0,0,0,1065,1063,1,0,0,0,1066,1069,3,376,188,0,1067,
		1069,3,392,196,0,1068,1066,1,0,0,0,1068,1067,1,0,0,0,1069,35,1,0,0,0,1070,
		1071,5,32,0,0,1071,1075,5,579,0,0,1072,1073,5,74,0,0,1073,1074,5,110,0,
		0,1074,1076,5,57,0,0,1075,1072,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,
		0,0,1077,1082,3,534,267,0,1078,1079,5,1122,0,0,1079,1081,3,534,267,0,1080,
		1078,1,0,0,0,1081,1084,1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,
		37,1,0,0,0,1084,1082,1,0,0,0,1085,1086,5,32,0,0,1086,1087,5,591,0,0,1087,
		1088,3,558,279,0,1088,1089,5,64,0,0,1089,1090,5,379,0,0,1090,1091,5,662,
		0,0,1091,1092,7,5,0,0,1092,1093,5,528,0,0,1093,1094,5,1120,0,0,1094,1099,
		3,88,44,0,1095,1096,5,1122,0,0,1096,1098,3,88,44,0,1097,1095,1,0,0,0,1098,
		1101,1,0,0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,1102,1,0,0,0,1101,
		1099,1,0,0,0,1102,1103,5,1121,0,0,1103,39,1,0,0,0,1104,1107,5,32,0,0,1105,
		1106,5,119,0,0,1106,1108,5,137,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,
		1108,1110,1,0,0,0,1109,1111,5,632,0,0,1110,1109,1,0,0,0,1110,1111,1,0,
		0,0,1111,1112,1,0,0,0,1112,1114,5,166,0,0,1113,1115,3,614,307,0,1114,1113,
		1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1124,3,532,266,0,1117,
		1118,5,94,0,0,1118,1125,3,532,266,0,1119,1120,5,1120,0,0,1120,1121,5,94,
		0,0,1121,1122,3,532,266,0,1122,1123,5,1121,0,0,1123,1125,1,0,0,0,1124,
		1117,1,0,0,0,1124,1119,1,0,0,0,1125,1195,1,0,0,0,1126,1129,5,32,0,0,1127,
		1128,5,119,0,0,1128,1130,5,137,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,
		1130,1132,1,0,0,0,1131,1133,5,632,0,0,1132,1131,1,0,0,0,1132,1133,1,0,
		0,0,1133,1134,1,0,0,0,1134,1136,5,166,0,0,1135,1137,3,614,307,0,1136,1135,
		1,0,0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,1140,3,532,266,0,1139,
		1141,3,90,45,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1152,1,0,0,0,1142,
		1149,3,108,54,0,1143,1145,5,1122,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,
		0,1145,1146,1,0,0,0,1146,1148,3,108,54,0,1147,1144,1,0,0,0,1148,1151,1,
		0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1153,1,0,0,0,1151,1149,
		1,0,0,0,1152,1142,1,0,0,0,1152,1153,1,0,0,0,1153,1155,1,0,0,0,1154,1156,
		3,114,57,0,1155,1154,1,0,0,0,1155,1156,1,0,0,0,1156,1158,1,0,0,0,1157,
		1159,7,6,0,0,1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1161,1,0,0,0,1160,
		1162,5,12,0,0,1161,1160,1,0,0,0,1161,1162,1,0,0,0,1162,1163,1,0,0,0,1163,
		1164,3,204,102,0,1164,1195,1,0,0,0,1165,1168,5,32,0,0,1166,1167,5,119,
		0,0,1167,1169,5,137,0,0,1168,1166,1,0,0,0,1168,1169,1,0,0,0,1169,1171,
		1,0,0,0,1170,1172,5,632,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,
		1,0,0,0,1173,1175,5,166,0,0,1174,1176,3,614,307,0,1175,1174,1,0,0,0,1175,
		1176,1,0,0,0,1176,1177,1,0,0,0,1177,1178,3,532,266,0,1178,1189,3,90,45,
		0,1179,1186,3,108,54,0,1180,1182,5,1122,0,0,1181,1180,1,0,0,0,1181,1182,
		1,0,0,0,1182,1183,1,0,0,0,1183,1185,3,108,54,0,1184,1181,1,0,0,0,1185,
		1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,1190,1,0,0,0,1188,
		1186,1,0,0,0,1189,1179,1,0,0,0,1189,1190,1,0,0,0,1190,1192,1,0,0,0,1191,
		1193,3,114,57,0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,1195,1,0,0,0,
		1194,1104,1,0,0,0,1194,1126,1,0,0,0,1194,1165,1,0,0,0,1195,41,1,0,0,0,
		1196,1197,5,32,0,0,1197,1198,5,630,0,0,1198,1199,3,558,279,0,1199,1200,
		5,5,0,0,1200,1201,5,380,0,0,1201,1205,5,1135,0,0,1202,1203,5,416,0,0,1203,
		1204,5,1111,0,0,1204,1206,3,566,283,0,1205,1202,1,0,0,0,1205,1206,1,0,
		0,0,1206,1212,1,0,0,0,1207,1209,5,398,0,0,1208,1210,5,1111,0,0,1209,1208,
		1,0,0,0,1209,1210,1,0,0,0,1210,1211,1,0,0,0,1211,1213,3,548,274,0,1212,
		1207,1,0,0,0,1212,1213,1,0,0,0,1213,43,1,0,0,0,1214,1215,5,32,0,0,1215,
		1216,5,630,0,0,1216,1217,3,558,279,0,1217,1218,5,5,0,0,1218,1219,5,380,
		0,0,1219,1220,5,1135,0,0,1220,1221,5,180,0,0,1221,1222,5,462,0,0,1222,
		1223,5,70,0,0,1223,1229,3,558,279,0,1224,1226,5,412,0,0,1225,1227,5,1111,
		0,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,0,0,1228,1230,3,
		566,283,0,1229,1224,1,0,0,0,1229,1230,1,0,0,0,1230,1236,1,0,0,0,1231,1233,
		5,440,0,0,1232,1234,5,1111,0,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,
		1235,1,0,0,0,1235,1237,3,566,283,0,1236,1231,1,0,0,0,1236,1237,1,0,0,0,
		1237,1243,1,0,0,0,1238,1240,5,332,0,0,1239,1241,5,1111,0,0,1240,1239,1,
		0,0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1244,3,566,283,0,1243,1238,
		1,0,0,0,1243,1244,1,0,0,0,1244,1250,1,0,0,0,1245,1247,5,488,0,0,1246,1248,
		5,1111,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,
		1251,3,566,283,0,1250,1245,1,0,0,0,1250,1251,1,0,0,0,1251,1257,1,0,0,0,
		1252,1254,5,515,0,0,1253,1255,5,1111,0,0,1254,1253,1,0,0,0,1254,1255,1,
		0,0,0,1255,1256,1,0,0,0,1256,1258,3,558,279,0,1257,1252,1,0,0,0,1257,1258,
		1,0,0,0,1258,1260,1,0,0,0,1259,1261,5,657,0,0,1260,1259,1,0,0,0,1260,1261,
		1,0,0,0,1261,1267,1,0,0,0,1262,1264,5,359,0,0,1263,1265,5,1111,0,0,1264,
		1263,1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,0,0,0,1266,1268,5,1135,0,0,
		1267,1262,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1271,5,398,
		0,0,1270,1272,5,1111,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,
		1,0,0,0,1273,1274,3,548,274,0,1274,45,1,0,0,0,1275,1278,5,32,0,0,1276,
		1277,5,119,0,0,1277,1279,5,137,0,0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,
		1279,1281,1,0,0,0,1280,1282,3,66,33,0,1281,1280,1,0,0,0,1281,1282,1,0,
		0,0,1282,1283,1,0,0,0,1283,1284,5,171,0,0,1284,1285,3,530,265,0,1285,1286,
		7,7,0,0,1286,1287,7,8,0,0,1287,1288,5,114,0,0,1288,1289,3,532,266,0,1289,
		1290,5,62,0,0,1290,1291,5,50,0,0,1291,1294,5,583,0,0,1292,1293,7,9,0,0,
		1293,1295,3,530,265,0,1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,
		0,0,0,1296,1297,3,376,188,0,1297,47,1,0,0,0,1298,1300,5,186,0,0,1299,1301,
		5,555,0,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,1303,
		3,50,25,0,1303,49,1,0,0,0,1304,1316,3,52,26,0,1305,1306,5,1120,0,0,1306,
		1311,3,54,27,0,1307,1308,5,1122,0,0,1308,1310,3,54,27,0,1309,1307,1,0,
		0,0,1310,1313,1,0,0,0,1311,1309,1,0,0,0,1311,1312,1,0,0,0,1312,1314,1,
		0,0,0,1313,1311,1,0,0,0,1314,1315,5,1121,0,0,1315,1317,1,0,0,0,1316,1305,
		1,0,0,0,1316,1317,1,0,0,0,1317,1318,1,0,0,0,1318,1319,5,12,0,0,1319,1320,
		5,1120,0,0,1320,1321,3,10,5,0,1321,1324,5,1121,0,0,1322,1323,5,1122,0,
		0,1323,1325,3,50,25,0,1324,1322,1,0,0,0,1324,1325,1,0,0,0,1325,51,1,0,
		0,0,1326,1327,3,558,279,0,1327,53,1,0,0,0,1328,1329,3,558,279,0,1329,55,
		1,0,0,0,1330,1333,5,32,0,0,1331,1332,5,119,0,0,1332,1334,5,137,0,0,1333,
		1331,1,0,0,0,1333,1334,1,0,0,0,1334,1338,1,0,0,0,1335,1336,5,327,0,0,1336,
		1337,5,1111,0,0,1337,1339,7,10,0,0,1338,1335,1,0,0,0,1338,1339,1,0,0,0,
		1339,1341,1,0,0,0,1340,1342,3,66,33,0,1341,1340,1,0,0,0,1341,1342,1,0,
		0,0,1342,1346,1,0,0,0,1343,1344,5,155,0,0,1344,1345,5,589,0,0,1345,1347,
		7,11,0,0,1346,1343,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1349,
		5,654,0,0,1349,1354,3,530,265,0,1350,1351,5,1120,0,0,1351,1352,3,590,295,
		0,1352,1353,5,1121,0,0,1353,1355,1,0,0,0,1354,1350,1,0,0,0,1354,1355,1,
		0,0,0,1355,1356,1,0,0,0,1356,1358,5,12,0,0,1357,1359,3,48,24,0,1358,1357,
		1,0,0,0,1358,1359,1,0,0,0,1359,1360,1,0,0,0,1360,1367,3,204,102,0,1361,
		1363,5,186,0,0,1362,1364,7,12,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,
		1364,1365,1,0,0,0,1365,1366,5,25,0,0,1366,1368,5,116,0,0,1367,1361,1,0,
		0,0,1367,1368,1,0,0,0,1368,57,1,0,0,0,1369,1372,5,32,0,0,1370,1371,5,119,
		0,0,1371,1373,5,137,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1375,
		1,0,0,0,1374,1376,5,632,0,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,1377,
		1,0,0,0,1377,1379,5,590,0,0,1378,1380,3,614,307,0,1379,1378,1,0,0,0,1379,
		1380,1,0,0,0,1380,1381,1,0,0,0,1381,1386,3,530,265,0,1382,1385,3,60,30,
		0,1383,1385,3,108,54,0,1384,1382,1,0,0,0,1384,1383,1,0,0,0,1385,1388,1,
		0,0,0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,59,1,0,0,0,1388,1386,1,
		0,0,0,1389,1391,5,438,0,0,1390,1392,7,13,0,0,1391,1390,1,0,0,0,1391,1392,
		1,0,0,0,1392,1393,1,0,0,0,1393,1429,3,564,282,0,1394,1396,5,107,0,0,1395,
		1397,5,1111,0,0,1396,1395,1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,0,0,
		1398,1429,3,564,282,0,1399,1400,5,508,0,0,1400,1429,5,107,0,0,1401,1429,
		5,513,0,0,1402,1404,5,106,0,0,1403,1405,5,1111,0,0,1404,1403,1,0,0,0,1404,
		1405,1,0,0,0,1405,1406,1,0,0,0,1406,1429,3,564,282,0,1407,1408,5,508,0,
		0,1408,1429,5,106,0,0,1409,1429,5,512,0,0,1410,1412,5,612,0,0,1411,1413,
		7,14,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1429,
		3,564,282,0,1415,1417,5,342,0,0,1416,1418,5,1111,0,0,1417,1416,1,0,0,0,
		1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,1429,3,564,282,0,1420,1429,5,
		509,0,0,1421,1429,5,377,0,0,1422,1429,5,511,0,0,1423,1425,5,574,0,0,1424,
		1426,7,14,0,0,1425,1424,1,0,0,0,1425,1426,1,0,0,0,1426,1427,1,0,0,0,1427,
		1429,3,564,282,0,1428,1389,1,0,0,0,1428,1394,1,0,0,0,1428,1399,1,0,0,0,
		1428,1401,1,0,0,0,1428,1402,1,0,0,0,1428,1407,1,0,0,0,1428,1409,1,0,0,
		0,1428,1410,1,0,0,0,1428,1415,1,0,0,0,1428,1420,1,0,0,0,1428,1421,1,0,
		0,0,1428,1422,1,0,0,0,1428,1423,1,0,0,0,1429,61,1,0,0,0,1430,1432,5,40,
		0,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,1435,3,
		64,32,0,1434,1436,5,1111,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,
		1439,1,0,0,0,1437,1440,3,544,272,0,1438,1440,5,40,0,0,1439,1437,1,0,0,
		0,1439,1438,1,0,0,0,1440,1450,1,0,0,0,1441,1443,5,40,0,0,1442,1441,1,0,
		0,0,1442,1443,1,0,0,0,1443,1444,1,0,0,0,1444,1446,5,26,0,0,1445,1447,5,
		1111,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1450,
		3,546,273,0,1449,1431,1,0,0,0,1449,1442,1,0,0,0,1450,63,1,0,0,0,1451,1452,
		5,24,0,0,1452,1457,5,149,0,0,1453,1457,5,818,0,0,1454,1455,5,216,0,0,1455,
		1457,5,149,0,0,1456,1451,1,0,0,0,1456,1453,1,0,0,0,1456,1454,1,0,0,0,1457,
		65,1,0,0,0,1458,1459,5,383,0,0,1459,1466,5,1111,0,0,1460,1467,3,540,270,
		0,1461,1464,5,35,0,0,1462,1463,5,1120,0,0,1463,1465,5,1121,0,0,1464,1462,
		1,0,0,0,1464,1465,1,0,0,0,1465,1467,1,0,0,0,1466,1460,1,0,0,0,1466,1461,
		1,0,0,0,1467,67,1,0,0,0,1468,1469,5,329,0,0,1469,1473,3,70,35,0,1470,1472,
		3,72,36,0,1471,1470,1,0,0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,
		1,0,0,0,1474,1503,1,0,0,0,1475,1473,1,0,0,0,1476,1479,5,406,0,0,1477,1480,
		3,564,282,0,1478,1480,3,660,330,0,1479,1477,1,0,0,0,1479,1478,1,0,0,0,
		1480,1481,1,0,0,0,1481,1490,3,74,37,0,1482,1483,5,613,0,0,1483,1487,3,
		70,35,0,1484,1486,3,72,36,0,1485,1484,1,0,0,0,1486,1489,1,0,0,0,1487,1485,
		1,0,0,0,1487,1488,1,0,0,0,1488,1491,1,0,0,0,1489,1487,1,0,0,0,1490,1482,
		1,0,0,0,1490,1491,1,0,0,0,1491,1500,1,0,0,0,1492,1493,5,397,0,0,1493,1497,
		3,70,35,0,1494,1496,3,72,36,0,1495,1494,1,0,0,0,1496,1499,1,0,0,0,1497,
		1495,1,0,0,0,1497,1498,1,0,0,0,1498,1501,1,0,0,0,1499,1497,1,0,0,0,1500,
		1492,1,0,0,0,1500,1501,1,0,0,0,1501,1503,1,0,0,0,1502,1468,1,0,0,0,1502,
		1476,1,0,0,0,1503,69,1,0,0,0,1504,1509,5,306,0,0,1505,1509,3,568,284,0,
		1506,1509,3,564,282,0,1507,1509,3,660,330,0,1508,1504,1,0,0,0,1508,1505,
		1,0,0,0,1508,1506,1,0,0,0,1508,1507,1,0,0,0,1509,71,1,0,0,0,1510,1511,
		5,1107,0,0,1511,1514,5,83,0,0,1512,1515,3,564,282,0,1513,1515,3,660,330,
		0,1514,1512,1,0,0,0,1514,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1517,3,74,
		37,0,1517,73,1,0,0,0,1518,1532,3,684,342,0,1519,1532,5,215,0,0,1520,1532,
		5,234,0,0,1521,1532,5,235,0,0,1522,1532,5,236,0,0,1523,1532,5,237,0,0,
		1524,1532,5,238,0,0,1525,1532,5,239,0,0,1526,1532,5,240,0,0,1527,1532,
		5,241,0,0,1528,1532,5,242,0,0,1529,1532,5,243,0,0,1530,1532,5,244,0,0,
		1531,1518,1,0,0,0,1531,1519,1,0,0,0,1531,1520,1,0,0,0,1531,1521,1,0,0,
		0,1531,1522,1,0,0,0,1531,1523,1,0,0,0,1531,1524,1,0,0,0,1531,1525,1,0,
		0,0,1531,1526,1,0,0,0,1531,1527,1,0,0,0,1531,1528,1,0,0,0,1531,1529,1,
		0,0,0,1531,1530,1,0,0,0,1532,75,1,0,0,0,1533,1539,5,394,0,0,1534,1539,
		5,387,0,0,1535,1536,5,387,0,0,1536,1537,5,114,0,0,1537,1539,5,597,0,0,
		1538,1533,1,0,0,0,1538,1534,1,0,0,0,1538,1535,1,0,0,0,1539,77,1,0,0,0,
		1540,1541,5,181,0,0,1541,1542,7,15,0,0,1542,79,1,0,0,0,1543,1545,5,454,
		0,0,1544,1546,5,1111,0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,1547,
		1,0,0,0,1547,1574,3,566,283,0,1548,1574,3,78,39,0,1549,1550,5,186,0,0,
		1550,1551,5,532,0,0,1551,1574,3,558,279,0,1552,1553,5,359,0,0,1553,1574,
		5,1135,0,0,1554,1574,7,16,0,0,1555,1557,5,852,0,0,1556,1558,5,1111,0,0,
		1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1559,1,0,0,0,1559,1574,5,1135,
		0,0,1560,1562,5,976,0,0,1561,1563,5,1111,0,0,1562,1561,1,0,0,0,1562,1563,
		1,0,0,0,1563,1564,1,0,0,0,1564,1574,5,1135,0,0,1565,1566,5,353,0,0,1566,
		1567,5,1111,0,0,1567,1574,7,17,0,0,1568,1572,5,76,0,0,1569,1570,5,110,
		0,0,1570,1572,5,76,0,0,1571,1568,1,0,0,0,1571,1569,1,0,0,0,1572,1574,1,
		0,0,0,1573,1543,1,0,0,0,1573,1548,1,0,0,0,1573,1549,1,0,0,0,1573,1552,
		1,0,0,0,1573,1554,1,0,0,0,1573,1555,1,0,0,0,1573,1560,1,0,0,0,1573,1565,
		1,0,0,0,1573,1571,1,0,0,0,1574,81,1,0,0,0,1575,1577,7,18,0,0,1576,1575,
		1,0,0,0,1576,1577,1,0,0,0,1577,1578,1,0,0,0,1578,1579,3,558,279,0,1579,
		1580,3,578,289,0,1580,83,1,0,0,0,1581,1582,3,558,279,0,1582,1583,3,578,
		289,0,1583,85,1,0,0,0,1584,1585,5,359,0,0,1585,1608,5,1135,0,0,1586,1587,
		5,455,0,0,1587,1608,5,155,0,0,1588,1590,5,110,0,0,1589,1588,1,0,0,0,1589,
		1590,1,0,0,0,1590,1591,1,0,0,0,1591,1608,5,45,0,0,1592,1593,5,372,0,0,
		1593,1603,5,155,0,0,1594,1595,5,508,0,0,1595,1603,5,155,0,0,1596,1597,
		5,131,0,0,1597,1598,5,155,0,0,1598,1603,5,379,0,0,1599,1600,5,108,0,0,
		1600,1601,5,155,0,0,1601,1603,5,379,0,0,1602,1592,1,0,0,0,1602,1594,1,
		0,0,0,1602,1596,1,0,0,0,1602,1599,1,0,0,0,1603,1608,1,0,0,0,1604,1605,
		5,155,0,0,1605,1606,5,589,0,0,1606,1608,7,11,0,0,1607,1584,1,0,0,0,1607,
		1586,1,0,0,0,1607,1589,1,0,0,0,1607,1602,1,0,0,0,1607,1604,1,0,0,0,1608,
		87,1,0,0,0,1609,1610,5,433,0,0,1610,1624,5,1135,0,0,1611,1612,5,37,0,0,
		1612,1624,5,1135,0,0,1613,1614,5,648,0,0,1614,1624,5,1135,0,0,1615,1616,
		5,536,0,0,1616,1624,5,1135,0,0,1617,1618,5,600,0,0,1618,1624,5,1135,0,
		0,1619,1620,5,529,0,0,1620,1624,5,1135,0,0,1621,1622,5,541,0,0,1622,1624,
		3,564,282,0,1623,1609,1,0,0,0,1623,1611,1,0,0,0,1623,1613,1,0,0,0,1623,
		1615,1,0,0,0,1623,1617,1,0,0,0,1623,1619,1,0,0,0,1623,1621,1,0,0,0,1624,
		89,1,0,0,0,1625,1626,5,1120,0,0,1626,1631,3,92,46,0,1627,1628,5,1122,0,
		0,1628,1630,3,92,46,0,1629,1627,1,0,0,0,1630,1633,1,0,0,0,1631,1629,1,
		0,0,0,1631,1632,1,0,0,0,1632,1634,1,0,0,0,1633,1631,1,0,0,0,1634,1635,
		5,1121,0,0,1635,91,1,0,0,0,1636,1637,3,558,279,0,1637,1638,3,94,47,0,1638,
		1642,1,0,0,0,1639,1642,3,98,49,0,1640,1642,3,106,53,0,1641,1636,1,0,0,
		0,1641,1639,1,0,0,0,1641,1640,1,0,0,0,1642,93,1,0,0,0,1643,1647,3,578,
		289,0,1644,1646,3,96,48,0,1645,1644,1,0,0,0,1646,1649,1,0,0,0,1647,1645,
		1,0,0,0,1647,1648,1,0,0,0,1648,95,1,0,0,0,1649,1647,1,0,0,0,1650,1704,
		3,574,287,0,1651,1652,5,40,0,0,1652,1704,3,606,303,0,1653,1704,5,656,0,
		0,1654,1704,5,446,0,0,1655,1660,5,333,0,0,1656,1657,5,114,0,0,1657,1658,
		5,178,0,0,1658,1660,3,608,304,0,1659,1655,1,0,0,0,1659,1656,1,0,0,0,1660,
		1704,1,0,0,0,1661,1663,5,126,0,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,
		1664,1,0,0,0,1664,1704,5,88,0,0,1665,1667,5,175,0,0,1666,1668,5,88,0,0,
		1667,1666,1,0,0,0,1667,1668,1,0,0,0,1668,1704,1,0,0,0,1669,1670,5,359,
		0,0,1670,1704,5,1135,0,0,1671,1672,5,357,0,0,1672,1704,7,19,0,0,1673,1674,
		5,619,0,0,1674,1704,7,20,0,0,1675,1704,3,100,50,0,1676,1677,5,26,0,0,1677,
		1704,3,546,273,0,1678,1679,5,67,0,0,1679,1681,5,8,0,0,1680,1678,1,0,0,
		0,1680,1681,1,0,0,0,1681,1682,1,0,0,0,1682,1683,5,12,0,0,1683,1684,5,1120,
		0,0,1684,1685,3,660,330,0,1685,1687,5,1121,0,0,1686,1688,7,21,0,0,1687,
		1686,1,0,0,0,1687,1688,1,0,0,0,1688,1704,1,0,0,0,1689,1690,5,233,0,0,1690,
		1691,5,40,0,0,1691,1704,5,652,0,0,1692,1694,5,29,0,0,1693,1695,3,558,279,
		0,1694,1693,1,0,0,0,1694,1695,1,0,0,0,1695,1697,1,0,0,0,1696,1692,1,0,
		0,0,1696,1697,1,0,0,0,1697,1698,1,0,0,0,1698,1699,5,25,0,0,1699,1700,5,
		1120,0,0,1700,1701,3,660,330,0,1701,1702,5,1121,0,0,1702,1704,1,0,0,0,
		1703,1650,1,0,0,0,1703,1651,1,0,0,0,1703,1653,1,0,0,0,1703,1654,1,0,0,
		0,1703,1659,1,0,0,0,1703,1662,1,0,0,0,1703,1665,1,0,0,0,1703,1669,1,0,
		0,0,1703,1671,1,0,0,0,1703,1673,1,0,0,0,1703,1675,1,0,0,0,1703,1676,1,
		0,0,0,1703,1680,1,0,0,0,1703,1689,1,0,0,0,1703,1696,1,0,0,0,1704,97,1,
		0,0,0,1705,1707,5,29,0,0,1706,1708,3,558,279,0,1707,1706,1,0,0,0,1707,
		1708,1,0,0,0,1708,1710,1,0,0,0,1709,1705,1,0,0,0,1709,1710,1,0,0,0,1710,
		1711,1,0,0,0,1711,1712,5,126,0,0,1712,1714,5,88,0,0,1713,1715,3,558,279,
		0,1714,1713,1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,0,0,0,1716,1718,3,78,
		39,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,0,0,1719,1723,3,
		594,297,0,1720,1722,3,80,40,0,1721,1720,1,0,0,0,1722,1725,1,0,0,0,1723,
		1721,1,0,0,0,1723,1724,1,0,0,0,1724,1775,1,0,0,0,1725,1723,1,0,0,0,1726,
		1728,5,29,0,0,1727,1729,3,558,279,0,1728,1727,1,0,0,0,1728,1729,1,0,0,
		0,1729,1731,1,0,0,0,1730,1726,1,0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,
		0,0,1732,1734,5,175,0,0,1733,1735,7,22,0,0,1734,1733,1,0,0,0,1734,1735,
		1,0,0,0,1735,1737,1,0,0,0,1736,1738,3,558,279,0,1737,1736,1,0,0,0,1737,
		1738,1,0,0,0,1738,1740,1,0,0,0,1739,1741,3,78,39,0,1740,1739,1,0,0,0,1740,
		1741,1,0,0,0,1741,1742,1,0,0,0,1742,1746,3,594,297,0,1743,1745,3,80,40,
		0,1744,1743,1,0,0,0,1745,1748,1,0,0,0,1746,1744,1,0,0,0,1746,1747,1,0,
		0,0,1747,1775,1,0,0,0,1748,1746,1,0,0,0,1749,1751,5,29,0,0,1750,1752,3,
		558,279,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,1749,
		1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1756,5,64,0,0,1756,1758,
		5,88,0,0,1757,1759,3,558,279,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,
		1760,1,0,0,0,1760,1761,3,594,297,0,1761,1762,3,100,50,0,1762,1775,1,0,
		0,0,1763,1765,5,29,0,0,1764,1766,3,558,279,0,1765,1764,1,0,0,0,1765,1766,
		1,0,0,0,1766,1768,1,0,0,0,1767,1763,1,0,0,0,1767,1768,1,0,0,0,1768,1769,
		1,0,0,0,1769,1770,5,25,0,0,1770,1771,5,1120,0,0,1771,1772,3,660,330,0,
		1772,1773,5,1121,0,0,1773,1775,1,0,0,0,1774,1709,1,0,0,0,1774,1730,1,0,
		0,0,1774,1753,1,0,0,0,1774,1767,1,0,0,0,1775,99,1,0,0,0,1776,1777,5,132,
		0,0,1777,1779,3,532,266,0,1778,1780,3,594,297,0,1779,1778,1,0,0,0,1779,
		1780,1,0,0,0,1780,1783,1,0,0,0,1781,1782,5,105,0,0,1782,1784,7,23,0,0,
		1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,1786,1,0,0,0,1785,1787,3,102,
		51,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,101,1,0,0,0,1788,1789,5,
		114,0,0,1789,1790,5,42,0,0,1790,1794,3,104,52,0,1791,1792,5,114,0,0,1792,
		1793,5,178,0,0,1793,1795,3,104,52,0,1794,1791,1,0,0,0,1794,1795,1,0,0,
		0,1795,1805,1,0,0,0,1796,1797,5,114,0,0,1797,1798,5,178,0,0,1798,1802,
		3,104,52,0,1799,1800,5,114,0,0,1800,1801,5,42,0,0,1801,1803,3,104,52,0,
		1802,1799,1,0,0,0,1802,1803,1,0,0,0,1803,1805,1,0,0,0,1804,1788,1,0,0,
		0,1804,1796,1,0,0,0,1805,103,1,0,0,0,1806,1813,5,140,0,0,1807,1813,5,20,
		0,0,1808,1809,5,149,0,0,1809,1813,5,112,0,0,1810,1811,5,508,0,0,1811,1813,
		5,324,0,0,1812,1806,1,0,0,0,1812,1807,1,0,0,0,1812,1808,1,0,0,0,1812,1810,
		1,0,0,0,1813,105,1,0,0,0,1814,1816,7,22,0,0,1815,1817,3,558,279,0,1816,
		1815,1,0,0,0,1816,1817,1,0,0,0,1817,1819,1,0,0,0,1818,1820,3,78,39,0,1819,
		1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1825,3,594,297,0,
		1822,1824,3,80,40,0,1823,1822,1,0,0,0,1824,1827,1,0,0,0,1825,1823,1,0,
		0,0,1825,1826,1,0,0,0,1826,1843,1,0,0,0,1827,1825,1,0,0,0,1828,1830,7,
		24,0,0,1829,1831,7,22,0,0,1830,1829,1,0,0,0,1830,1831,1,0,0,0,1831,1833,
		1,0,0,0,1832,1834,3,558,279,0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,
		1835,1,0,0,0,1835,1839,3,594,297,0,1836,1838,3,80,40,0,1837,1836,1,0,0,
		0,1838,1841,1,0,0,0,1839,1837,1,0,0,0,1839,1840,1,0,0,0,1840,1843,1,0,
		0,0,1841,1839,1,0,0,0,1842,1814,1,0,0,0,1842,1828,1,0,0,0,1843,107,1,0,
		0,0,1844,1846,5,398,0,0,1845,1847,5,1111,0,0,1846,1845,1,0,0,0,1846,1847,
		1,0,0,0,1847,1849,1,0,0,0,1848,1850,3,548,274,0,1849,1848,1,0,0,0,1849,
		1850,1,0,0,0,1850,2007,1,0,0,0,1851,1853,5,852,0,0,1852,1854,5,1111,0,
		0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,1855,1,0,0,0,1855,2007,5,1135,
		0,0,1856,1858,5,332,0,0,1857,1859,5,1111,0,0,1858,1857,1,0,0,0,1858,1859,
		1,0,0,0,1859,1860,1,0,0,0,1860,2007,3,564,282,0,1861,1863,5,333,0,0,1862,
		1864,5,1111,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,1865,1,0,0,0,
		1865,2007,3,564,282,0,1866,1868,5,334,0,0,1867,1869,5,1111,0,0,1868,1867,
		1,0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,2007,3,564,282,0,1871,
		1873,5,40,0,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,
		1876,3,64,32,0,1875,1877,5,1111,0,0,1876,1875,1,0,0,0,1876,1877,1,0,0,
		0,1877,1880,1,0,0,0,1878,1881,3,544,272,0,1879,1881,5,40,0,0,1880,1878,
		1,0,0,0,1880,1879,1,0,0,0,1881,2007,1,0,0,0,1882,1884,7,25,0,0,1883,1885,
		5,1111,0,0,1884,1883,1,0,0,0,1884,1885,1,0,0,0,1885,1886,1,0,0,0,1886,
		2007,7,26,0,0,1887,1889,5,40,0,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,
		1890,1,0,0,0,1890,1892,5,26,0,0,1891,1893,5,1111,0,0,1892,1891,1,0,0,0,
		1892,1893,1,0,0,0,1893,1894,1,0,0,0,1894,2007,3,546,273,0,1895,1897,5,
		359,0,0,1896,1898,5,1111,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,
		1899,1,0,0,0,1899,2007,5,1135,0,0,1900,1902,5,364,0,0,1901,1903,5,1111,
		0,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,2007,7,
		27,0,0,1905,1907,5,367,0,0,1906,1908,5,1111,0,0,1907,1906,1,0,0,0,1907,
		1908,1,0,0,0,1908,1909,1,0,0,0,1909,2007,5,1135,0,0,1910,1911,7,28,0,0,
		1911,1913,5,386,0,0,1912,1914,5,1111,0,0,1913,1912,1,0,0,0,1913,1914,1,
		0,0,0,1914,1915,1,0,0,0,1915,2007,5,1135,0,0,1916,1918,5,384,0,0,1917,
		1919,5,1111,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,
		1920,2007,7,26,0,0,1921,1923,5,395,0,0,1922,1924,5,1111,0,0,1923,1922,
		1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,2007,5,1135,0,0,1926,
		1927,5,78,0,0,1927,1929,5,386,0,0,1928,1930,5,1111,0,0,1929,1928,1,0,0,
		0,1929,1930,1,0,0,0,1930,1931,1,0,0,0,1931,2007,5,1135,0,0,1932,1934,5,
		442,0,0,1933,1935,5,1111,0,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,
		1936,1,0,0,0,1936,2007,7,29,0,0,1937,1939,5,454,0,0,1938,1940,5,1111,0,
		0,1939,1938,1,0,0,0,1939,1940,1,0,0,0,1940,1941,1,0,0,0,1941,2007,3,566,
		283,0,1942,1944,5,487,0,0,1943,1945,5,1111,0,0,1944,1943,1,0,0,0,1944,
		1945,1,0,0,0,1945,1946,1,0,0,0,1946,2007,3,564,282,0,1947,1949,5,497,0,
		0,1948,1950,5,1111,0,0,1949,1948,1,0,0,0,1949,1950,1,0,0,0,1950,1951,1,
		0,0,0,1951,2007,3,564,282,0,1952,1954,5,530,0,0,1953,1955,5,1111,0,0,1954,
		1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,2007,7,30,0,0,1957,
		1959,5,536,0,0,1958,1960,5,1111,0,0,1959,1958,1,0,0,0,1959,1960,1,0,0,
		0,1960,1961,1,0,0,0,1961,2007,5,1135,0,0,1962,1964,5,585,0,0,1963,1965,
		5,1111,0,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1966,1,0,0,0,1966,
		2007,7,31,0,0,1967,1968,5,612,0,0,1968,2007,5,636,0,0,1969,1971,5,976,
		0,0,1970,1972,5,1111,0,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,1973,
		1,0,0,0,1973,2007,5,1135,0,0,1974,1976,5,614,0,0,1975,1977,5,1111,0,0,
		1976,1975,1,0,0,0,1976,1977,1,0,0,0,1977,1978,1,0,0,0,1978,2007,7,30,0,
		0,1979,1981,5,615,0,0,1980,1982,5,1111,0,0,1981,1980,1,0,0,0,1981,1982,
		1,0,0,0,1982,1983,1,0,0,0,1983,2007,7,30,0,0,1984,1986,5,616,0,0,1985,
		1987,5,1111,0,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,
		1988,2007,3,564,282,0,1989,1990,5,630,0,0,1990,1992,3,558,279,0,1991,1993,
		3,112,56,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,2007,1,0,0,0,1994,
		1995,5,631,0,0,1995,1996,5,1111,0,0,1996,2007,3,110,55,0,1997,2007,3,112,
		56,0,1998,2000,5,174,0,0,1999,2001,5,1111,0,0,2000,1999,1,0,0,0,2000,2001,
		1,0,0,0,2001,2002,1,0,0,0,2002,2003,5,1120,0,0,2003,2004,3,592,296,0,2004,
		2005,5,1121,0,0,2005,2007,1,0,0,0,2006,1844,1,0,0,0,2006,1851,1,0,0,0,
		2006,1856,1,0,0,0,2006,1861,1,0,0,0,2006,1866,1,0,0,0,2006,1872,1,0,0,
		0,2006,1882,1,0,0,0,2006,1888,1,0,0,0,2006,1895,1,0,0,0,2006,1900,1,0,
		0,0,2006,1905,1,0,0,0,2006,1910,1,0,0,0,2006,1916,1,0,0,0,2006,1921,1,
		0,0,0,2006,1926,1,0,0,0,2006,1932,1,0,0,0,2006,1937,1,0,0,0,2006,1942,
		1,0,0,0,2006,1947,1,0,0,0,2006,1952,1,0,0,0,2006,1957,1,0,0,0,2006,1962,
		1,0,0,0,2006,1967,1,0,0,0,2006,1969,1,0,0,0,2006,1974,1,0,0,0,2006,1979,
		1,0,0,0,2006,1984,1,0,0,0,2006,1989,1,0,0,0,2006,1994,1,0,0,0,2006,1997,
		1,0,0,0,2006,1998,1,0,0,0,2007,109,1,0,0,0,2008,2009,7,32,0,0,2009,111,
		1,0,0,0,2010,2011,5,619,0,0,2011,2012,7,20,0,0,2012,113,1,0,0,0,2013,2014,
		5,125,0,0,2014,2015,5,18,0,0,2015,2018,3,116,58,0,2016,2017,5,535,0,0,
		2017,2019,3,564,282,0,2018,2016,1,0,0,0,2018,2019,1,0,0,0,2019,2027,1,
		0,0,0,2020,2021,5,624,0,0,2021,2022,5,18,0,0,2022,2025,3,118,59,0,2023,
		2024,5,625,0,0,2024,2026,3,564,282,0,2025,2023,1,0,0,0,2025,2026,1,0,0,
		0,2026,2028,1,0,0,0,2027,2020,1,0,0,0,2027,2028,1,0,0,0,2028,2040,1,0,
		0,0,2029,2030,5,1120,0,0,2030,2035,3,120,60,0,2031,2032,5,1122,0,0,2032,
		2034,3,120,60,0,2033,2031,1,0,0,0,2034,2037,1,0,0,0,2035,2033,1,0,0,0,
		2035,2036,1,0,0,0,2036,2038,1,0,0,0,2037,2035,1,0,0,0,2038,2039,5,1121,
		0,0,2039,2041,1,0,0,0,2040,2029,1,0,0,0,2040,2041,1,0,0,0,2041,115,1,0,
		0,0,2042,2044,5,96,0,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,
		0,0,0,2045,2046,5,431,0,0,2046,2047,5,1120,0,0,2047,2048,3,660,330,0,2048,
		2049,5,1121,0,0,2049,2088,1,0,0,0,2050,2052,5,96,0,0,2051,2050,1,0,0,0,
		2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,2057,5,88,0,0,2054,2055,5,327,
		0,0,2055,2056,5,1111,0,0,2056,2058,7,33,0,0,2057,2054,1,0,0,0,2057,2058,
		1,0,0,0,2058,2059,1,0,0,0,2059,2060,5,1120,0,0,2060,2061,3,590,295,0,2061,
		2062,5,1121,0,0,2062,2088,1,0,0,0,2063,2073,5,129,0,0,2064,2065,5,1120,
		0,0,2065,2066,3,660,330,0,2066,2067,5,1121,0,0,2067,2074,1,0,0,0,2068,
		2069,5,356,0,0,2069,2070,5,1120,0,0,2070,2071,3,590,295,0,2071,2072,5,
		1121,0,0,2072,2074,1,0,0,0,2073,2064,1,0,0,0,2073,2068,1,0,0,0,2074,2088,
		1,0,0,0,2075,2085,5,460,0,0,2076,2077,5,1120,0,0,2077,2078,3,660,330,0,
		2078,2079,5,1121,0,0,2079,2086,1,0,0,0,2080,2081,5,356,0,0,2081,2082,5,
		1120,0,0,2082,2083,3,590,295,0,2083,2084,5,1121,0,0,2084,2086,1,0,0,0,
		2085,2076,1,0,0,0,2085,2080,1,0,0,0,2086,2088,1,0,0,0,2087,2043,1,0,0,
		0,2087,2051,1,0,0,0,2087,2063,1,0,0,0,2087,2075,1,0,0,0,2088,117,1,0,0,
		0,2089,2091,5,96,0,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,
		0,0,2092,2093,5,431,0,0,2093,2094,5,1120,0,0,2094,2095,3,660,330,0,2095,
		2096,5,1121,0,0,2096,2111,1,0,0,0,2097,2099,5,96,0,0,2098,2097,1,0,0,0,
		2098,2099,1,0,0,0,2099,2100,1,0,0,0,2100,2104,5,88,0,0,2101,2102,5,327,
		0,0,2102,2103,5,1111,0,0,2103,2105,7,33,0,0,2104,2101,1,0,0,0,2104,2105,
		1,0,0,0,2105,2106,1,0,0,0,2106,2107,5,1120,0,0,2107,2108,3,590,295,0,2108,
		2109,5,1121,0,0,2109,2111,1,0,0,0,2110,2090,1,0,0,0,2110,2098,1,0,0,0,
		2111,119,1,0,0,0,2112,2113,5,125,0,0,2113,2114,3,558,279,0,2114,2115,5,
		182,0,0,2115,2116,5,458,0,0,2116,2117,5,634,0,0,2117,2118,5,1120,0,0,2118,
		2123,3,122,61,0,2119,2120,5,1122,0,0,2120,2122,3,122,61,0,2121,2119,1,
		0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,0,0,2124,2126,
		1,0,0,0,2125,2123,1,0,0,0,2126,2130,5,1121,0,0,2127,2129,3,128,64,0,2128,
		2127,1,0,0,0,2129,2132,1,0,0,0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,
		2144,1,0,0,0,2132,2130,1,0,0,0,2133,2134,5,1120,0,0,2134,2139,3,126,63,
		0,2135,2136,5,1122,0,0,2136,2138,3,126,63,0,2137,2135,1,0,0,0,2138,2141,
		1,0,0,0,2139,2137,1,0,0,0,2139,2140,1,0,0,0,2140,2142,1,0,0,0,2141,2139,
		1,0,0,0,2142,2143,5,1121,0,0,2143,2145,1,0,0,0,2144,2133,1,0,0,0,2144,
		2145,1,0,0,0,2145,2259,1,0,0,0,2146,2147,5,125,0,0,2147,2148,3,558,279,
		0,2148,2149,5,182,0,0,2149,2150,5,458,0,0,2150,2151,5,634,0,0,2151,2155,
		3,122,61,0,2152,2154,3,128,64,0,2153,2152,1,0,0,0,2154,2157,1,0,0,0,2155,
		2153,1,0,0,0,2155,2156,1,0,0,0,2156,2169,1,0,0,0,2157,2155,1,0,0,0,2158,
		2159,5,1120,0,0,2159,2164,3,126,63,0,2160,2161,5,1122,0,0,2161,2163,3,
		126,63,0,2162,2160,1,0,0,0,2163,2166,1,0,0,0,2164,2162,1,0,0,0,2164,2165,
		1,0,0,0,2165,2167,1,0,0,0,2166,2164,1,0,0,0,2167,2168,5,1121,0,0,2168,
		2170,1,0,0,0,2169,2158,1,0,0,0,2169,2170,1,0,0,0,2170,2259,1,0,0,0,2171,
		2172,5,125,0,0,2172,2173,3,558,279,0,2173,2174,5,182,0,0,2174,2175,5,77,
		0,0,2175,2176,5,1120,0,0,2176,2181,3,122,61,0,2177,2178,5,1122,0,0,2178,
		2180,3,122,61,0,2179,2177,1,0,0,0,2180,2183,1,0,0,0,2181,2179,1,0,0,0,
		2181,2182,1,0,0,0,2182,2184,1,0,0,0,2183,2181,1,0,0,0,2184,2188,5,1121,
		0,0,2185,2187,3,128,64,0,2186,2185,1,0,0,0,2187,2190,1,0,0,0,2188,2186,
		1,0,0,0,2188,2189,1,0,0,0,2189,2202,1,0,0,0,2190,2188,1,0,0,0,2191,2192,
		5,1120,0,0,2192,2197,3,126,63,0,2193,2194,5,1122,0,0,2194,2196,3,126,63,
		0,2195,2193,1,0,0,0,2196,2199,1,0,0,0,2197,2195,1,0,0,0,2197,2198,1,0,
		0,0,2198,2200,1,0,0,0,2199,2197,1,0,0,0,2200,2201,5,1121,0,0,2201,2203,
		1,0,0,0,2202,2191,1,0,0,0,2202,2203,1,0,0,0,2203,2259,1,0,0,0,2204,2205,
		5,125,0,0,2205,2206,3,558,279,0,2206,2207,5,182,0,0,2207,2208,5,77,0,0,
		2208,2209,5,1120,0,0,2209,2214,3,124,62,0,2210,2211,5,1122,0,0,2211,2213,
		3,124,62,0,2212,2210,1,0,0,0,2213,2216,1,0,0,0,2214,2212,1,0,0,0,2214,
		2215,1,0,0,0,2215,2217,1,0,0,0,2216,2214,1,0,0,0,2217,2221,5,1121,0,0,
		2218,2220,3,128,64,0,2219,2218,1,0,0,0,2220,2223,1,0,0,0,2221,2219,1,0,
		0,0,2221,2222,1,0,0,0,2222,2235,1,0,0,0,2223,2221,1,0,0,0,2224,2225,5,
		1120,0,0,2225,2230,3,126,63,0,2226,2227,5,1122,0,0,2227,2229,3,126,63,
		0,2228,2226,1,0,0,0,2229,2232,1,0,0,0,2230,2228,1,0,0,0,2230,2231,1,0,
		0,0,2231,2233,1,0,0,0,2232,2230,1,0,0,0,2233,2234,5,1121,0,0,2234,2236,
		1,0,0,0,2235,2224,1,0,0,0,2235,2236,1,0,0,0,2236,2259,1,0,0,0,2237,2238,
		5,125,0,0,2238,2242,3,558,279,0,2239,2241,3,128,64,0,2240,2239,1,0,0,0,
		2241,2244,1,0,0,0,2242,2240,1,0,0,0,2242,2243,1,0,0,0,2243,2256,1,0,0,
		0,2244,2242,1,0,0,0,2245,2246,5,1120,0,0,2246,2251,3,126,63,0,2247,2248,
		5,1122,0,0,2248,2250,3,126,63,0,2249,2247,1,0,0,0,2250,2253,1,0,0,0,2251,
		2249,1,0,0,0,2251,2252,1,0,0,0,2252,2254,1,0,0,0,2253,2251,1,0,0,0,2254,
		2255,5,1121,0,0,2255,2257,1,0,0,0,2256,2245,1,0,0,0,2256,2257,1,0,0,0,
		2257,2259,1,0,0,0,2258,2112,1,0,0,0,2258,2146,1,0,0,0,2258,2171,1,0,0,
		0,2258,2204,1,0,0,0,2258,2237,1,0,0,0,2259,121,1,0,0,0,2260,2264,3,576,
		288,0,2261,2264,3,660,330,0,2262,2264,5,106,0,0,2263,2260,1,0,0,0,2263,
		2261,1,0,0,0,2263,2262,1,0,0,0,2264,123,1,0,0,0,2265,2266,5,1120,0,0,2266,
		2269,3,122,61,0,2267,2268,5,1122,0,0,2268,2270,3,122,61,0,2269,2267,1,
		0,0,0,2270,2271,1,0,0,0,2271,2269,1,0,0,0,2271,2272,1,0,0,0,2272,2273,
		1,0,0,0,2273,2274,5,1121,0,0,2274,125,1,0,0,0,2275,2276,5,624,0,0,2276,
		2280,3,558,279,0,2277,2279,3,128,64,0,2278,2277,1,0,0,0,2279,2282,1,0,
		0,0,2280,2278,1,0,0,0,2280,2281,1,0,0,0,2281,127,1,0,0,0,2282,2280,1,0,
		0,0,2283,2285,5,40,0,0,2284,2283,1,0,0,0,2284,2285,1,0,0,0,2285,2287,1,
		0,0,0,2286,2288,5,619,0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,2289,
		1,0,0,0,2289,2291,5,398,0,0,2290,2292,5,1111,0,0,2291,2290,1,0,0,0,2291,
		2292,1,0,0,0,2292,2293,1,0,0,0,2293,2332,3,548,274,0,2294,2296,5,359,0,
		0,2295,2297,5,1111,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,2298,1,
		0,0,0,2298,2332,5,1135,0,0,2299,2300,5,379,0,0,2300,2302,5,386,0,0,2301,
		2303,5,1111,0,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,2304,1,0,0,0,
		2304,2332,5,1135,0,0,2305,2306,5,78,0,0,2306,2308,5,386,0,0,2307,2309,
		5,1111,0,0,2308,2307,1,0,0,0,2308,2309,1,0,0,0,2309,2310,1,0,0,0,2310,
		2332,5,1135,0,0,2311,2313,5,487,0,0,2312,2314,5,1111,0,0,2313,2312,1,0,
		0,0,2313,2314,1,0,0,0,2314,2315,1,0,0,0,2315,2332,3,564,282,0,2316,2318,
		5,497,0,0,2317,2319,5,1111,0,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,
		2320,1,0,0,0,2320,2332,3,564,282,0,2321,2323,5,630,0,0,2322,2324,5,1111,
		0,0,2323,2322,1,0,0,0,2323,2324,1,0,0,0,2324,2325,1,0,0,0,2325,2332,3,
		558,279,0,2326,2328,5,515,0,0,2327,2329,5,1111,0,0,2328,2327,1,0,0,0,2328,
		2329,1,0,0,0,2329,2330,1,0,0,0,2330,2332,3,558,279,0,2331,2284,1,0,0,0,
		2331,2294,1,0,0,0,2331,2299,1,0,0,0,2331,2305,1,0,0,0,2331,2311,1,0,0,
		0,2331,2316,1,0,0,0,2331,2321,1,0,0,0,2331,2326,1,0,0,0,2332,129,1,0,0,
		0,2333,2334,5,7,0,0,2334,2336,7,0,0,0,2335,2337,3,558,279,0,2336,2335,
		1,0,0,0,2336,2337,1,0,0,0,2337,2339,1,0,0,0,2338,2340,3,62,31,0,2339,2338,
		1,0,0,0,2340,2341,1,0,0,0,2341,2339,1,0,0,0,2341,2342,1,0,0,0,2342,2352,
		1,0,0,0,2343,2344,5,7,0,0,2344,2345,7,0,0,0,2345,2346,3,558,279,0,2346,
		2347,5,647,0,0,2347,2348,5,379,0,0,2348,2349,5,386,0,0,2349,2350,5,503,
		0,0,2350,2352,1,0,0,0,2351,2333,1,0,0,0,2351,2343,1,0,0,0,2352,131,1,0,
		0,0,2353,2355,5,7,0,0,2354,2356,3,66,33,0,2355,2354,1,0,0,0,2355,2356,
		1,0,0,0,2356,2357,1,0,0,0,2357,2358,5,404,0,0,2358,2362,3,530,265,0,2359,
		2360,5,114,0,0,2360,2361,5,588,0,0,2361,2363,3,68,34,0,2362,2359,1,0,0,
		0,2362,2363,1,0,0,0,2363,2370,1,0,0,0,2364,2365,5,114,0,0,2365,2367,5,
		362,0,0,2366,2368,5,110,0,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2369,
		1,0,0,0,2369,2371,5,545,0,0,2370,2364,1,0,0,0,2370,2371,1,0,0,0,2371,2375,
		1,0,0,0,2372,2373,5,135,0,0,2373,2374,5,169,0,0,2374,2376,3,530,265,0,
		2375,2372,1,0,0,0,2375,2376,1,0,0,0,2376,2378,1,0,0,0,2377,2379,3,76,38,
		0,2378,2377,1,0,0,0,2378,2379,1,0,0,0,2379,2382,1,0,0,0,2380,2381,5,359,
		0,0,2381,2383,5,1135,0,0,2382,2380,1,0,0,0,2382,2383,1,0,0,0,2383,2386,
		1,0,0,0,2384,2385,5,390,0,0,2385,2387,3,376,188,0,2386,2384,1,0,0,0,2386,
		2387,1,0,0,0,2387,133,1,0,0,0,2388,2389,5,7,0,0,2389,2390,5,425,0,0,2390,
		2394,3,530,265,0,2391,2393,3,86,43,0,2392,2391,1,0,0,0,2393,2396,1,0,0,
		0,2394,2392,1,0,0,0,2394,2395,1,0,0,0,2395,135,1,0,0,0,2396,2394,1,0,0,
		0,2397,2398,5,7,0,0,2398,2399,5,444,0,0,2399,2400,5,582,0,0,2400,2401,
		5,768,0,0,2401,2402,5,464,0,0,2402,2403,5,88,0,0,2403,137,1,0,0,0,2404,
		2405,5,7,0,0,2405,2406,5,462,0,0,2406,2407,5,70,0,0,2407,2408,3,558,279,
		0,2408,2409,5,5,0,0,2409,2410,5,642,0,0,2410,2416,5,1135,0,0,2411,2413,
		5,440,0,0,2412,2414,5,1111,0,0,2413,2412,1,0,0,0,2413,2414,1,0,0,0,2414,
		2415,1,0,0,0,2415,2417,3,566,283,0,2416,2411,1,0,0,0,2416,2417,1,0,0,0,
		2417,2419,1,0,0,0,2418,2420,5,657,0,0,2419,2418,1,0,0,0,2419,2420,1,0,
		0,0,2420,2421,1,0,0,0,2421,2423,5,398,0,0,2422,2424,5,1111,0,0,2423,2422,
		1,0,0,0,2423,2424,1,0,0,0,2424,2425,1,0,0,0,2425,2426,3,548,274,0,2426,
		139,1,0,0,0,2427,2428,5,7,0,0,2428,2429,5,127,0,0,2429,2433,3,530,265,
		0,2430,2432,3,86,43,0,2431,2430,1,0,0,0,2432,2435,1,0,0,0,2433,2431,1,
		0,0,0,2433,2434,1,0,0,0,2434,141,1,0,0,0,2435,2433,1,0,0,0,2436,2437,5,
		7,0,0,2437,2438,5,591,0,0,2438,2439,3,558,279,0,2439,2440,5,528,0,0,2440,
		2441,5,1120,0,0,2441,2446,3,88,44,0,2442,2443,5,1122,0,0,2443,2445,3,88,
		44,0,2444,2442,1,0,0,0,2445,2448,1,0,0,0,2446,2444,1,0,0,0,2446,2447,1,
		0,0,0,2447,2449,1,0,0,0,2448,2446,1,0,0,0,2449,2450,5,1121,0,0,2450,143,
		1,0,0,0,2451,2453,5,7,0,0,2452,2454,7,1,0,0,2453,2452,1,0,0,0,2453,2454,
		1,0,0,0,2454,2456,1,0,0,0,2455,2457,5,75,0,0,2456,2455,1,0,0,0,2456,2457,
		1,0,0,0,2457,2458,1,0,0,0,2458,2459,5,166,0,0,2459,2461,3,532,266,0,2460,
		2462,3,616,308,0,2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2471,1,0,0,0,
		2463,2468,3,152,76,0,2464,2465,5,1122,0,0,2465,2467,3,152,76,0,2466,2464,
		1,0,0,0,2467,2470,1,0,0,0,2468,2466,1,0,0,0,2468,2469,1,0,0,0,2469,2472,
		1,0,0,0,2470,2468,1,0,0,0,2471,2463,1,0,0,0,2471,2472,1,0,0,0,2472,2474,
		1,0,0,0,2473,2475,3,114,57,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,
		145,1,0,0,0,2476,2477,5,7,0,0,2477,2478,5,630,0,0,2478,2479,3,558,279,
		0,2479,2480,7,34,0,0,2480,2481,5,380,0,0,2481,2485,5,1135,0,0,2482,2483,
		5,440,0,0,2483,2484,5,1111,0,0,2484,2486,3,566,283,0,2485,2482,1,0,0,0,
		2485,2486,1,0,0,0,2486,2488,1,0,0,0,2487,2489,5,657,0,0,2488,2487,1,0,
		0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2492,5,398,0,0,2491,2493,
		5,1111,0,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,
		2495,3,548,274,0,2495,147,1,0,0,0,2496,2500,5,7,0,0,2497,2498,5,327,0,
		0,2498,2499,5,1111,0,0,2499,2501,7,10,0,0,2500,2497,1,0,0,0,2500,2501,
		1,0,0,0,2501,2503,1,0,0,0,2502,2504,3,66,33,0,2503,2502,1,0,0,0,2503,2504,
		1,0,0,0,2504,2508,1,0,0,0,2505,2506,5,155,0,0,2506,2507,5,589,0,0,2507,
		2509,7,11,0,0,2508,2505,1,0,0,0,2508,2509,1,0,0,0,2509,2510,1,0,0,0,2510,
		2511,5,654,0,0,2511,2516,3,530,265,0,2512,2513,5,1120,0,0,2513,2514,3,
		590,295,0,2514,2515,5,1121,0,0,2515,2517,1,0,0,0,2516,2512,1,0,0,0,2516,
		2517,1,0,0,0,2517,2518,1,0,0,0,2518,2519,5,12,0,0,2519,2526,3,204,102,
		0,2520,2522,5,186,0,0,2521,2523,7,12,0,0,2522,2521,1,0,0,0,2522,2523,1,
		0,0,0,2523,2524,1,0,0,0,2524,2525,5,25,0,0,2525,2527,5,116,0,0,2526,2520,
		1,0,0,0,2526,2527,1,0,0,0,2527,149,1,0,0,0,2528,2529,5,7,0,0,2529,2531,
		5,590,0,0,2530,2532,3,612,306,0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,
		2533,1,0,0,0,2533,2535,3,530,265,0,2534,2536,3,60,30,0,2535,2534,1,0,0,
		0,2536,2537,1,0,0,0,2537,2535,1,0,0,0,2537,2538,1,0,0,0,2538,151,1,0,0,
		0,2539,2546,3,108,54,0,2540,2542,5,1122,0,0,2541,2540,1,0,0,0,2541,2542,
		1,0,0,0,2542,2543,1,0,0,0,2543,2545,3,108,54,0,2544,2541,1,0,0,0,2545,
		2548,1,0,0,0,2546,2544,1,0,0,0,2546,2547,1,0,0,0,2547,2942,1,0,0,0,2548,
		2546,1,0,0,0,2549,2551,5,5,0,0,2550,2552,5,27,0,0,2551,2550,1,0,0,0,2551,
		2552,1,0,0,0,2552,2554,1,0,0,0,2553,2555,3,614,307,0,2554,2553,1,0,0,0,
		2554,2555,1,0,0,0,2555,2556,1,0,0,0,2556,2557,3,558,279,0,2557,2561,3,
		94,47,0,2558,2562,5,418,0,0,2559,2560,5,325,0,0,2560,2562,3,558,279,0,
		2561,2558,1,0,0,0,2561,2559,1,0,0,0,2561,2562,1,0,0,0,2562,2942,1,0,0,
		0,2563,2565,5,5,0,0,2564,2566,5,27,0,0,2565,2564,1,0,0,0,2565,2566,1,0,
		0,0,2566,2568,1,0,0,0,2567,2569,3,614,307,0,2568,2567,1,0,0,0,2568,2569,
		1,0,0,0,2569,2570,1,0,0,0,2570,2571,5,1120,0,0,2571,2572,3,558,279,0,2572,
		2579,3,94,47,0,2573,2574,5,1122,0,0,2574,2575,3,558,279,0,2575,2576,3,
		94,47,0,2576,2578,1,0,0,0,2577,2573,1,0,0,0,2578,2581,1,0,0,0,2579,2577,
		1,0,0,0,2579,2580,1,0,0,0,2580,2582,1,0,0,0,2581,2579,1,0,0,0,2582,2583,
		5,1121,0,0,2583,2942,1,0,0,0,2584,2585,5,5,0,0,2585,2587,7,22,0,0,2586,
		2588,3,614,307,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,2590,1,0,0,0,
		2589,2591,3,558,279,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2593,1,
		0,0,0,2592,2594,3,78,39,0,2593,2592,1,0,0,0,2593,2594,1,0,0,0,2594,2595,
		1,0,0,0,2595,2599,3,594,297,0,2596,2598,3,80,40,0,2597,2596,1,0,0,0,2598,
		2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,0,2600,2942,1,0,0,0,2601,
		2599,1,0,0,0,2602,2607,5,5,0,0,2603,2605,5,29,0,0,2604,2606,3,558,279,
		0,2605,2604,1,0,0,0,2605,2606,1,0,0,0,2606,2608,1,0,0,0,2607,2603,1,0,
		0,0,2607,2608,1,0,0,0,2608,2609,1,0,0,0,2609,2610,5,126,0,0,2610,2612,
		5,88,0,0,2611,2613,3,558,279,0,2612,2611,1,0,0,0,2612,2613,1,0,0,0,2613,
		2615,1,0,0,0,2614,2616,3,78,39,0,2615,2614,1,0,0,0,2615,2616,1,0,0,0,2616,
		2617,1,0,0,0,2617,2621,3,594,297,0,2618,2620,3,80,40,0,2619,2618,1,0,0,
		0,2620,2623,1,0,0,0,2621,2619,1,0,0,0,2621,2622,1,0,0,0,2622,2942,1,0,
		0,0,2623,2621,1,0,0,0,2624,2629,5,5,0,0,2625,2627,5,29,0,0,2626,2628,3,
		558,279,0,2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,2630,1,0,0,0,2629,2625,
		1,0,0,0,2629,2630,1,0,0,0,2630,2631,1,0,0,0,2631,2633,5,175,0,0,2632,2634,
		7,22,0,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,2636,1,0,0,0,2635,2637,
		3,558,279,0,2636,2635,1,0,0,0,2636,2637,1,0,0,0,2637,2639,1,0,0,0,2638,
		2640,3,78,39,0,2639,2638,1,0,0,0,2639,2640,1,0,0,0,2640,2641,1,0,0,0,2641,
		2645,3,594,297,0,2642,2644,3,80,40,0,2643,2642,1,0,0,0,2644,2647,1,0,0,
		0,2645,2643,1,0,0,0,2645,2646,1,0,0,0,2646,2942,1,0,0,0,2647,2645,1,0,
		0,0,2648,2649,5,5,0,0,2649,2651,7,24,0,0,2650,2652,7,22,0,0,2651,2650,
		1,0,0,0,2651,2652,1,0,0,0,2652,2654,1,0,0,0,2653,2655,3,558,279,0,2654,
		2653,1,0,0,0,2654,2655,1,0,0,0,2655,2656,1,0,0,0,2656,2660,3,594,297,0,
		2657,2659,3,80,40,0,2658,2657,1,0,0,0,2659,2662,1,0,0,0,2660,2658,1,0,
		0,0,2660,2661,1,0,0,0,2661,2942,1,0,0,0,2662,2660,1,0,0,0,2663,2668,5,
		5,0,0,2664,2666,5,29,0,0,2665,2667,3,558,279,0,2666,2665,1,0,0,0,2666,
		2667,1,0,0,0,2667,2669,1,0,0,0,2668,2664,1,0,0,0,2668,2669,1,0,0,0,2669,
		2670,1,0,0,0,2670,2671,5,64,0,0,2671,2673,5,88,0,0,2672,2674,3,614,307,
		0,2673,2672,1,0,0,0,2673,2674,1,0,0,0,2674,2676,1,0,0,0,2675,2677,3,558,
		279,0,2676,2675,1,0,0,0,2676,2677,1,0,0,0,2677,2678,1,0,0,0,2678,2679,
		3,594,297,0,2679,2680,3,100,50,0,2680,2942,1,0,0,0,2681,2686,5,5,0,0,2682,
		2684,5,29,0,0,2683,2685,3,558,279,0,2684,2683,1,0,0,0,2684,2685,1,0,0,
		0,2685,2687,1,0,0,0,2686,2682,1,0,0,0,2686,2687,1,0,0,0,2687,2688,1,0,
		0,0,2688,2689,5,25,0,0,2689,2690,5,1120,0,0,2690,2691,3,660,330,0,2691,
		2692,5,1121,0,0,2692,2942,1,0,0,0,2693,2695,5,327,0,0,2694,2696,5,1111,
		0,0,2695,2694,1,0,0,0,2695,2696,1,0,0,0,2696,2697,1,0,0,0,2697,2942,7,
		35,0,0,2698,2700,5,7,0,0,2699,2701,5,27,0,0,2700,2699,1,0,0,0,2700,2701,
		1,0,0,0,2701,2702,1,0,0,0,2702,2708,3,558,279,0,2703,2704,5,149,0,0,2704,
		2705,5,40,0,0,2705,2709,3,606,303,0,2706,2707,5,49,0,0,2707,2709,5,40,
		0,0,2708,2703,1,0,0,0,2708,2706,1,0,0,0,2709,2942,1,0,0,0,2710,2712,5,
		23,0,0,2711,2713,5,27,0,0,2712,2711,1,0,0,0,2712,2713,1,0,0,0,2713,2715,
		1,0,0,0,2714,2716,3,612,306,0,2715,2714,1,0,0,0,2715,2716,1,0,0,0,2716,
		2717,1,0,0,0,2717,2718,3,558,279,0,2718,2719,3,558,279,0,2719,2723,3,94,
		47,0,2720,2724,5,418,0,0,2721,2722,5,325,0,0,2722,2724,3,558,279,0,2723,
		2720,1,0,0,0,2723,2721,1,0,0,0,2723,2724,1,0,0,0,2724,2942,1,0,0,0,2725,
		2726,5,135,0,0,2726,2727,5,27,0,0,2727,2728,3,558,279,0,2728,2729,5,169,
		0,0,2729,2730,3,558,279,0,2730,2942,1,0,0,0,2731,2733,5,99,0,0,2732,2734,
		5,1111,0,0,2733,2732,1,0,0,0,2733,2734,1,0,0,0,2734,2735,1,0,0,0,2735,
		2942,7,4,0,0,2736,2738,5,499,0,0,2737,2739,5,27,0,0,2738,2737,1,0,0,0,
		2738,2739,1,0,0,0,2739,2741,1,0,0,0,2740,2742,3,612,306,0,2741,2740,1,
		0,0,0,2741,2742,1,0,0,0,2742,2743,1,0,0,0,2743,2744,3,558,279,0,2744,2748,
		3,94,47,0,2745,2749,5,418,0,0,2746,2747,5,325,0,0,2747,2749,3,558,279,
		0,2748,2745,1,0,0,0,2748,2746,1,0,0,0,2748,2749,1,0,0,0,2749,2942,1,0,
		0,0,2750,2752,5,49,0,0,2751,2753,5,27,0,0,2752,2751,1,0,0,0,2752,2753,
		1,0,0,0,2753,2755,1,0,0,0,2754,2756,3,612,306,0,2755,2754,1,0,0,0,2755,
		2756,1,0,0,0,2756,2757,1,0,0,0,2757,2759,3,558,279,0,2758,2760,5,140,0,
		0,2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2942,1,0,0,0,2761,2762,5,49,
		0,0,2762,2764,7,36,0,0,2763,2765,3,612,306,0,2764,2763,1,0,0,0,2764,2765,
		1,0,0,0,2765,2766,1,0,0,0,2766,2942,3,558,279,0,2767,2768,5,49,0,0,2768,
		2769,5,126,0,0,2769,2942,5,88,0,0,2770,2771,5,135,0,0,2771,2772,7,22,0,
		0,2772,2773,3,558,279,0,2773,2774,5,169,0,0,2774,2775,3,558,279,0,2775,
		2942,1,0,0,0,2776,2777,5,7,0,0,2777,2778,5,78,0,0,2778,2779,3,558,279,
		0,2779,2780,7,16,0,0,2780,2942,1,0,0,0,2781,2782,5,49,0,0,2782,2784,7,
		22,0,0,2783,2785,3,612,306,0,2784,2783,1,0,0,0,2784,2785,1,0,0,0,2785,
		2786,1,0,0,0,2786,2942,3,558,279,0,2787,2788,5,49,0,0,2788,2789,5,64,0,
		0,2789,2791,5,88,0,0,2790,2792,3,612,306,0,2791,2790,1,0,0,0,2791,2792,
		1,0,0,0,2792,2793,1,0,0,0,2793,2942,3,558,279,0,2794,2795,5,387,0,0,2795,
		2942,5,89,0,0,2796,2797,5,394,0,0,2797,2942,5,89,0,0,2798,2800,5,135,0,
		0,2799,2801,7,37,0,0,2800,2799,1,0,0,0,2800,2801,1,0,0,0,2801,2804,1,0,
		0,0,2802,2805,3,558,279,0,2803,2805,3,530,265,0,2804,2802,1,0,0,0,2804,
		2803,1,0,0,0,2805,2942,1,0,0,0,2806,2807,5,120,0,0,2807,2808,5,18,0,0,
		2808,2942,3,590,295,0,2809,2810,5,31,0,0,2810,2811,5,169,0,0,2811,2812,
		5,24,0,0,2812,2813,5,149,0,0,2813,2816,3,544,272,0,2814,2815,5,26,0,0,
		2815,2817,3,546,273,0,2816,2814,1,0,0,0,2816,2817,1,0,0,0,2817,2942,1,
		0,0,0,2818,2820,5,40,0,0,2819,2818,1,0,0,0,2819,2820,1,0,0,0,2820,2821,
		1,0,0,0,2821,2822,5,24,0,0,2822,2823,5,149,0,0,2823,2824,5,1111,0,0,2824,
		2828,3,544,272,0,2825,2826,5,26,0,0,2826,2827,5,1111,0,0,2827,2829,3,546,
		273,0,2828,2825,1,0,0,0,2828,2829,1,0,0,0,2829,2942,1,0,0,0,2830,2831,
		5,388,0,0,2831,2942,5,630,0,0,2832,2833,5,437,0,0,2833,2942,5,630,0,0,
		2834,2942,5,63,0,0,2835,2836,7,38,0,0,2836,2942,5,651,0,0,2837,2838,5,
		5,0,0,2838,2840,5,125,0,0,2839,2841,3,614,307,0,2840,2839,1,0,0,0,2840,
		2841,1,0,0,0,2841,2842,1,0,0,0,2842,2843,5,1120,0,0,2843,2848,3,120,60,
		0,2844,2845,5,1122,0,0,2845,2847,3,120,60,0,2846,2844,1,0,0,0,2847,2850,
		1,0,0,0,2848,2846,1,0,0,0,2848,2849,1,0,0,0,2849,2851,1,0,0,0,2850,2848,
		1,0,0,0,2851,2852,5,1121,0,0,2852,2942,1,0,0,0,2853,2854,5,49,0,0,2854,
		2856,5,125,0,0,2855,2857,3,612,306,0,2856,2855,1,0,0,0,2856,2857,1,0,0,
		0,2857,2858,1,0,0,0,2858,2942,3,590,295,0,2859,2860,5,388,0,0,2860,2863,
		5,125,0,0,2861,2864,3,590,295,0,2862,2864,5,6,0,0,2863,2861,1,0,0,0,2863,
		2862,1,0,0,0,2864,2865,1,0,0,0,2865,2942,5,630,0,0,2866,2867,5,437,0,0,
		2867,2870,5,125,0,0,2868,2871,3,590,295,0,2869,2871,5,6,0,0,2870,2868,
		1,0,0,0,2870,2869,1,0,0,0,2871,2872,1,0,0,0,2872,2942,5,630,0,0,2873,2874,
		5,639,0,0,2874,2877,5,125,0,0,2875,2878,3,590,295,0,2876,2878,5,6,0,0,
		2877,2875,1,0,0,0,2877,2876,1,0,0,0,2878,2942,1,0,0,0,2879,2880,5,354,
		0,0,2880,2881,5,125,0,0,2881,2942,3,564,282,0,2882,2883,5,563,0,0,2883,
		2884,5,125,0,0,2884,2885,3,590,295,0,2885,2886,5,84,0,0,2886,2887,5,1120,
		0,0,2887,2892,3,120,60,0,2888,2889,5,1122,0,0,2889,2891,3,120,60,0,2890,
		2888,1,0,0,0,2891,2894,1,0,0,0,2892,2890,1,0,0,0,2892,2893,1,0,0,0,2893,
		2895,1,0,0,0,2894,2892,1,0,0,0,2895,2896,5,1121,0,0,2896,2942,1,0,0,0,
		2897,2898,5,407,0,0,2898,2899,5,125,0,0,2899,2900,3,558,279,0,2900,2901,
		5,186,0,0,2901,2902,5,166,0,0,2902,2905,3,532,266,0,2903,2904,7,38,0,0,
		2904,2906,5,651,0,0,2905,2903,1,0,0,0,2905,2906,1,0,0,0,2906,2942,1,0,
		0,0,2907,2908,5,9,0,0,2908,2911,5,125,0,0,2909,2912,3,590,295,0,2910,2912,
		5,6,0,0,2911,2909,1,0,0,0,2911,2910,1,0,0,0,2912,2942,1,0,0,0,2913,2914,
		5,25,0,0,2914,2917,5,125,0,0,2915,2918,3,590,295,0,2916,2918,5,6,0,0,2917,
		2915,1,0,0,0,2917,2916,1,0,0,0,2918,2942,1,0,0,0,2919,2920,5,115,0,0,2920,
		2923,5,125,0,0,2921,2924,3,590,295,0,2922,2924,5,6,0,0,2923,2921,1,0,0,
		0,2923,2922,1,0,0,0,2924,2942,1,0,0,0,2925,2926,5,553,0,0,2926,2929,5,
		125,0,0,2927,2930,3,590,295,0,2928,2930,5,6,0,0,2929,2927,1,0,0,0,2929,
		2928,1,0,0,0,2930,2942,1,0,0,0,2931,2932,5,564,0,0,2932,2935,5,125,0,0,
		2933,2936,3,590,295,0,2934,2936,5,6,0,0,2935,2933,1,0,0,0,2935,2934,1,
		0,0,0,2936,2942,1,0,0,0,2937,2938,5,562,0,0,2938,2942,5,534,0,0,2939,2940,
		5,647,0,0,2940,2942,5,534,0,0,2941,2539,1,0,0,0,2941,2549,1,0,0,0,2941,
		2563,1,0,0,0,2941,2584,1,0,0,0,2941,2602,1,0,0,0,2941,2624,1,0,0,0,2941,
		2648,1,0,0,0,2941,2663,1,0,0,0,2941,2681,1,0,0,0,2941,2693,1,0,0,0,2941,
		2698,1,0,0,0,2941,2710,1,0,0,0,2941,2725,1,0,0,0,2941,2731,1,0,0,0,2941,
		2736,1,0,0,0,2941,2750,1,0,0,0,2941,2761,1,0,0,0,2941,2767,1,0,0,0,2941,
		2770,1,0,0,0,2941,2776,1,0,0,0,2941,2781,1,0,0,0,2941,2787,1,0,0,0,2941,
		2794,1,0,0,0,2941,2796,1,0,0,0,2941,2798,1,0,0,0,2941,2806,1,0,0,0,2941,
		2809,1,0,0,0,2941,2819,1,0,0,0,2941,2830,1,0,0,0,2941,2832,1,0,0,0,2941,
		2834,1,0,0,0,2941,2835,1,0,0,0,2941,2837,1,0,0,0,2941,2853,1,0,0,0,2941,
		2859,1,0,0,0,2941,2866,1,0,0,0,2941,2873,1,0,0,0,2941,2879,1,0,0,0,2941,
		2882,1,0,0,0,2941,2897,1,0,0,0,2941,2907,1,0,0,0,2941,2913,1,0,0,0,2941,
		2919,1,0,0,0,2941,2925,1,0,0,0,2941,2931,1,0,0,0,2941,2937,1,0,0,0,2941,
		2939,1,0,0,0,2942,153,1,0,0,0,2943,2944,5,49,0,0,2944,2946,7,0,0,0,2945,
		2947,3,612,306,0,2946,2945,1,0,0,0,2946,2947,1,0,0,0,2947,2948,1,0,0,0,
		2948,2949,3,558,279,0,2949,155,1,0,0,0,2950,2951,5,49,0,0,2951,2953,5,
		404,0,0,2952,2954,3,612,306,0,2953,2952,1,0,0,0,2953,2954,1,0,0,0,2954,
		2955,1,0,0,0,2955,2956,3,530,265,0,2956,157,1,0,0,0,2957,2958,5,49,0,0,
		2958,2960,5,78,0,0,2959,2961,7,1,0,0,2960,2959,1,0,0,0,2960,2961,1,0,0,
		0,2961,2962,1,0,0,0,2962,2963,3,558,279,0,2963,2964,5,114,0,0,2964,2977,
		3,532,266,0,2965,2967,5,327,0,0,2966,2968,5,1111,0,0,2967,2966,1,0,0,0,
		2967,2968,1,0,0,0,2968,2969,1,0,0,0,2969,2976,7,39,0,0,2970,2972,5,99,
		0,0,2971,2973,5,1111,0,0,2972,2971,1,0,0,0,2972,2973,1,0,0,0,2973,2974,
		1,0,0,0,2974,2976,7,4,0,0,2975,2965,1,0,0,0,2975,2970,1,0,0,0,2976,2979,
		1,0,0,0,2977,2975,1,0,0,0,2977,2978,1,0,0,0,2978,2981,1,0,0,0,2979,2977,
		1,0,0,0,2980,2982,3,616,308,0,2981,2980,1,0,0,0,2981,2982,1,0,0,0,2982,
		159,1,0,0,0,2983,2984,5,49,0,0,2984,2985,5,462,0,0,2985,2986,5,70,0,0,
		2986,2987,3,558,279,0,2987,2988,5,398,0,0,2988,2989,5,1111,0,0,2989,2990,
		3,548,274,0,2990,161,1,0,0,0,2991,2992,5,49,0,0,2992,2994,5,127,0,0,2993,
		2995,3,612,306,0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2996,1,0,0,0,
		2996,2997,3,530,265,0,2997,163,1,0,0,0,2998,2999,5,49,0,0,2999,3001,5,
		425,0,0,3000,3002,3,612,306,0,3001,3000,1,0,0,0,3001,3002,1,0,0,0,3002,
		3003,1,0,0,0,3003,3004,3,530,265,0,3004,165,1,0,0,0,3005,3006,5,49,0,0,
		3006,3008,5,591,0,0,3007,3009,3,612,306,0,3008,3007,1,0,0,0,3008,3009,
		1,0,0,0,3009,3010,1,0,0,0,3010,3011,3,558,279,0,3011,167,1,0,0,0,3012,
		3014,5,49,0,0,3013,3015,5,632,0,0,3014,3013,1,0,0,0,3014,3015,1,0,0,0,
		3015,3016,1,0,0,0,3016,3018,5,166,0,0,3017,3019,3,612,306,0,3018,3017,
		1,0,0,0,3018,3019,1,0,0,0,3019,3020,1,0,0,0,3020,3022,3,592,296,0,3021,
		3023,3,616,308,0,3022,3021,1,0,0,0,3022,3023,1,0,0,0,3023,3025,1,0,0,0,
		3024,3026,7,40,0,0,3025,3024,1,0,0,0,3025,3026,1,0,0,0,3026,169,1,0,0,
		0,3027,3028,5,49,0,0,3028,3029,5,630,0,0,3029,3035,3,558,279,0,3030,3032,
		5,398,0,0,3031,3033,5,1111,0,0,3032,3031,1,0,0,0,3032,3033,1,0,0,0,3033,
		3034,1,0,0,0,3034,3036,3,548,274,0,3035,3030,1,0,0,0,3035,3036,1,0,0,0,
		3036,171,1,0,0,0,3037,3038,5,49,0,0,3038,3040,5,171,0,0,3039,3041,3,612,
		306,0,3040,3039,1,0,0,0,3040,3041,1,0,0,0,3041,3042,1,0,0,0,3042,3043,
		3,530,265,0,3043,173,1,0,0,0,3044,3045,5,49,0,0,3045,3047,5,654,0,0,3046,
		3048,3,612,306,0,3047,3046,1,0,0,0,3047,3048,1,0,0,0,3048,3049,1,0,0,0,
		3049,3054,3,530,265,0,3050,3051,5,1122,0,0,3051,3053,3,530,265,0,3052,
		3050,1,0,0,0,3053,3056,1,0,0,0,3054,3052,1,0,0,0,3054,3055,1,0,0,0,3055,
		3058,1,0,0,0,3056,3054,1,0,0,0,3057,3059,7,40,0,0,3058,3057,1,0,0,0,3058,
		3059,1,0,0,0,3059,175,1,0,0,0,3060,3061,5,49,0,0,3061,3063,5,579,0,0,3062,
		3064,3,612,306,0,3063,3062,1,0,0,0,3063,3064,1,0,0,0,3064,3065,1,0,0,0,
		3065,3070,3,534,267,0,3066,3067,5,1122,0,0,3067,3069,3,534,267,0,3068,
		3066,1,0,0,0,3069,3072,1,0,0,0,3070,3068,1,0,0,0,3070,3071,1,0,0,0,3071,
		177,1,0,0,0,3072,3070,1,0,0,0,3073,3074,5,149,0,0,3074,3075,5,40,0,0,3075,
		3086,5,579,0,0,3076,3087,5,516,0,0,3077,3087,5,6,0,0,3078,3083,3,534,267,
		0,3079,3080,5,1122,0,0,3080,3082,3,534,267,0,3081,3079,1,0,0,0,3082,3085,
		1,0,0,0,3083,3081,1,0,0,0,3083,3084,1,0,0,0,3084,3087,1,0,0,0,3085,3083,
		1,0,0,0,3086,3076,1,0,0,0,3086,3077,1,0,0,0,3086,3078,1,0,0,0,3087,3088,
		1,0,0,0,3088,3091,5,169,0,0,3089,3092,3,540,270,0,3090,3092,3,558,279,
		0,3091,3089,1,0,0,0,3091,3090,1,0,0,0,3092,3100,1,0,0,0,3093,3096,5,1122,
		0,0,3094,3097,3,540,270,0,3095,3097,3,558,279,0,3096,3094,1,0,0,0,3096,
		3095,1,0,0,0,3097,3099,1,0,0,0,3098,3093,1,0,0,0,3099,3102,1,0,0,0,3100,
		3098,1,0,0,0,3100,3101,1,0,0,0,3101,3107,1,0,0,0,3102,3100,1,0,0,0,3103,
		3104,5,149,0,0,3104,3105,5,579,0,0,3105,3107,3,422,211,0,3106,3073,1,0,
		0,0,3106,3103,1,0,0,0,3107,179,1,0,0,0,3108,3110,5,49,0,0,3109,3111,5,
		632,0,0,3110,3109,1,0,0,0,3110,3111,1,0,0,0,3111,3112,1,0,0,0,3112,3114,
		5,590,0,0,3113,3115,3,612,306,0,3114,3113,1,0,0,0,3114,3115,1,0,0,0,3115,
		3117,1,0,0,0,3116,3118,5,3,0,0,3117,3116,1,0,0,0,3117,3118,1,0,0,0,3118,
		3119,1,0,0,0,3119,3124,3,530,265,0,3120,3121,5,1122,0,0,3121,3123,3,530,
		265,0,3122,3120,1,0,0,0,3123,3126,1,0,0,0,3124,3122,1,0,0,0,3124,3125,
		1,0,0,0,3125,181,1,0,0,0,3126,3124,1,0,0,0,3127,3128,5,135,0,0,3128,3129,
		5,166,0,0,3129,3134,3,184,92,0,3130,3131,5,1122,0,0,3131,3133,3,184,92,
		0,3132,3130,1,0,0,0,3133,3136,1,0,0,0,3134,3132,1,0,0,0,3134,3135,1,0,
		0,0,3135,183,1,0,0,0,3136,3134,1,0,0,0,3137,3139,3,532,266,0,3138,3140,
		3,616,308,0,3139,3138,1,0,0,0,3139,3140,1,0,0,0,3140,3141,1,0,0,0,3141,
		3142,5,169,0,0,3142,3143,3,532,266,0,3143,185,1,0,0,0,3144,3146,5,639,
		0,0,3145,3147,5,166,0,0,3146,3145,1,0,0,0,3146,3147,1,0,0,0,3147,3148,
		1,0,0,0,3148,3150,3,532,266,0,3149,3151,3,616,308,0,3150,3149,1,0,0,0,
		3150,3151,1,0,0,0,3151,187,1,0,0,0,3152,3153,5,19,0,0,3153,3160,3,530,
		265,0,3154,3157,5,1120,0,0,3155,3158,3,600,300,0,3156,3158,3,596,298,0,
		3157,3155,1,0,0,0,3157,3156,1,0,0,0,3157,3158,1,0,0,0,3158,3159,1,0,0,
		0,3159,3161,5,1121,0,0,3160,3154,1,0,0,0,3160,3161,1,0,0,0,3161,189,1,
		0,0,0,3162,3165,3,216,108,0,3163,3165,3,218,109,0,3164,3162,1,0,0,0,3164,
		3163,1,0,0,0,3165,191,1,0,0,0,3166,3167,5,390,0,0,3167,3168,3,596,298,
		0,3168,193,1,0,0,0,3169,3174,3,220,110,0,3170,3174,3,222,111,0,3171,3174,
		3,224,112,0,3172,3174,3,226,113,0,3173,3169,1,0,0,0,3173,3170,1,0,0,0,
		3173,3171,1,0,0,0,3173,3172,1,0,0,0,3174,195,1,0,0,0,3175,3177,5,82,0,
		0,3176,3178,7,41,0,0,3177,3176,1,0,0,0,3177,3178,1,0,0,0,3178,3180,1,0,
		0,0,3179,3181,5,75,0,0,3180,3179,1,0,0,0,3180,3181,1,0,0,0,3181,3183,1,
		0,0,0,3182,3184,5,84,0,0,3183,3182,1,0,0,0,3183,3184,1,0,0,0,3184,3185,
		1,0,0,0,3185,3192,3,532,266,0,3186,3187,5,125,0,0,3187,3189,5,1120,0,0,
		3188,3190,3,590,295,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3191,1,
		0,0,0,3191,3193,5,1121,0,0,3192,3186,1,0,0,0,3192,3193,1,0,0,0,3193,3210,
		1,0,0,0,3194,3195,5,1120,0,0,3195,3196,3,590,295,0,3196,3197,5,1121,0,
		0,3197,3199,1,0,0,0,3198,3194,1,0,0,0,3198,3199,1,0,0,0,3199,3200,1,0,
		0,0,3200,3211,3,208,104,0,3201,3202,5,149,0,0,3202,3207,3,210,105,0,3203,
		3204,5,1122,0,0,3204,3206,3,210,105,0,3205,3203,1,0,0,0,3206,3209,1,0,
		0,0,3207,3205,1,0,0,0,3207,3208,1,0,0,0,3208,3211,1,0,0,0,3209,3207,1,
		0,0,0,3210,3198,1,0,0,0,3210,3201,1,0,0,0,3211,3224,1,0,0,0,3212,3213,
		5,114,0,0,3213,3214,5,392,0,0,3214,3215,5,88,0,0,3215,3216,5,178,0,0,3216,
		3221,3,210,105,0,3217,3218,5,1122,0,0,3218,3220,3,210,105,0,3219,3217,
		1,0,0,0,3220,3223,1,0,0,0,3221,3219,1,0,0,0,3221,3222,1,0,0,0,3222,3225,
		1,0,0,0,3223,3221,1,0,0,0,3224,3212,1,0,0,0,3224,3225,1,0,0,0,3225,197,
		1,0,0,0,3226,3227,5,98,0,0,3227,3229,5,379,0,0,3228,3230,7,42,0,0,3229,
		3228,1,0,0,0,3229,3230,1,0,0,0,3230,3232,1,0,0,0,3231,3233,5,461,0,0,3232,
		3231,1,0,0,0,3232,3233,1,0,0,0,3233,3234,1,0,0,0,3234,3235,5,79,0,0,3235,
		3237,5,1135,0,0,3236,3238,7,6,0,0,3237,3236,1,0,0,0,3237,3238,1,0,0,0,
		3238,3239,1,0,0,0,3239,3240,5,84,0,0,3240,3241,5,166,0,0,3241,3247,3,532,
		266,0,3242,3243,5,125,0,0,3243,3244,5,1120,0,0,3244,3245,3,590,295,0,3245,
		3246,5,1121,0,0,3246,3248,1,0,0,0,3247,3242,1,0,0,0,3247,3248,1,0,0,0,
		3248,3252,1,0,0,0,3249,3250,5,24,0,0,3250,3251,5,149,0,0,3251,3253,3,544,
		272,0,3252,3249,1,0,0,0,3252,3253,1,0,0,0,3253,3260,1,0,0,0,3254,3256,
		7,43,0,0,3255,3257,3,268,134,0,3256,3255,1,0,0,0,3257,3258,1,0,0,0,3258,
		3256,1,0,0,0,3258,3259,1,0,0,0,3259,3261,1,0,0,0,3260,3254,1,0,0,0,3260,
		3261,1,0,0,0,3261,3268,1,0,0,0,3262,3264,5,97,0,0,3263,3265,3,270,135,
		0,3264,3263,1,0,0,0,3265,3266,1,0,0,0,3266,3264,1,0,0,0,3266,3267,1,0,
		0,0,3267,3269,1,0,0,0,3268,3262,1,0,0,0,3268,3269,1,0,0,0,3269,3274,1,
		0,0,0,3270,3271,5,75,0,0,3271,3272,3,564,282,0,3272,3273,7,44,0,0,3273,
		3275,1,0,0,0,3274,3270,1,0,0,0,3274,3275,1,0,0,0,3275,3287,1,0,0,0,3276,
		3277,5,1120,0,0,3277,3282,3,212,106,0,3278,3279,5,1122,0,0,3279,3281,3,
		212,106,0,3280,3278,1,0,0,0,3281,3284,1,0,0,0,3282,3280,1,0,0,0,3282,3283,
		1,0,0,0,3283,3285,1,0,0,0,3284,3282,1,0,0,0,3285,3286,5,1121,0,0,3286,
		3288,1,0,0,0,3287,3276,1,0,0,0,3287,3288,1,0,0,0,3288,3298,1,0,0,0,3289,
		3290,5,149,0,0,3290,3295,3,210,105,0,3291,3292,5,1122,0,0,3292,3294,3,
		210,105,0,3293,3291,1,0,0,0,3294,3297,1,0,0,0,3295,3293,1,0,0,0,3295,3296,
		1,0,0,0,3296,3299,1,0,0,0,3297,3295,1,0,0,0,3298,3289,1,0,0,0,3298,3299,
		1,0,0,0,3299,199,1,0,0,0,3300,3301,5,98,0,0,3301,3303,5,665,0,0,3302,3304,
		7,42,0,0,3303,3302,1,0,0,0,3303,3304,1,0,0,0,3304,3306,1,0,0,0,3305,3307,
		5,461,0,0,3306,3305,1,0,0,0,3306,3307,1,0,0,0,3307,3308,1,0,0,0,3308,3309,
		5,79,0,0,3309,3311,5,1135,0,0,3310,3312,7,6,0,0,3311,3310,1,0,0,0,3311,
		3312,1,0,0,0,3312,3313,1,0,0,0,3313,3314,5,84,0,0,3314,3315,5,166,0,0,
		3315,3319,3,532,266,0,3316,3317,5,24,0,0,3317,3318,5,149,0,0,3318,3320,
		3,544,272,0,3319,3316,1,0,0,0,3319,3320,1,0,0,0,3320,3327,1,0,0,0,3321,
		3322,5,584,0,0,3322,3323,5,435,0,0,3323,3324,5,18,0,0,3324,3325,5,1113,
		0,0,3325,3326,5,1135,0,0,3326,3328,5,1112,0,0,3327,3321,1,0,0,0,3327,3328,
		1,0,0,0,3328,3333,1,0,0,0,3329,3330,5,75,0,0,3330,3331,3,564,282,0,3331,
		3332,7,44,0,0,3332,3334,1,0,0,0,3333,3329,1,0,0,0,3333,3334,1,0,0,0,3334,
		3346,1,0,0,0,3335,3336,5,1120,0,0,3336,3341,3,212,106,0,3337,3338,5,1122,
		0,0,3338,3340,3,212,106,0,3339,3337,1,0,0,0,3340,3343,1,0,0,0,3341,3339,
		1,0,0,0,3341,3342,1,0,0,0,3342,3344,1,0,0,0,3343,3341,1,0,0,0,3344,3345,
		5,1121,0,0,3345,3347,1,0,0,0,3346,3335,1,0,0,0,3346,3347,1,0,0,0,3347,
		3357,1,0,0,0,3348,3349,5,149,0,0,3349,3354,3,210,105,0,3350,3351,5,1122,
		0,0,3351,3353,3,210,105,0,3352,3350,1,0,0,0,3353,3356,1,0,0,0,3354,3352,
		1,0,0,0,3354,3355,1,0,0,0,3355,3358,1,0,0,0,3356,3354,1,0,0,0,3357,3348,
		1,0,0,0,3357,3358,1,0,0,0,3358,201,1,0,0,0,3359,3361,5,137,0,0,3360,3362,
		7,45,0,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,3364,1,0,0,0,3363,3365,
		5,84,0,0,3364,3363,1,0,0,0,3364,3365,1,0,0,0,3365,3366,1,0,0,0,3366,3372,
		3,532,266,0,3367,3368,5,125,0,0,3368,3369,5,1120,0,0,3369,3370,3,590,295,
		0,3370,3371,5,1121,0,0,3371,3373,1,0,0,0,3372,3367,1,0,0,0,3372,3373,1,
		0,0,0,3373,3390,1,0,0,0,3374,3375,5,1120,0,0,3375,3376,3,590,295,0,3376,
		3377,5,1121,0,0,3377,3379,1,0,0,0,3378,3374,1,0,0,0,3378,3379,1,0,0,0,
		3379,3380,1,0,0,0,3380,3391,3,208,104,0,3381,3382,5,149,0,0,3382,3387,
		3,210,105,0,3383,3384,5,1122,0,0,3384,3386,3,210,105,0,3385,3383,1,0,0,
		0,3386,3389,1,0,0,0,3387,3385,1,0,0,0,3387,3388,1,0,0,0,3388,3391,1,0,
		0,0,3389,3387,1,0,0,0,3390,3378,1,0,0,0,3390,3381,1,0,0,0,3391,203,1,0,
		0,0,3392,3394,3,252,126,0,3393,3395,3,214,107,0,3394,3393,1,0,0,0,3394,
		3395,1,0,0,0,3395,3448,1,0,0,0,3396,3398,3,248,124,0,3397,3399,3,214,107,
		0,3398,3397,1,0,0,0,3398,3399,1,0,0,0,3399,3448,1,0,0,0,3400,3402,3,254,
		127,0,3401,3403,3,258,129,0,3402,3401,1,0,0,0,3403,3404,1,0,0,0,3404,3402,
		1,0,0,0,3404,3405,1,0,0,0,3405,3414,1,0,0,0,3406,3408,5,174,0,0,3407,3409,
		7,46,0,0,3408,3407,1,0,0,0,3408,3409,1,0,0,0,3409,3412,1,0,0,0,3410,3413,
		3,252,126,0,3411,3413,3,248,124,0,3412,3410,1,0,0,0,3412,3411,1,0,0,0,
		3413,3415,1,0,0,0,3414,3406,1,0,0,0,3414,3415,1,0,0,0,3415,3417,1,0,0,
		0,3416,3418,3,232,116,0,3417,3416,1,0,0,0,3417,3418,1,0,0,0,3418,3420,
		1,0,0,0,3419,3421,3,282,141,0,3420,3419,1,0,0,0,3420,3421,1,0,0,0,3421,
		3423,1,0,0,0,3422,3424,3,214,107,0,3423,3422,1,0,0,0,3423,3424,1,0,0,0,
		3424,3448,1,0,0,0,3425,3427,3,250,125,0,3426,3428,3,256,128,0,3427,3426,
		1,0,0,0,3428,3429,1,0,0,0,3429,3427,1,0,0,0,3429,3430,1,0,0,0,3430,3436,
		1,0,0,0,3431,3433,5,174,0,0,3432,3434,7,46,0,0,3433,3432,1,0,0,0,3433,
		3434,1,0,0,0,3434,3435,1,0,0,0,3435,3437,3,248,124,0,3436,3431,1,0,0,0,
		3436,3437,1,0,0,0,3437,3439,1,0,0,0,3438,3440,3,232,116,0,3439,3438,1,
		0,0,0,3439,3440,1,0,0,0,3440,3442,1,0,0,0,3441,3443,3,282,141,0,3442,3441,
		1,0,0,0,3442,3443,1,0,0,0,3443,3445,1,0,0,0,3444,3446,3,214,107,0,3445,
		3444,1,0,0,0,3445,3446,1,0,0,0,3446,3448,1,0,0,0,3447,3392,1,0,0,0,3447,
		3396,1,0,0,0,3447,3400,1,0,0,0,3447,3425,1,0,0,0,3448,205,1,0,0,0,3449,
		3452,3,228,114,0,3450,3452,3,230,115,0,3451,3449,1,0,0,0,3451,3450,1,0,
		0,0,3452,207,1,0,0,0,3453,3472,3,204,102,0,3454,3455,7,47,0,0,3455,3457,
		5,1120,0,0,3456,3458,3,598,299,0,3457,3456,1,0,0,0,3457,3458,1,0,0,0,3458,
		3459,1,0,0,0,3459,3468,5,1121,0,0,3460,3461,5,1122,0,0,3461,3463,5,1120,
		0,0,3462,3464,3,598,299,0,3463,3462,1,0,0,0,3463,3464,1,0,0,0,3464,3465,
		1,0,0,0,3465,3467,5,1121,0,0,3466,3460,1,0,0,0,3467,3470,1,0,0,0,3468,
		3466,1,0,0,0,3468,3469,1,0,0,0,3469,3472,1,0,0,0,3470,3468,1,0,0,0,3471,
		3453,1,0,0,0,3471,3454,1,0,0,0,3472,209,1,0,0,0,3473,3474,3,536,268,0,
		3474,3477,5,1111,0,0,3475,3478,3,660,330,0,3476,3478,5,40,0,0,3477,3475,
		1,0,0,0,3477,3476,1,0,0,0,3478,211,1,0,0,0,3479,3482,3,558,279,0,3480,
		3482,5,1148,0,0,3481,3479,1,0,0,0,3481,3480,1,0,0,0,3482,213,1,0,0,0,3483,
		3484,5,62,0,0,3484,3490,5,178,0,0,3485,3486,5,99,0,0,3486,3487,5,77,0,
		0,3487,3488,5,593,0,0,3488,3490,5,498,0,0,3489,3483,1,0,0,0,3489,3485,
		1,0,0,0,3490,3492,1,0,0,0,3491,3493,3,618,309,0,3492,3491,1,0,0,0,3492,
		3493,1,0,0,0,3493,215,1,0,0,0,3494,3496,5,42,0,0,3495,3497,5,102,0,0,3496,
		3495,1,0,0,0,3496,3497,1,0,0,0,3497,3499,1,0,0,0,3498,3500,5,552,0,0,3499,
		3498,1,0,0,0,3499,3500,1,0,0,0,3500,3502,1,0,0,0,3501,3503,5,75,0,0,3502,
		3501,1,0,0,0,3502,3503,1,0,0,0,3503,3504,1,0,0,0,3504,3505,5,65,0,0,3505,
		3511,3,532,266,0,3506,3507,5,125,0,0,3507,3508,5,1120,0,0,3508,3509,3,
		590,295,0,3509,3510,5,1121,0,0,3510,3512,1,0,0,0,3511,3506,1,0,0,0,3511,
		3512,1,0,0,0,3512,3515,1,0,0,0,3513,3514,5,184,0,0,3514,3516,3,660,330,
		0,3515,3513,1,0,0,0,3515,3516,1,0,0,0,3516,3518,1,0,0,0,3517,3519,3,232,
		116,0,3518,3517,1,0,0,0,3518,3519,1,0,0,0,3519,3522,1,0,0,0,3520,3521,
		5,95,0,0,3521,3523,3,284,142,0,3522,3520,1,0,0,0,3522,3523,1,0,0,0,3523,
		217,1,0,0,0,3524,3526,5,42,0,0,3525,3527,5,102,0,0,3526,3525,1,0,0,0,3526,
		3527,1,0,0,0,3527,3529,1,0,0,0,3528,3530,5,552,0,0,3529,3528,1,0,0,0,3529,
		3530,1,0,0,0,3530,3532,1,0,0,0,3531,3533,5,75,0,0,3532,3531,1,0,0,0,3532,
		3533,1,0,0,0,3533,3573,1,0,0,0,3534,3537,3,532,266,0,3535,3536,5,1119,
		0,0,3536,3538,5,1104,0,0,3537,3535,1,0,0,0,3537,3538,1,0,0,0,3538,3547,
		1,0,0,0,3539,3540,5,1122,0,0,3540,3543,3,532,266,0,3541,3542,5,1119,0,
		0,3542,3544,5,1104,0,0,3543,3541,1,0,0,0,3543,3544,1,0,0,0,3544,3546,1,
		0,0,0,3545,3539,1,0,0,0,3546,3549,1,0,0,0,3547,3545,1,0,0,0,3547,3548,
		1,0,0,0,3548,3550,1,0,0,0,3549,3547,1,0,0,0,3550,3551,5,65,0,0,3551,3552,
		3,236,118,0,3552,3574,1,0,0,0,3553,3554,5,65,0,0,3554,3557,3,532,266,0,
		3555,3556,5,1119,0,0,3556,3558,5,1104,0,0,3557,3555,1,0,0,0,3557,3558,
		1,0,0,0,3558,3567,1,0,0,0,3559,3560,5,1122,0,0,3560,3563,3,532,266,0,3561,
		3562,5,1119,0,0,3562,3564,5,1104,0,0,3563,3561,1,0,0,0,3563,3564,1,0,0,
		0,3564,3566,1,0,0,0,3565,3559,1,0,0,0,3566,3569,1,0,0,0,3567,3565,1,0,
		0,0,3567,3568,1,0,0,0,3568,3570,1,0,0,0,3569,3567,1,0,0,0,3570,3571,5,
		181,0,0,3571,3572,3,236,118,0,3572,3574,1,0,0,0,3573,3534,1,0,0,0,3573,
		3553,1,0,0,0,3574,3577,1,0,0,0,3575,3576,5,184,0,0,3576,3578,3,660,330,
		0,3577,3575,1,0,0,0,3577,3578,1,0,0,0,3578,219,1,0,0,0,3579,3580,5,430,
		0,0,3580,3581,3,532,266,0,3581,3586,5,526,0,0,3582,3584,5,12,0,0,3583,
		3582,1,0,0,0,3583,3584,1,0,0,0,3584,3585,1,0,0,0,3585,3587,3,558,279,0,
		3586,3583,1,0,0,0,3586,3587,1,0,0,0,3587,221,1,0,0,0,3588,3589,5,430,0,
		0,3589,3590,3,532,266,0,3590,3591,5,130,0,0,3591,3598,3,558,279,0,3592,
		3593,3,668,334,0,3593,3594,5,1120,0,0,3594,3595,3,600,300,0,3595,3596,
		5,1121,0,0,3596,3599,1,0,0,0,3597,3599,7,48,0,0,3598,3592,1,0,0,0,3598,
		3597,1,0,0,0,3599,3602,1,0,0,0,3600,3601,5,184,0,0,3601,3603,3,660,330,
		0,3602,3600,1,0,0,0,3602,3603,1,0,0,0,3603,3606,1,0,0,0,3604,3605,5,95,
		0,0,3605,3607,3,284,142,0,3606,3604,1,0,0,0,3606,3607,1,0,0,0,3607,223,
		1,0,0,0,3608,3609,5,430,0,0,3609,3610,3,532,266,0,3610,3611,5,130,0,0,
		3611,3614,7,49,0,0,3612,3613,5,184,0,0,3613,3615,3,660,330,0,3614,3612,
		1,0,0,0,3614,3615,1,0,0,0,3615,3618,1,0,0,0,3616,3617,5,95,0,0,3617,3619,
		3,284,142,0,3618,3616,1,0,0,0,3618,3619,1,0,0,0,3619,225,1,0,0,0,3620,
		3621,5,430,0,0,3621,3622,3,532,266,0,3622,3623,5,352,0,0,3623,227,1,0,
		0,0,3624,3626,5,178,0,0,3625,3627,5,102,0,0,3626,3625,1,0,0,0,3626,3627,
		1,0,0,0,3627,3629,1,0,0,0,3628,3630,5,75,0,0,3629,3628,1,0,0,0,3629,3630,
		1,0,0,0,3630,3631,1,0,0,0,3631,3636,3,532,266,0,3632,3634,5,12,0,0,3633,
		3632,1,0,0,0,3633,3634,1,0,0,0,3634,3635,1,0,0,0,3635,3637,3,558,279,0,
		3636,3633,1,0,0,0,3636,3637,1,0,0,0,3637,3638,1,0,0,0,3638,3639,5,149,
		0,0,3639,3644,3,210,105,0,3640,3641,5,1122,0,0,3641,3643,3,210,105,0,3642,
		3640,1,0,0,0,3643,3646,1,0,0,0,3644,3642,1,0,0,0,3644,3645,1,0,0,0,3645,
		3649,1,0,0,0,3646,3644,1,0,0,0,3647,3648,5,184,0,0,3648,3650,3,660,330,
		0,3649,3647,1,0,0,0,3649,3650,1,0,0,0,3650,3652,1,0,0,0,3651,3653,3,232,
		116,0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,3655,1,0,0,0,3654,3656,
		3,282,141,0,3655,3654,1,0,0,0,3655,3656,1,0,0,0,3656,229,1,0,0,0,3657,
		3659,5,178,0,0,3658,3660,5,102,0,0,3659,3658,1,0,0,0,3659,3660,1,0,0,0,
		3660,3662,1,0,0,0,3661,3663,5,75,0,0,3662,3661,1,0,0,0,3662,3663,1,0,0,
		0,3663,3664,1,0,0,0,3664,3665,3,236,118,0,3665,3666,5,149,0,0,3666,3671,
		3,210,105,0,3667,3668,5,1122,0,0,3668,3670,3,210,105,0,3669,3667,1,0,0,
		0,3670,3673,1,0,0,0,3671,3669,1,0,0,0,3671,3672,1,0,0,0,3672,3676,1,0,
		0,0,3673,3671,1,0,0,0,3674,3675,5,184,0,0,3675,3677,3,660,330,0,3676,3674,
		1,0,0,0,3676,3677,1,0,0,0,3677,231,1,0,0,0,3678,3679,5,120,0,0,3679,3680,
		5,18,0,0,3680,3685,3,234,117,0,3681,3682,5,1122,0,0,3682,3684,3,234,117,
		0,3683,3681,1,0,0,0,3684,3687,1,0,0,0,3685,3683,1,0,0,0,3685,3686,1,0,
		0,0,3686,233,1,0,0,0,3687,3685,1,0,0,0,3688,3690,3,660,330,0,3689,3691,
		7,50,0,0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,3691,235,1,0,0,0,3692,3697,
		3,238,119,0,3693,3694,5,1122,0,0,3694,3696,3,238,119,0,3695,3693,1,0,0,
		0,3696,3699,1,0,0,0,3697,3695,1,0,0,0,3697,3698,1,0,0,0,3698,237,1,0,0,
		0,3699,3697,1,0,0,0,3700,3704,3,240,120,0,3701,3703,3,246,123,0,3702,3701,
		1,0,0,0,3703,3706,1,0,0,0,3704,3702,1,0,0,0,3704,3705,1,0,0,0,3705,3718,
		1,0,0,0,3706,3704,1,0,0,0,3707,3708,5,1120,0,0,3708,3712,3,240,120,0,3709,
		3711,3,246,123,0,3710,3709,1,0,0,0,3711,3714,1,0,0,0,3712,3710,1,0,0,0,
		3712,3713,1,0,0,0,3713,3715,1,0,0,0,3714,3712,1,0,0,0,3715,3716,5,1121,
		0,0,3716,3718,1,0,0,0,3717,3700,1,0,0,0,3717,3707,1,0,0,0,3718,239,1,0,
		0,0,3719,3725,3,532,266,0,3720,3721,5,125,0,0,3721,3722,5,1120,0,0,3722,
		3723,3,590,295,0,3723,3724,5,1121,0,0,3724,3726,1,0,0,0,3725,3720,1,0,
		0,0,3725,3726,1,0,0,0,3726,3731,1,0,0,0,3727,3729,5,12,0,0,3728,3727,1,
		0,0,0,3728,3729,1,0,0,0,3729,3730,1,0,0,0,3730,3732,3,558,279,0,3731,3728,
		1,0,0,0,3731,3732,1,0,0,0,3732,3741,1,0,0,0,3733,3738,3,242,121,0,3734,
		3735,5,1122,0,0,3735,3737,3,242,121,0,3736,3734,1,0,0,0,3737,3740,1,0,
		0,0,3738,3736,1,0,0,0,3738,3739,1,0,0,0,3739,3742,1,0,0,0,3740,3738,1,
		0,0,0,3741,3733,1,0,0,0,3741,3742,1,0,0,0,3742,3760,1,0,0,0,3743,3749,
		3,204,102,0,3744,3745,5,1120,0,0,3745,3746,3,204,102,0,3746,3747,5,1121,
		0,0,3747,3749,1,0,0,0,3748,3743,1,0,0,0,3748,3744,1,0,0,0,3749,3751,1,
		0,0,0,3750,3752,5,12,0,0,3751,3750,1,0,0,0,3751,3752,1,0,0,0,3752,3753,
		1,0,0,0,3753,3754,3,558,279,0,3754,3760,1,0,0,0,3755,3756,5,1120,0,0,3756,
		3757,3,236,118,0,3757,3758,5,1121,0,0,3758,3760,1,0,0,0,3759,3719,1,0,
		0,0,3759,3748,1,0,0,0,3759,3755,1,0,0,0,3760,241,1,0,0,0,3761,3762,7,51,
		0,0,3762,3765,7,22,0,0,3763,3764,5,62,0,0,3764,3766,3,244,122,0,3765,3763,
		1,0,0,0,3765,3766,1,0,0,0,3766,3767,1,0,0,0,3767,3768,5,1120,0,0,3768,
		3769,3,590,295,0,3769,3770,5,1121,0,0,3770,243,1,0,0,0,3771,3777,5,87,
		0,0,3772,3773,5,120,0,0,3773,3777,5,18,0,0,3774,3775,5,70,0,0,3775,3777,
		5,18,0,0,3776,3771,1,0,0,0,3776,3772,1,0,0,0,3776,3774,1,0,0,0,3777,245,
		1,0,0,0,3778,3780,7,52,0,0,3779,3778,1,0,0,0,3779,3780,1,0,0,0,3780,3781,
		1,0,0,0,3781,3782,5,87,0,0,3782,3790,3,240,120,0,3783,3784,5,114,0,0,3784,
		3791,3,660,330,0,3785,3786,5,181,0,0,3786,3787,5,1120,0,0,3787,3788,3,
		590,295,0,3788,3789,5,1121,0,0,3789,3791,1,0,0,0,3790,3783,1,0,0,0,3790,
		3785,1,0,0,0,3790,3791,1,0,0,0,3791,3823,1,0,0,0,3792,3793,5,165,0,0,3793,
		3796,3,240,120,0,3794,3795,5,114,0,0,3795,3797,3,660,330,0,3796,3794,1,
		0,0,0,3796,3797,1,0,0,0,3797,3823,1,0,0,0,3798,3800,7,53,0,0,3799,3801,
		5,123,0,0,3800,3799,1,0,0,0,3800,3801,1,0,0,0,3801,3802,1,0,0,0,3802,3803,
		5,87,0,0,3803,3811,3,240,120,0,3804,3805,5,114,0,0,3805,3812,3,660,330,
		0,3806,3807,5,181,0,0,3807,3808,5,1120,0,0,3808,3809,3,590,295,0,3809,
		3810,5,1121,0,0,3810,3812,1,0,0,0,3811,3804,1,0,0,0,3811,3806,1,0,0,0,
		3812,3823,1,0,0,0,3813,3818,5,109,0,0,3814,3816,7,53,0,0,3815,3817,5,123,
		0,0,3816,3815,1,0,0,0,3816,3817,1,0,0,0,3817,3819,1,0,0,0,3818,3814,1,
		0,0,0,3818,3819,1,0,0,0,3819,3820,1,0,0,0,3820,3821,5,87,0,0,3821,3823,
		3,240,120,0,3822,3779,1,0,0,0,3822,3792,1,0,0,0,3822,3798,1,0,0,0,3822,
		3813,1,0,0,0,3823,247,1,0,0,0,3824,3825,5,1120,0,0,3825,3826,3,252,126,
		0,3826,3827,5,1121,0,0,3827,3833,1,0,0,0,3828,3829,5,1120,0,0,3829,3830,
		3,248,124,0,3830,3831,5,1121,0,0,3831,3833,1,0,0,0,3832,3824,1,0,0,0,3832,
		3828,1,0,0,0,3833,249,1,0,0,0,3834,3835,5,1120,0,0,3835,3836,3,254,127,
		0,3836,3837,5,1121,0,0,3837,3843,1,0,0,0,3838,3839,5,1120,0,0,3839,3840,
		3,250,125,0,3840,3841,5,1121,0,0,3841,3843,1,0,0,0,3842,3834,1,0,0,0,3842,
		3838,1,0,0,0,3843,251,1,0,0,0,3844,3848,5,148,0,0,3845,3847,3,260,130,
		0,3846,3845,1,0,0,0,3847,3850,1,0,0,0,3848,3846,1,0,0,0,3848,3849,1,0,
		0,0,3849,3851,1,0,0,0,3850,3848,1,0,0,0,3851,3853,3,262,131,0,3852,3854,
		3,266,133,0,3853,3852,1,0,0,0,3853,3854,1,0,0,0,3854,3856,1,0,0,0,3855,
		3857,3,272,136,0,3856,3855,1,0,0,0,3856,3857,1,0,0,0,3857,3859,1,0,0,0,
		3858,3860,3,274,137,0,3859,3858,1,0,0,0,3859,3860,1,0,0,0,3860,3862,1,
		0,0,0,3861,3863,3,276,138,0,3862,3861,1,0,0,0,3862,3863,1,0,0,0,3863,3865,
		1,0,0,0,3864,3866,3,278,139,0,3865,3864,1,0,0,0,3865,3866,1,0,0,0,3866,
		3868,1,0,0,0,3867,3869,3,232,116,0,3868,3867,1,0,0,0,3868,3869,1,0,0,0,
		3869,3871,1,0,0,0,3870,3872,3,282,141,0,3871,3870,1,0,0,0,3871,3872,1,
		0,0,0,3872,3903,1,0,0,0,3873,3877,5,148,0,0,3874,3876,3,260,130,0,3875,
		3874,1,0,0,0,3876,3879,1,0,0,0,3877,3875,1,0,0,0,3877,3878,1,0,0,0,3878,
		3880,1,0,0,0,3879,3877,1,0,0,0,3880,3882,3,262,131,0,3881,3883,3,272,136,
		0,3882,3881,1,0,0,0,3882,3883,1,0,0,0,3883,3885,1,0,0,0,3884,3886,3,274,
		137,0,3885,3884,1,0,0,0,3885,3886,1,0,0,0,3886,3888,1,0,0,0,3887,3889,
		3,276,138,0,3888,3887,1,0,0,0,3888,3889,1,0,0,0,3889,3891,1,0,0,0,3890,
		3892,3,278,139,0,3891,3890,1,0,0,0,3891,3892,1,0,0,0,3892,3894,1,0,0,0,
		3893,3895,3,232,116,0,3894,3893,1,0,0,0,3894,3895,1,0,0,0,3895,3897,1,
		0,0,0,3896,3898,3,282,141,0,3897,3896,1,0,0,0,3897,3898,1,0,0,0,3898,3900,
		1,0,0,0,3899,3901,3,266,133,0,3900,3899,1,0,0,0,3900,3901,1,0,0,0,3901,
		3903,1,0,0,0,3902,3844,1,0,0,0,3902,3873,1,0,0,0,3903,253,1,0,0,0,3904,
		3908,5,148,0,0,3905,3907,3,260,130,0,3906,3905,1,0,0,0,3907,3910,1,0,0,
		0,3908,3906,1,0,0,0,3908,3909,1,0,0,0,3909,3911,1,0,0,0,3910,3908,1,0,
		0,0,3911,3913,3,262,131,0,3912,3914,3,272,136,0,3913,3912,1,0,0,0,3913,
		3914,1,0,0,0,3914,3916,1,0,0,0,3915,3917,3,274,137,0,3916,3915,1,0,0,0,
		3916,3917,1,0,0,0,3917,3919,1,0,0,0,3918,3920,3,276,138,0,3919,3918,1,
		0,0,0,3919,3920,1,0,0,0,3920,3922,1,0,0,0,3921,3923,3,278,139,0,3922,3921,
		1,0,0,0,3922,3923,1,0,0,0,3923,3925,1,0,0,0,3924,3926,3,232,116,0,3925,
		3924,1,0,0,0,3925,3926,1,0,0,0,3926,3928,1,0,0,0,3927,3929,3,282,141,0,
		3928,3927,1,0,0,0,3928,3929,1,0,0,0,3929,255,1,0,0,0,3930,3932,5,174,0,
		0,3931,3933,7,46,0,0,3932,3931,1,0,0,0,3932,3933,1,0,0,0,3933,3934,1,0,
		0,0,3934,3935,3,250,125,0,3935,257,1,0,0,0,3936,3938,5,174,0,0,3937,3939,
		7,46,0,0,3938,3937,1,0,0,0,3938,3939,1,0,0,0,3939,3942,1,0,0,0,3940,3943,
		3,254,127,0,3941,3943,3,250,125,0,3942,3940,1,0,0,0,3942,3941,1,0,0,0,
		3943,259,1,0,0,0,3944,3953,7,54,0,0,3945,3953,5,72,0,0,3946,3953,5,165,
		0,0,3947,3953,5,161,0,0,3948,3953,5,159,0,0,3949,3953,5,608,0,0,3950,3953,
		7,55,0,0,3951,3953,5,160,0,0,3952,3944,1,0,0,0,3952,3945,1,0,0,0,3952,
		3946,1,0,0,0,3952,3947,1,0,0,0,3952,3948,1,0,0,0,3952,3949,1,0,0,0,3952,
		3950,1,0,0,0,3952,3951,1,0,0,0,3953,261,1,0,0,0,3954,3957,5,1104,0,0,3955,
		3957,3,264,132,0,3956,3954,1,0,0,0,3956,3955,1,0,0,0,3957,3962,1,0,0,0,
		3958,3959,5,1122,0,0,3959,3961,3,264,132,0,3960,3958,1,0,0,0,3961,3964,
		1,0,0,0,3962,3960,1,0,0,0,3962,3963,1,0,0,0,3963,263,1,0,0,0,3964,3962,
		1,0,0,0,3965,3966,3,530,265,0,3966,3967,5,1119,0,0,3967,3968,5,1104,0,
		0,3968,3995,1,0,0,0,3969,3974,3,536,268,0,3970,3972,5,12,0,0,3971,3970,
		1,0,0,0,3971,3972,1,0,0,0,3972,3973,1,0,0,0,3973,3975,3,558,279,0,3974,
		3971,1,0,0,0,3974,3975,1,0,0,0,3975,3995,1,0,0,0,3976,3981,3,620,310,0,
		3977,3979,5,12,0,0,3978,3977,1,0,0,0,3978,3979,1,0,0,0,3979,3980,1,0,0,
		0,3980,3982,3,558,279,0,3981,3978,1,0,0,0,3981,3982,1,0,0,0,3982,3995,
		1,0,0,0,3983,3984,5,1148,0,0,3984,3986,5,1095,0,0,3985,3983,1,0,0,0,3985,
		3986,1,0,0,0,3986,3987,1,0,0,0,3987,3992,3,660,330,0,3988,3990,5,12,0,
		0,3989,3988,1,0,0,0,3989,3990,1,0,0,0,3990,3991,1,0,0,0,3991,3993,3,558,
		279,0,3992,3989,1,0,0,0,3992,3993,1,0,0,0,3993,3995,1,0,0,0,3994,3965,
		1,0,0,0,3994,3969,1,0,0,0,3994,3976,1,0,0,0,3994,3985,1,0,0,0,3995,265,
		1,0,0,0,3996,3997,5,84,0,0,3997,4002,3,212,106,0,3998,3999,5,1122,0,0,
		3999,4001,3,212,106,0,4000,3998,1,0,0,0,4001,4004,1,0,0,0,4002,4000,1,
		0,0,0,4002,4003,1,0,0,0,4003,4033,1,0,0,0,4004,4002,1,0,0,0,4005,4006,
		5,84,0,0,4006,4007,5,391,0,0,4007,4033,5,1135,0,0,4008,4009,5,84,0,0,4009,
		4010,5,124,0,0,4010,4014,5,1135,0,0,4011,4012,5,24,0,0,4012,4013,5,149,
		0,0,4013,4015,3,544,272,0,4014,4011,1,0,0,0,4014,4015,1,0,0,0,4015,4022,
		1,0,0,0,4016,4018,7,43,0,0,4017,4019,3,268,134,0,4018,4017,1,0,0,0,4019,
		4020,1,0,0,0,4020,4018,1,0,0,0,4020,4021,1,0,0,0,4021,4023,1,0,0,0,4022,
		4016,1,0,0,0,4022,4023,1,0,0,0,4023,4030,1,0,0,0,4024,4026,5,97,0,0,4025,
		4027,3,270,135,0,4026,4025,1,0,0,0,4027,4028,1,0,0,0,4028,4026,1,0,0,0,
		4028,4029,1,0,0,0,4029,4031,1,0,0,0,4030,4024,1,0,0,0,4030,4031,1,0,0,
		0,4031,4033,1,0,0,0,4032,3996,1,0,0,0,4032,4005,1,0,0,0,4032,4008,1,0,
		0,0,4033,267,1,0,0,0,4034,4035,5,167,0,0,4035,4036,5,18,0,0,4036,4047,
		5,1135,0,0,4037,4039,5,118,0,0,4038,4037,1,0,0,0,4038,4039,1,0,0,0,4039,
		4040,1,0,0,0,4040,4041,5,54,0,0,4041,4042,5,18,0,0,4042,4047,5,1135,0,
		0,4043,4044,5,55,0,0,4044,4045,5,18,0,0,4045,4047,5,1135,0,0,4046,4034,
		1,0,0,0,4046,4038,1,0,0,0,4046,4043,1,0,0,0,4047,269,1,0,0,0,4048,4049,
		5,164,0,0,4049,4050,5,18,0,0,4050,4055,5,1135,0,0,4051,4052,5,167,0,0,
		4052,4053,5,18,0,0,4053,4055,5,1135,0,0,4054,4048,1,0,0,0,4054,4051,1,
		0,0,0,4055,271,1,0,0,0,4056,4057,5,65,0,0,4057,4059,3,236,118,0,4058,4056,
		1,0,0,0,4058,4059,1,0,0,0,4059,4062,1,0,0,0,4060,4061,5,184,0,0,4061,4063,
		3,660,330,0,4062,4060,1,0,0,0,4062,4063,1,0,0,0,4063,273,1,0,0,0,4064,
		4065,5,70,0,0,4065,4066,5,18,0,0,4066,4071,3,280,140,0,4067,4068,5,1122,
		0,0,4068,4070,3,280,140,0,4069,4067,1,0,0,0,4070,4073,1,0,0,0,4071,4069,
		1,0,0,0,4071,4072,1,0,0,0,4072,4076,1,0,0,0,4073,4071,1,0,0,0,4074,4075,
		5,186,0,0,4075,4077,5,581,0,0,4076,4074,1,0,0,0,4076,4077,1,0,0,0,4077,
		275,1,0,0,0,4078,4079,5,71,0,0,4079,4080,3,660,330,0,4080,277,1,0,0,0,
		4081,4082,5,659,0,0,4082,4083,3,638,319,0,4083,4084,5,12,0,0,4084,4085,
		5,1120,0,0,4085,4086,3,636,318,0,4086,4096,5,1121,0,0,4087,4088,5,1122,
		0,0,4088,4089,3,638,319,0,4089,4090,5,12,0,0,4090,4091,5,1120,0,0,4091,
		4092,3,636,318,0,4092,4093,5,1121,0,0,4093,4095,1,0,0,0,4094,4087,1,0,
		0,0,4095,4098,1,0,0,0,4096,4094,1,0,0,0,4096,4097,1,0,0,0,4097,279,1,0,
		0,0,4098,4096,1,0,0,0,4099,4101,3,660,330,0,4100,4102,7,50,0,0,4101,4100,
		1,0,0,0,4101,4102,1,0,0,0,4102,281,1,0,0,0,4103,4114,5,95,0,0,4104,4105,
		3,284,142,0,4105,4106,5,1122,0,0,4106,4108,1,0,0,0,4107,4104,1,0,0,0,4107,
		4108,1,0,0,0,4108,4109,1,0,0,0,4109,4115,3,284,142,0,4110,4111,3,284,142,
		0,4111,4112,5,519,0,0,4112,4113,3,284,142,0,4113,4115,1,0,0,0,4114,4107,
		1,0,0,0,4114,4110,1,0,0,0,4115,283,1,0,0,0,4116,4120,3,564,282,0,4117,
		4120,3,542,271,0,4118,4120,3,560,280,0,4119,4116,1,0,0,0,4119,4117,1,0,
		0,0,4119,4118,1,0,0,0,4120,285,1,0,0,0,4121,4122,5,612,0,0,4122,4131,5,
		636,0,0,4123,4128,3,308,154,0,4124,4125,5,1122,0,0,4125,4127,3,308,154,
		0,4126,4124,1,0,0,0,4127,4130,1,0,0,0,4128,4126,1,0,0,0,4128,4129,1,0,
		0,0,4129,4132,1,0,0,0,4130,4128,1,0,0,0,4131,4123,1,0,0,0,4131,4132,1,
		0,0,0,4132,287,1,0,0,0,4133,4135,5,335,0,0,4134,4136,5,661,0,0,4135,4134,
		1,0,0,0,4135,4136,1,0,0,0,4136,289,1,0,0,0,4137,4139,5,360,0,0,4138,4140,
		5,661,0,0,4139,4138,1,0,0,0,4139,4140,1,0,0,0,4140,4146,1,0,0,0,4141,4143,
		5,10,0,0,4142,4144,5,508,0,0,4143,4142,1,0,0,0,4143,4144,1,0,0,0,4144,
		4145,1,0,0,0,4145,4147,5,344,0,0,4146,4141,1,0,0,0,4146,4147,1,0,0,0,4147,
		4152,1,0,0,0,4148,4150,5,508,0,0,4149,4148,1,0,0,0,4149,4150,1,0,0,0,4150,
		4151,1,0,0,0,4151,4153,5,134,0,0,4152,4149,1,0,0,0,4152,4153,1,0,0,0,4153,
		291,1,0,0,0,4154,4156,5,580,0,0,4155,4157,5,661,0,0,4156,4155,1,0,0,0,
		4156,4157,1,0,0,0,4157,4163,1,0,0,0,4158,4160,5,10,0,0,4159,4161,5,508,
		0,0,4160,4159,1,0,0,0,4160,4161,1,0,0,0,4161,4162,1,0,0,0,4162,4164,5,
		344,0,0,4163,4158,1,0,0,0,4163,4164,1,0,0,0,4164,4169,1,0,0,0,4165,4167,
		5,508,0,0,4166,4165,1,0,0,0,4166,4167,1,0,0,0,4167,4168,1,0,0,0,4168,4170,
		5,134,0,0,4169,4166,1,0,0,0,4169,4170,1,0,0,0,4170,293,1,0,0,0,4171,4172,
		5,587,0,0,4172,4173,3,558,279,0,4173,295,1,0,0,0,4174,4176,5,580,0,0,4175,
		4177,5,661,0,0,4176,4175,1,0,0,0,4176,4177,1,0,0,0,4177,4178,1,0,0,0,4178,
		4180,5,169,0,0,4179,4181,5,587,0,0,4180,4179,1,0,0,0,4180,4181,1,0,0,0,
		4181,4182,1,0,0,0,4182,4183,3,558,279,0,4183,297,1,0,0,0,4184,4185,5,134,
		0,0,4185,4186,5,587,0,0,4186,4187,3,558,279,0,4187,299,1,0,0,0,4188,4189,
		5,99,0,0,4189,4190,7,56,0,0,4190,4195,3,310,155,0,4191,4192,5,1122,0,0,
		4192,4194,3,310,155,0,4193,4191,1,0,0,0,4194,4197,1,0,0,0,4195,4193,1,
		0,0,0,4195,4196,1,0,0,0,4196,4199,1,0,0,0,4197,4195,1,0,0,0,4198,4200,
		3,616,308,0,4199,4198,1,0,0,0,4199,4200,1,0,0,0,4200,301,1,0,0,0,4201,
		4202,5,176,0,0,4202,4203,5,680,0,0,4203,303,1,0,0,0,4204,4205,5,149,0,
		0,4205,4206,5,331,0,0,4206,4207,5,1111,0,0,4207,4208,7,26,0,0,4208,305,
		1,0,0,0,4209,4211,5,149,0,0,4210,4212,7,57,0,0,4211,4210,1,0,0,0,4211,
		4212,1,0,0,0,4212,4213,1,0,0,0,4213,4214,5,636,0,0,4214,4219,3,314,157,
		0,4215,4216,5,1122,0,0,4216,4218,3,314,157,0,4217,4215,1,0,0,0,4218,4221,
		1,0,0,0,4219,4217,1,0,0,0,4219,4220,1,0,0,0,4220,307,1,0,0,0,4221,4219,
		1,0,0,0,4222,4223,5,186,0,0,4223,4224,5,368,0,0,4224,4230,5,599,0,0,4225,
		4226,5,130,0,0,4226,4230,5,187,0,0,4227,4228,5,130,0,0,4228,4230,5,525,
		0,0,4229,4222,1,0,0,0,4229,4225,1,0,0,0,4229,4227,1,0,0,0,4230,309,1,0,
		0,0,4231,4236,3,532,266,0,4232,4234,5,12,0,0,4233,4232,1,0,0,0,4233,4234,
		1,0,0,0,4234,4235,1,0,0,0,4235,4237,3,558,279,0,4236,4233,1,0,0,0,4236,
		4237,1,0,0,0,4237,4238,1,0,0,0,4238,4239,3,312,156,0,4239,311,1,0,0,0,
		4240,4242,5,130,0,0,4241,4243,5,461,0,0,4242,4241,1,0,0,0,4242,4243,1,
		0,0,0,4243,4249,1,0,0,0,4244,4246,5,102,0,0,4245,4244,1,0,0,0,4245,4246,
		1,0,0,0,4246,4247,1,0,0,0,4247,4249,5,187,0,0,4248,4240,1,0,0,0,4248,4245,
		1,0,0,0,4249,313,1,0,0,0,4250,4251,5,451,0,0,4251,4252,5,459,0,0,4252,
		4258,3,316,158,0,4253,4254,5,130,0,0,4254,4258,5,187,0,0,4255,4256,5,130,
		0,0,4256,4258,5,525,0,0,4257,4250,1,0,0,0,4257,4253,1,0,0,0,4257,4255,
		1,0,0,0,4258,315,1,0,0,0,4259,4260,5,776,0,0,4260,4267,5,130,0,0,4261,
		4262,5,130,0,0,4262,4267,5,777,0,0,4263,4264,5,130,0,0,4264,4267,5,778,
		0,0,4265,4267,5,779,0,0,4266,4259,1,0,0,0,4266,4261,1,0,0,0,4266,4263,
		1,0,0,0,4266,4265,1,0,0,0,4267,317,1,0,0,0,4268,4269,5,23,0,0,4269,4270,
		5,464,0,0,4270,4271,5,169,0,0,4271,4276,3,336,168,0,4272,4273,5,1122,0,
		0,4273,4275,3,336,168,0,4274,4272,1,0,0,0,4275,4278,1,0,0,0,4276,4274,
		1,0,0,0,4276,4277,1,0,0,0,4277,4280,1,0,0,0,4278,4276,1,0,0,0,4279,4281,
		3,344,172,0,4280,4279,1,0,0,0,4280,4281,1,0,0,0,4281,319,1,0,0,0,4282,
		4283,5,23,0,0,4283,4284,5,572,0,0,4284,4285,5,417,0,0,4285,4290,3,346,
		173,0,4286,4287,5,1122,0,0,4287,4289,3,346,173,0,4288,4286,1,0,0,0,4289,
		4292,1,0,0,0,4290,4288,1,0,0,0,4290,4291,1,0,0,0,4291,321,1,0,0,0,4292,
		4290,1,0,0,0,4293,4294,5,128,0,0,4294,4295,7,58,0,0,4295,4300,5,463,0,
		0,4296,4297,5,169,0,0,4297,4301,5,1135,0,0,4298,4299,5,14,0,0,4299,4301,
		5,1135,0,0,4300,4296,1,0,0,0,4300,4298,1,0,0,0,4301,323,1,0,0,0,4302,4303,
		5,573,0,0,4303,4304,5,464,0,0,4304,325,1,0,0,0,4305,4306,5,573,0,0,4306,
		4308,5,597,0,0,4307,4309,5,6,0,0,4308,4307,1,0,0,0,4308,4309,1,0,0,0,4309,
		4311,1,0,0,0,4310,4312,3,344,172,0,4311,4310,1,0,0,0,4311,4312,1,0,0,0,
		4312,327,1,0,0,0,4313,4314,5,612,0,0,4314,4323,5,597,0,0,4315,4320,3,350,
		175,0,4316,4317,5,1122,0,0,4317,4319,3,350,175,0,4318,4316,1,0,0,0,4319,
		4322,1,0,0,0,4320,4318,1,0,0,0,4320,4321,1,0,0,0,4321,4324,1,0,0,0,4322,
		4320,1,0,0,0,4323,4315,1,0,0,0,4323,4324,1,0,0,0,4324,4327,1,0,0,0,4325,
		4326,5,646,0,0,4326,4328,3,352,176,0,4327,4325,1,0,0,0,4327,4328,1,0,0,
		0,4328,4332,1,0,0,0,4329,4331,3,354,177,0,4330,4329,1,0,0,0,4331,4334,
		1,0,0,0,4332,4330,1,0,0,0,4332,4333,1,0,0,0,4333,4336,1,0,0,0,4334,4332,
		1,0,0,0,4335,4337,3,344,172,0,4336,4335,1,0,0,0,4336,4337,1,0,0,0,4337,
		329,1,0,0,0,4338,4339,5,618,0,0,4339,4348,5,597,0,0,4340,4345,3,350,175,
		0,4341,4342,5,1122,0,0,4342,4344,3,350,175,0,4343,4341,1,0,0,0,4344,4347,
		1,0,0,0,4345,4343,1,0,0,0,4345,4346,1,0,0,0,4346,4349,1,0,0,0,4347,4345,
		1,0,0,0,4348,4340,1,0,0,0,4348,4349,1,0,0,0,4349,331,1,0,0,0,4350,4351,
		5,612,0,0,4351,4352,5,429,0,0,4352,333,1,0,0,0,4353,4354,5,618,0,0,4354,
		4355,5,429,0,0,4355,335,1,0,0,0,4356,4357,3,338,169,0,4357,4358,5,1111,
		0,0,4358,4359,5,1135,0,0,4359,4386,1,0,0,0,4360,4361,3,340,170,0,4361,
		4362,5,1111,0,0,4362,4363,3,564,282,0,4363,4386,1,0,0,0,4364,4365,3,342,
		171,0,4365,4366,5,1111,0,0,4366,4367,7,26,0,0,4367,4386,1,0,0,0,4368,4369,
		5,468,0,0,4369,4370,5,1111,0,0,4370,4386,5,1138,0,0,4371,4372,5,436,0,
		0,4372,4373,5,1111,0,0,4373,4382,5,1120,0,0,4374,4379,3,558,279,0,4375,
		4376,5,1122,0,0,4376,4378,3,558,279,0,4377,4375,1,0,0,0,4378,4381,1,0,
		0,0,4379,4377,1,0,0,0,4379,4380,1,0,0,0,4380,4383,1,0,0,0,4381,4379,1,
		0,0,0,4382,4374,1,0,0,0,4382,4383,1,0,0,0,4383,4384,1,0,0,0,4384,4386,
		5,1121,0,0,4385,4356,1,0,0,0,4385,4360,1,0,0,0,4385,4364,1,0,0,0,4385,
		4368,1,0,0,0,4385,4371,1,0,0,0,4386,337,1,0,0,0,4387,4388,7,59,0,0,4388,
		339,1,0,0,0,4389,4390,7,60,0,0,4390,341,1,0,0,0,4391,4392,7,61,0,0,4392,
		343,1,0,0,0,4393,4394,5,62,0,0,4394,4395,5,346,0,0,4395,4396,5,1135,0,
		0,4396,345,1,0,0,0,4397,4398,5,565,0,0,4398,4399,5,1111,0,0,4399,4400,
		5,1120,0,0,4400,4401,3,590,295,0,4401,4402,5,1121,0,0,4402,4447,1,0,0,
		0,4403,4404,5,567,0,0,4404,4405,5,1111,0,0,4405,4406,5,1120,0,0,4406,4407,
		3,590,295,0,4407,4408,5,1121,0,0,4408,4447,1,0,0,0,4409,4410,5,566,0,0,
		4410,4411,5,1111,0,0,4411,4412,5,1120,0,0,4412,4413,3,592,296,0,4413,4414,
		5,1121,0,0,4414,4447,1,0,0,0,4415,4416,5,568,0,0,4416,4417,5,1111,0,0,
		4417,4418,5,1120,0,0,4418,4419,3,592,296,0,4419,4420,5,1121,0,0,4420,4447,
		1,0,0,0,4421,4422,5,570,0,0,4422,4423,5,1111,0,0,4423,4424,5,1120,0,0,
		4424,4425,3,602,301,0,4425,4426,5,1121,0,0,4426,4447,1,0,0,0,4427,4428,
		5,571,0,0,4428,4429,5,1111,0,0,4429,4430,5,1120,0,0,4430,4431,3,602,301,
		0,4431,4432,5,1121,0,0,4432,4447,1,0,0,0,4433,4434,5,569,0,0,4434,4435,
		5,1111,0,0,4435,4436,5,1120,0,0,4436,4441,3,348,174,0,4437,4438,5,1122,
		0,0,4438,4440,3,348,174,0,4439,4437,1,0,0,0,4440,4443,1,0,0,0,4441,4439,
		1,0,0,0,4441,4442,1,0,0,0,4442,4444,1,0,0,0,4443,4441,1,0,0,0,4444,4445,
		5,1121,0,0,4445,4447,1,0,0,0,4446,4397,1,0,0,0,4446,4403,1,0,0,0,4446,
		4409,1,0,0,0,4446,4415,1,0,0,0,4446,4421,1,0,0,0,4446,4427,1,0,0,0,4446,
		4433,1,0,0,0,4447,347,1,0,0,0,4448,4449,5,1120,0,0,4449,4450,3,532,266,
		0,4450,4451,5,1122,0,0,4451,4452,3,532,266,0,4452,4453,5,1121,0,0,4453,
		349,1,0,0,0,4454,4455,7,62,0,0,4455,351,1,0,0,0,4456,4457,7,63,0,0,4457,
		4458,5,1111,0,0,4458,4475,3,356,178,0,4459,4460,5,470,0,0,4460,4461,5,
		1111,0,0,4461,4462,5,1135,0,0,4462,4463,5,1122,0,0,4463,4464,5,471,0,0,
		4464,4465,5,1111,0,0,4465,4475,3,564,282,0,4466,4467,5,559,0,0,4467,4468,
		5,1111,0,0,4468,4469,5,1135,0,0,4469,4470,5,1122,0,0,4470,4471,5,560,0,
		0,4471,4472,5,1111,0,0,4472,4475,3,564,282,0,4473,4475,5,606,0,0,4474,
		4456,1,0,0,0,4474,4459,1,0,0,0,4474,4466,1,0,0,0,4474,4473,1,0,0,0,4475,
		353,1,0,0,0,4476,4477,5,648,0,0,4477,4478,5,1111,0,0,4478,4489,5,1135,
		0,0,4479,4480,5,536,0,0,4480,4481,5,1111,0,0,4481,4489,5,1135,0,0,4482,
		4483,5,382,0,0,4483,4484,5,1111,0,0,4484,4489,5,1135,0,0,4485,4486,5,539,
		0,0,4486,4487,5,1111,0,0,4487,4489,5,1135,0,0,4488,4476,1,0,0,0,4488,4479,
		1,0,0,0,4488,4482,1,0,0,0,4488,4485,1,0,0,0,4489,355,1,0,0,0,4490,4495,
		3,550,275,0,4491,4492,5,1122,0,0,4492,4494,3,550,275,0,4493,4491,1,0,0,
		0,4494,4497,1,0,0,0,4495,4493,1,0,0,0,4495,4496,1,0,0,0,4496,4500,1,0,
		0,0,4497,4495,1,0,0,0,4498,4500,5,1135,0,0,4499,4490,1,0,0,0,4499,4498,
		1,0,0,0,4500,357,1,0,0,0,4501,4502,5,664,0,0,4502,4503,7,64,0,0,4503,4505,
		3,552,276,0,4504,4506,7,65,0,0,4505,4504,1,0,0,0,4505,4506,1,0,0,0,4506,
		359,1,0,0,0,4507,4508,5,664,0,0,4508,4509,5,396,0,0,4509,4515,3,552,276,
		0,4510,4513,5,626,0,0,4511,4512,5,62,0,0,4512,4514,5,496,0,0,4513,4511,
		1,0,0,0,4513,4514,1,0,0,0,4514,4516,1,0,0,0,4515,4510,1,0,0,0,4515,4516,
		1,0,0,0,4516,361,1,0,0,0,4517,4518,5,664,0,0,4518,4519,5,544,0,0,4519,
		4520,3,552,276,0,4520,363,1,0,0,0,4521,4522,5,664,0,0,4522,4523,5,360,
		0,0,4523,4526,3,552,276,0,4524,4525,5,523,0,0,4525,4527,5,537,0,0,4526,
		4524,1,0,0,0,4526,4527,1,0,0,0,4527,365,1,0,0,0,4528,4529,5,664,0,0,4529,
		4530,5,580,0,0,4530,4531,3,552,276,0,4531,367,1,0,0,0,4532,4533,5,664,
		0,0,4533,4536,5,554,0,0,4534,4535,5,31,0,0,4535,4537,3,552,276,0,4536,
		4534,1,0,0,0,4536,4537,1,0,0,0,4537,369,1,0,0,0,4538,4539,5,544,0,0,4539,
		4540,3,558,279,0,4540,4543,5,65,0,0,4541,4544,5,1135,0,0,4542,4544,5,1148,
		0,0,4543,4541,1,0,0,0,4543,4542,1,0,0,0,4544,371,1,0,0,0,4545,4546,5,682,
		0,0,4546,4549,3,558,279,0,4547,4548,5,181,0,0,4548,4550,3,604,302,0,4549,
		4547,1,0,0,0,4549,4550,1,0,0,0,4550,373,1,0,0,0,4551,4552,7,66,0,0,4552,
		4553,5,544,0,0,4553,4554,3,558,279,0,4554,375,1,0,0,0,4555,4558,3,378,
		189,0,4556,4558,3,4,2,0,4557,4555,1,0,0,0,4557,4556,1,0,0,0,4558,377,1,
		0,0,0,4559,4560,3,558,279,0,4560,4561,5,1131,0,0,4561,4563,1,0,0,0,4562,
		4559,1,0,0,0,4562,4563,1,0,0,0,4563,4564,1,0,0,0,4564,4603,5,335,0,0,4565,
		4566,3,398,199,0,4566,4567,5,1123,0,0,4567,4569,1,0,0,0,4568,4565,1,0,
		0,0,4569,4572,1,0,0,0,4570,4568,1,0,0,0,4570,4571,1,0,0,0,4571,4578,1,
		0,0,0,4572,4570,1,0,0,0,4573,4574,3,400,200,0,4574,4575,5,1123,0,0,4575,
		4577,1,0,0,0,4576,4573,1,0,0,0,4577,4580,1,0,0,0,4578,4576,1,0,0,0,4578,
		4579,1,0,0,0,4579,4586,1,0,0,0,4580,4578,1,0,0,0,4581,4582,3,402,201,0,
		4582,4583,5,1123,0,0,4583,4585,1,0,0,0,4584,4581,1,0,0,0,4585,4588,1,0,
		0,0,4586,4584,1,0,0,0,4586,4587,1,0,0,0,4587,4594,1,0,0,0,4588,4586,1,
		0,0,0,4589,4590,3,404,202,0,4590,4591,5,1123,0,0,4591,4593,1,0,0,0,4592,
		4589,1,0,0,0,4593,4596,1,0,0,0,4594,4592,1,0,0,0,4594,4595,1,0,0,0,4595,
		4600,1,0,0,0,4596,4594,1,0,0,0,4597,4599,3,408,204,0,4598,4597,1,0,0,0,
		4599,4602,1,0,0,0,4600,4598,1,0,0,0,4600,4601,1,0,0,0,4601,4604,1,0,0,
		0,4602,4600,1,0,0,0,4603,4570,1,0,0,0,4603,4604,1,0,0,0,4604,4605,1,0,
		0,0,4605,4607,5,396,0,0,4606,4608,3,558,279,0,4607,4606,1,0,0,0,4607,4608,
		1,0,0,0,4608,379,1,0,0,0,4609,4612,5,21,0,0,4610,4613,3,558,279,0,4611,
		4613,3,660,330,0,4612,4610,1,0,0,0,4612,4611,1,0,0,0,4612,4613,1,0,0,0,
		4613,4615,1,0,0,0,4614,4616,3,410,205,0,4615,4614,1,0,0,0,4616,4617,1,
		0,0,0,4617,4615,1,0,0,0,4617,4618,1,0,0,0,4618,4625,1,0,0,0,4619,4621,
		5,51,0,0,4620,4622,3,408,204,0,4621,4620,1,0,0,0,4622,4623,1,0,0,0,4623,
		4621,1,0,0,0,4623,4624,1,0,0,0,4624,4626,1,0,0,0,4625,4619,1,0,0,0,4625,
		4626,1,0,0,0,4626,4627,1,0,0,0,4627,4628,5,396,0,0,4628,4629,5,21,0,0,
		4629,381,1,0,0,0,4630,4631,5,74,0,0,4631,4632,3,660,330,0,4632,4634,5,
		168,0,0,4633,4635,3,408,204,0,4634,4633,1,0,0,0,4635,4636,1,0,0,0,4636,
		4634,1,0,0,0,4636,4637,1,0,0,0,4637,4641,1,0,0,0,4638,4640,3,412,206,0,
		4639,4638,1,0,0,0,4640,4643,1,0,0,0,4641,4639,1,0,0,0,4641,4642,1,0,0,
		0,4642,4650,1,0,0,0,4643,4641,1,0,0,0,4644,4646,5,51,0,0,4645,4647,3,408,
		204,0,4646,4645,1,0,0,0,4647,4648,1,0,0,0,4648,4646,1,0,0,0,4648,4649,
		1,0,0,0,4649,4651,1,0,0,0,4650,4644,1,0,0,0,4650,4651,1,0,0,0,4651,4652,
		1,0,0,0,4652,4653,5,396,0,0,4653,4654,5,74,0,0,4654,383,1,0,0,0,4655,4656,
		5,86,0,0,4656,4657,3,558,279,0,4657,385,1,0,0,0,4658,4659,5,92,0,0,4659,
		4660,3,558,279,0,4660,387,1,0,0,0,4661,4662,3,558,279,0,4662,4663,5,1131,
		0,0,4663,4665,1,0,0,0,4664,4661,1,0,0,0,4664,4665,1,0,0,0,4665,4666,1,
		0,0,0,4666,4668,5,101,0,0,4667,4669,3,408,204,0,4668,4667,1,0,0,0,4669,
		4670,1,0,0,0,4670,4668,1,0,0,0,4670,4671,1,0,0,0,4671,4672,1,0,0,0,4672,
		4673,5,396,0,0,4673,4675,5,101,0,0,4674,4676,3,558,279,0,4675,4674,1,0,
		0,0,4675,4676,1,0,0,0,4676,389,1,0,0,0,4677,4678,3,558,279,0,4678,4679,
		5,1131,0,0,4679,4681,1,0,0,0,4680,4677,1,0,0,0,4680,4681,1,0,0,0,4681,
		4682,1,0,0,0,4682,4684,5,136,0,0,4683,4685,3,408,204,0,4684,4683,1,0,0,
		0,4685,4686,1,0,0,0,4686,4684,1,0,0,0,4686,4687,1,0,0,0,4687,4688,1,0,
		0,0,4688,4689,5,646,0,0,4689,4690,3,660,330,0,4690,4691,5,396,0,0,4691,
		4693,5,136,0,0,4692,4694,3,558,279,0,4693,4692,1,0,0,0,4693,4694,1,0,0,
		0,4694,391,1,0,0,0,4695,4696,5,142,0,0,4696,4697,3,660,330,0,4697,393,
		1,0,0,0,4698,4699,3,558,279,0,4699,4700,5,1131,0,0,4700,4702,1,0,0,0,4701,
		4698,1,0,0,0,4701,4702,1,0,0,0,4702,4703,1,0,0,0,4703,4704,5,185,0,0,4704,
		4705,3,660,330,0,4705,4707,5,390,0,0,4706,4708,3,408,204,0,4707,4706,1,
		0,0,0,4708,4709,1,0,0,0,4709,4707,1,0,0,0,4709,4710,1,0,0,0,4710,4711,
		1,0,0,0,4711,4712,5,396,0,0,4712,4714,5,185,0,0,4713,4715,3,558,279,0,
		4714,4713,1,0,0,0,4714,4715,1,0,0,0,4715,395,1,0,0,0,4716,4717,5,352,0,
		0,4717,4732,3,558,279,0,4718,4723,5,61,0,0,4719,4721,5,507,0,0,4720,4719,
		1,0,0,0,4720,4721,1,0,0,0,4721,4722,1,0,0,0,4722,4724,5,65,0,0,4723,4720,
		1,0,0,0,4723,4724,1,0,0,0,4724,4725,1,0,0,0,4725,4726,3,558,279,0,4726,
		4727,5,84,0,0,4727,4728,3,590,295,0,4728,4732,1,0,0,0,4729,4730,5,526,
		0,0,4730,4732,3,558,279,0,4731,4716,1,0,0,0,4731,4718,1,0,0,0,4731,4729,
		1,0,0,0,4732,397,1,0,0,0,4733,4734,5,39,0,0,4734,4735,3,590,295,0,4735,
		4738,3,578,289,0,4736,4737,5,40,0,0,4737,4739,3,660,330,0,4738,4736,1,
		0,0,0,4738,4739,1,0,0,0,4739,399,1,0,0,0,4740,4741,5,39,0,0,4741,4742,
		3,558,279,0,4742,4743,5,28,0,0,4743,4750,5,62,0,0,4744,4751,3,564,282,
		0,4745,4747,5,157,0,0,4746,4748,5,652,0,0,4747,4746,1,0,0,0,4747,4748,
		1,0,0,0,4748,4749,1,0,0,0,4749,4751,5,1135,0,0,4750,4744,1,0,0,0,4750,
		4745,1,0,0,0,4751,401,1,0,0,0,4752,4753,5,39,0,0,4753,4754,3,558,279,0,
		4754,4755,5,36,0,0,4755,4756,5,62,0,0,4756,4757,3,204,102,0,4757,403,1,
		0,0,0,4758,4759,5,39,0,0,4759,4760,7,67,0,0,4760,4761,5,430,0,0,4761,4762,
		5,62,0,0,4762,4767,3,406,203,0,4763,4764,5,1122,0,0,4764,4766,3,406,203,
		0,4765,4763,1,0,0,0,4766,4769,1,0,0,0,4767,4765,1,0,0,0,4767,4768,1,0,
		0,0,4768,4770,1,0,0,0,4769,4767,1,0,0,0,4770,4771,3,376,188,0,4771,405,
		1,0,0,0,4772,4784,3,564,282,0,4773,4775,5,157,0,0,4774,4776,5,652,0,0,
		4775,4774,1,0,0,0,4775,4776,1,0,0,0,4776,4777,1,0,0,0,4777,4784,5,1135,
		0,0,4778,4784,3,558,279,0,4779,4784,5,158,0,0,4780,4781,5,110,0,0,4781,
		4784,5,423,0,0,4782,4784,5,156,0,0,4783,4772,1,0,0,0,4783,4773,1,0,0,0,
		4783,4778,1,0,0,0,4783,4779,1,0,0,0,4783,4780,1,0,0,0,4783,4782,1,0,0,
		0,4784,407,1,0,0,0,4785,4788,3,18,9,0,4786,4788,3,4,2,0,4787,4785,1,0,
		0,0,4787,4786,1,0,0,0,4788,4789,1,0,0,0,4789,4790,5,1123,0,0,4790,409,
		1,0,0,0,4791,4794,5,183,0,0,4792,4795,3,576,288,0,4793,4795,3,660,330,
		0,4794,4792,1,0,0,0,4794,4793,1,0,0,0,4795,4796,1,0,0,0,4796,4798,5,168,
		0,0,4797,4799,3,408,204,0,4798,4797,1,0,0,0,4799,4800,1,0,0,0,4800,4798,
		1,0,0,0,4800,4801,1,0,0,0,4801,411,1,0,0,0,4802,4803,5,52,0,0,4803,4804,
		3,660,330,0,4804,4806,5,168,0,0,4805,4807,3,408,204,0,4806,4805,1,0,0,
		0,4807,4808,1,0,0,0,4808,4806,1,0,0,0,4808,4809,1,0,0,0,4809,413,1,0,0,
		0,4810,4811,5,7,0,0,4811,4812,5,648,0,0,4812,4817,3,434,217,0,4813,4814,
		5,1122,0,0,4814,4816,3,434,217,0,4815,4813,1,0,0,0,4816,4819,1,0,0,0,4817,
		4815,1,0,0,0,4817,4818,1,0,0,0,4818,4865,1,0,0,0,4819,4817,1,0,0,0,4820,
		4821,5,7,0,0,4821,4823,5,648,0,0,4822,4824,3,612,306,0,4823,4822,1,0,0,
		0,4823,4824,1,0,0,0,4824,4825,1,0,0,0,4825,4830,3,436,218,0,4826,4827,
		5,1122,0,0,4827,4829,3,436,218,0,4828,4826,1,0,0,0,4829,4832,1,0,0,0,4830,
		4828,1,0,0,0,4830,4831,1,0,0,0,4831,4847,1,0,0,0,4832,4830,1,0,0,0,4833,
		4845,5,138,0,0,4834,4846,5,516,0,0,4835,4842,3,438,219,0,4836,4838,5,10,
		0,0,4837,4836,1,0,0,0,4837,4838,1,0,0,0,4838,4839,1,0,0,0,4839,4841,3,
		438,219,0,4840,4837,1,0,0,0,4841,4844,1,0,0,0,4842,4840,1,0,0,0,4842,4843,
		1,0,0,0,4843,4846,1,0,0,0,4844,4842,1,0,0,0,4845,4834,1,0,0,0,4845,4835,
		1,0,0,0,4846,4848,1,0,0,0,4847,4833,1,0,0,0,4847,4848,1,0,0,0,4848,4855,
		1,0,0,0,4849,4851,5,186,0,0,4850,4852,3,440,220,0,4851,4850,1,0,0,0,4852,
		4853,1,0,0,0,4853,4851,1,0,0,0,4853,4854,1,0,0,0,4854,4856,1,0,0,0,4855,
		4849,1,0,0,0,4855,4856,1,0,0,0,4856,4861,1,0,0,0,4857,4860,3,442,221,0,
		4858,4860,3,444,222,0,4859,4857,1,0,0,0,4859,4858,1,0,0,0,4860,4863,1,
		0,0,0,4861,4859,1,0,0,0,4861,4862,1,0,0,0,4862,4865,1,0,0,0,4863,4861,
		1,0,0,0,4864,4810,1,0,0,0,4864,4820,1,0,0,0,4865,415,1,0,0,0,4866,4867,
		5,32,0,0,4867,4868,5,648,0,0,4868,4873,3,436,218,0,4869,4870,5,1122,0,
		0,4870,4872,3,436,218,0,4871,4869,1,0,0,0,4872,4875,1,0,0,0,4873,4871,
		1,0,0,0,4873,4874,1,0,0,0,4874,4921,1,0,0,0,4875,4873,1,0,0,0,4876,4877,
		5,32,0,0,4877,4879,5,648,0,0,4878,4880,3,614,307,0,4879,4878,1,0,0,0,4879,
		4880,1,0,0,0,4880,4881,1,0,0,0,4881,4886,3,436,218,0,4882,4883,5,1122,
		0,0,4883,4885,3,436,218,0,4884,4882,1,0,0,0,4885,4888,1,0,0,0,4886,4884,
		1,0,0,0,4886,4887,1,0,0,0,4887,4903,1,0,0,0,4888,4886,1,0,0,0,4889,4901,
		5,138,0,0,4890,4902,5,516,0,0,4891,4898,3,438,219,0,4892,4894,5,10,0,0,
		4893,4892,1,0,0,0,4893,4894,1,0,0,0,4894,4895,1,0,0,0,4895,4897,3,438,
		219,0,4896,4893,1,0,0,0,4897,4900,1,0,0,0,4898,4896,1,0,0,0,4898,4899,
		1,0,0,0,4899,4902,1,0,0,0,4900,4898,1,0,0,0,4901,4890,1,0,0,0,4901,4891,
		1,0,0,0,4902,4904,1,0,0,0,4903,4889,1,0,0,0,4903,4904,1,0,0,0,4904,4911,
		1,0,0,0,4905,4907,5,186,0,0,4906,4908,3,440,220,0,4907,4906,1,0,0,0,4908,
		4909,1,0,0,0,4909,4907,1,0,0,0,4909,4910,1,0,0,0,4910,4912,1,0,0,0,4911,
		4905,1,0,0,0,4911,4912,1,0,0,0,4912,4917,1,0,0,0,4913,4916,3,442,221,0,
		4914,4916,3,444,222,0,4915,4913,1,0,0,0,4915,4914,1,0,0,0,4916,4919,1,
		0,0,0,4917,4915,1,0,0,0,4917,4918,1,0,0,0,4918,4921,1,0,0,0,4919,4917,
		1,0,0,0,4920,4866,1,0,0,0,4920,4876,1,0,0,0,4921,417,1,0,0,0,4922,4923,
		5,49,0,0,4923,4925,5,648,0,0,4924,4926,3,612,306,0,4925,4924,1,0,0,0,4925,
		4926,1,0,0,0,4926,4927,1,0,0,0,4927,4932,3,540,270,0,4928,4929,5,1122,
		0,0,4929,4931,3,540,270,0,4930,4928,1,0,0,0,4931,4934,1,0,0,0,4932,4930,
		1,0,0,0,4932,4933,1,0,0,0,4933,419,1,0,0,0,4934,4932,1,0,0,0,4935,4936,
		5,69,0,0,4936,4941,3,446,223,0,4937,4938,5,1122,0,0,4938,4940,3,446,223,
		0,4939,4937,1,0,0,0,4940,4943,1,0,0,0,4941,4939,1,0,0,0,4941,4942,1,0,
		0,0,4942,4944,1,0,0,0,4943,4941,1,0,0,0,4944,4946,5,114,0,0,4945,4947,
		7,68,0,0,4946,4945,1,0,0,0,4946,4947,1,0,0,0,4947,4948,1,0,0,0,4948,4949,
		3,450,225,0,4949,4950,5,169,0,0,4950,4955,3,436,218,0,4951,4952,5,1122,
		0,0,4952,4954,3,436,218,0,4953,4951,1,0,0,0,4954,4957,1,0,0,0,4955,4953,
		1,0,0,0,4955,4956,1,0,0,0,4956,4972,1,0,0,0,4957,4955,1,0,0,0,4958,4970,
		5,138,0,0,4959,4971,5,516,0,0,4960,4967,3,438,219,0,4961,4963,5,10,0,0,
		4962,4961,1,0,0,0,4962,4963,1,0,0,0,4963,4964,1,0,0,0,4964,4966,3,438,
		219,0,4965,4962,1,0,0,0,4966,4969,1,0,0,0,4967,4965,1,0,0,0,4967,4968,
		1,0,0,0,4968,4971,1,0,0,0,4969,4967,1,0,0,0,4970,4959,1,0,0,0,4970,4960,
		1,0,0,0,4971,4973,1,0,0,0,4972,4958,1,0,0,0,4972,4973,1,0,0,0,4973,4983,
		1,0,0,0,4974,4980,5,186,0,0,4975,4976,5,69,0,0,4976,4979,5,116,0,0,4977,
		4979,3,440,220,0,4978,4975,1,0,0,0,4978,4977,1,0,0,0,4979,4982,1,0,0,0,
		4980,4978,1,0,0,0,4980,4981,1,0,0,0,4981,4984,1,0,0,0,4982,4980,1,0,0,
		0,4983,4974,1,0,0,0,4983,4984,1,0,0,0,4984,4991,1,0,0,0,4985,4986,5,12,
		0,0,4986,4987,3,540,270,0,4987,4988,5,186,0,0,4988,4989,5,579,0,0,4989,
		4990,3,422,211,0,4990,4992,1,0,0,0,4991,4985,1,0,0,0,4991,4992,1,0,0,0,
		4992,5029,1,0,0,0,4993,4996,5,69,0,0,4994,4997,3,540,270,0,4995,4997,3,
		558,279,0,4996,4994,1,0,0,0,4996,4995,1,0,0,0,4997,5005,1,0,0,0,4998,5001,
		5,1122,0,0,4999,5002,3,540,270,0,5000,5002,3,558,279,0,5001,4999,1,0,0,
		0,5001,5000,1,0,0,0,5002,5004,1,0,0,0,5003,4998,1,0,0,0,5004,5007,1,0,
		0,0,5005,5003,1,0,0,0,5005,5006,1,0,0,0,5006,5008,1,0,0,0,5007,5005,1,
		0,0,0,5008,5011,5,169,0,0,5009,5012,3,540,270,0,5010,5012,3,558,279,0,
		5011,5009,1,0,0,0,5011,5010,1,0,0,0,5012,5020,1,0,0,0,5013,5016,5,1122,
		0,0,5014,5017,3,540,270,0,5015,5017,3,558,279,0,5016,5014,1,0,0,0,5016,
		5015,1,0,0,0,5017,5019,1,0,0,0,5018,5013,1,0,0,0,5019,5022,1,0,0,0,5020,
		5018,1,0,0,0,5020,5021,1,0,0,0,5021,5026,1,0,0,0,5022,5020,1,0,0,0,5023,
		5024,5,186,0,0,5024,5025,5,703,0,0,5025,5027,5,116,0,0,5026,5023,1,0,0,
		0,5026,5027,1,0,0,0,5027,5029,1,0,0,0,5028,4935,1,0,0,0,5028,4993,1,0,
		0,0,5029,421,1,0,0,0,5030,5053,5,40,0,0,5031,5053,5,516,0,0,5032,5042,
		5,6,0,0,5033,5034,5,56,0,0,5034,5039,3,540,270,0,5035,5036,5,1122,0,0,
		5036,5038,3,540,270,0,5037,5035,1,0,0,0,5038,5041,1,0,0,0,5039,5037,1,
		0,0,0,5039,5040,1,0,0,0,5040,5043,1,0,0,0,5041,5039,1,0,0,0,5042,5033,
		1,0,0,0,5042,5043,1,0,0,0,5043,5053,1,0,0,0,5044,5049,3,540,270,0,5045,
		5046,5,1122,0,0,5046,5048,3,540,270,0,5047,5045,1,0,0,0,5048,5051,1,0,
		0,0,5049,5047,1,0,0,0,5049,5050,1,0,0,0,5050,5053,1,0,0,0,5051,5049,1,
		0,0,0,5052,5030,1,0,0,0,5052,5031,1,0,0,0,5052,5032,1,0,0,0,5052,5044,
		1,0,0,0,5053,423,1,0,0,0,5054,5055,5,69,0,0,5055,5056,5,550,0,0,5056,5057,
		5,114,0,0,5057,5058,3,540,270,0,5058,5059,5,169,0,0,5059,5064,3,540,270,
		0,5060,5061,5,1122,0,0,5061,5063,3,540,270,0,5062,5060,1,0,0,0,5063,5066,
		1,0,0,0,5064,5062,1,0,0,0,5064,5065,1,0,0,0,5065,5070,1,0,0,0,5066,5064,
		1,0,0,0,5067,5068,5,186,0,0,5068,5069,5,69,0,0,5069,5071,5,116,0,0,5070,
		5067,1,0,0,0,5070,5071,1,0,0,0,5071,425,1,0,0,0,5072,5073,5,135,0,0,5073,
		5074,5,648,0,0,5074,5079,3,452,226,0,5075,5076,5,1122,0,0,5076,5078,3,
		452,226,0,5077,5075,1,0,0,0,5078,5081,1,0,0,0,5079,5077,1,0,0,0,5079,5080,
		1,0,0,0,5080,427,1,0,0,0,5081,5079,1,0,0,0,5082,5083,5,143,0,0,5083,5088,
		3,446,223,0,5084,5085,5,1122,0,0,5085,5087,3,446,223,0,5086,5084,1,0,0,
		0,5087,5090,1,0,0,0,5088,5086,1,0,0,0,5088,5089,1,0,0,0,5089,5091,1,0,
		0,0,5090,5088,1,0,0,0,5091,5093,5,114,0,0,5092,5094,7,68,0,0,5093,5092,
		1,0,0,0,5093,5094,1,0,0,0,5094,5095,1,0,0,0,5095,5096,3,450,225,0,5096,
		5097,5,65,0,0,5097,5102,3,540,270,0,5098,5099,5,1122,0,0,5099,5101,3,540,
		270,0,5100,5098,1,0,0,0,5101,5104,1,0,0,0,5102,5100,1,0,0,0,5102,5103,
		1,0,0,0,5103,5147,1,0,0,0,5104,5102,1,0,0,0,5105,5106,5,143,0,0,5106,5108,
		5,6,0,0,5107,5109,5,688,0,0,5108,5107,1,0,0,0,5108,5109,1,0,0,0,5109,5110,
		1,0,0,0,5110,5111,5,1122,0,0,5111,5112,5,69,0,0,5112,5113,5,116,0,0,5113,
		5114,5,65,0,0,5114,5119,3,540,270,0,5115,5116,5,1122,0,0,5116,5118,3,540,
		270,0,5117,5115,1,0,0,0,5118,5121,1,0,0,0,5119,5117,1,0,0,0,5119,5120,
		1,0,0,0,5120,5147,1,0,0,0,5121,5119,1,0,0,0,5122,5123,5,143,0,0,5123,5128,
		3,558,279,0,5124,5125,5,1122,0,0,5125,5127,3,558,279,0,5126,5124,1,0,0,
		0,5127,5130,1,0,0,0,5128,5126,1,0,0,0,5128,5129,1,0,0,0,5129,5131,1,0,
		0,0,5130,5128,1,0,0,0,5131,5134,5,65,0,0,5132,5135,3,540,270,0,5133,5135,
		3,558,279,0,5134,5132,1,0,0,0,5134,5133,1,0,0,0,5135,5143,1,0,0,0,5136,
		5139,5,1122,0,0,5137,5140,3,540,270,0,5138,5140,3,558,279,0,5139,5137,
		1,0,0,0,5139,5138,1,0,0,0,5140,5142,1,0,0,0,5141,5136,1,0,0,0,5142,5145,
		1,0,0,0,5143,5141,1,0,0,0,5143,5144,1,0,0,0,5144,5147,1,0,0,0,5145,5143,
		1,0,0,0,5146,5082,1,0,0,0,5146,5105,1,0,0,0,5146,5122,1,0,0,0,5147,429,
		1,0,0,0,5148,5149,5,143,0,0,5149,5150,5,550,0,0,5150,5151,5,114,0,0,5151,
		5152,3,540,270,0,5152,5153,5,65,0,0,5153,5158,3,540,270,0,5154,5155,5,
		1122,0,0,5155,5157,3,540,270,0,5156,5154,1,0,0,0,5157,5160,1,0,0,0,5158,
		5156,1,0,0,0,5158,5159,1,0,0,0,5159,431,1,0,0,0,5160,5158,1,0,0,0,5161,
		5162,5,149,0,0,5162,5165,5,536,0,0,5163,5164,5,62,0,0,5164,5166,3,540,
		270,0,5165,5163,1,0,0,0,5165,5166,1,0,0,0,5166,5167,1,0,0,0,5167,5170,
		5,1111,0,0,5168,5171,3,654,327,0,5169,5171,5,1135,0,0,5170,5168,1,0,0,
		0,5170,5169,1,0,0,0,5171,433,1,0,0,0,5172,5173,3,540,270,0,5173,5174,3,
		442,221,0,5174,435,1,0,0,0,5175,5176,3,540,270,0,5176,5177,5,435,0,0,5177,
		5178,5,18,0,0,5178,5179,5,536,0,0,5179,5180,5,1135,0,0,5180,5204,1,0,0,
		0,5181,5182,3,540,270,0,5182,5185,5,435,0,0,5183,5184,5,186,0,0,5184,5186,
		3,556,278,0,5185,5183,1,0,0,0,5185,5186,1,0,0,0,5186,5187,1,0,0,0,5187,
		5188,5,18,0,0,5188,5192,5,1135,0,0,5189,5190,5,141,0,0,5190,5191,5,34,
		0,0,5191,5193,5,536,0,0,5192,5189,1,0,0,0,5192,5193,1,0,0,0,5193,5204,
		1,0,0,0,5194,5195,3,540,270,0,5195,5196,5,435,0,0,5196,5197,5,186,0,0,
		5197,5200,3,556,278,0,5198,5199,5,12,0,0,5199,5201,5,1135,0,0,5200,5198,
		1,0,0,0,5200,5201,1,0,0,0,5201,5204,1,0,0,0,5202,5204,3,540,270,0,5203,
		5175,1,0,0,0,5203,5181,1,0,0,0,5203,5194,1,0,0,0,5203,5202,1,0,0,0,5204,
		437,1,0,0,0,5205,5214,5,162,0,0,5206,5214,5,663,0,0,5207,5208,5,349,0,
		0,5208,5214,5,1135,0,0,5209,5210,5,452,0,0,5210,5214,5,1135,0,0,5211,5212,
		5,623,0,0,5212,5214,5,1135,0,0,5213,5205,1,0,0,0,5213,5206,1,0,0,0,5213,
		5207,1,0,0,0,5213,5209,1,0,0,0,5213,5211,1,0,0,0,5214,439,1,0,0,0,5215,
		5216,5,486,0,0,5216,5224,3,564,282,0,5217,5218,5,489,0,0,5218,5224,3,564,
		282,0,5219,5220,5,485,0,0,5220,5224,3,564,282,0,5221,5222,5,490,0,0,5222,
		5224,3,564,282,0,5223,5215,1,0,0,0,5223,5217,1,0,0,0,5223,5219,1,0,0,0,
		5223,5221,1,0,0,0,5224,441,1,0,0,0,5225,5226,5,536,0,0,5226,5233,5,409,
		0,0,5227,5234,5,40,0,0,5228,5234,5,506,0,0,5229,5230,5,83,0,0,5230,5231,
		3,564,282,0,5231,5232,5,674,0,0,5232,5234,1,0,0,0,5233,5227,1,0,0,0,5233,
		5228,1,0,0,0,5233,5229,1,0,0,0,5233,5234,1,0,0,0,5234,443,1,0,0,0,5235,
		5236,5,323,0,0,5236,5237,7,69,0,0,5237,445,1,0,0,0,5238,5243,3,448,224,
		0,5239,5240,5,1120,0,0,5240,5241,3,590,295,0,5241,5242,5,1121,0,0,5242,
		5244,1,0,0,0,5243,5239,1,0,0,0,5243,5244,1,0,0,0,5244,447,1,0,0,0,5245,
		5247,5,6,0,0,5246,5248,5,688,0,0,5247,5246,1,0,0,0,5247,5248,1,0,0,0,5248,
		5331,1,0,0,0,5249,5251,5,7,0,0,5250,5252,5,681,0,0,5251,5250,1,0,0,0,5251,
		5252,1,0,0,0,5252,5331,1,0,0,0,5253,5261,5,32,0,0,5254,5255,5,632,0,0,
		5255,5262,5,680,0,0,5256,5262,5,681,0,0,5257,5262,5,654,0,0,5258,5262,
		5,648,0,0,5259,5262,5,630,0,0,5260,5262,5,579,0,0,5261,5254,1,0,0,0,5261,
		5256,1,0,0,0,5261,5257,1,0,0,0,5261,5258,1,0,0,0,5261,5259,1,0,0,0,5261,
		5260,1,0,0,0,5261,5262,1,0,0,0,5262,5331,1,0,0,0,5263,5331,5,42,0,0,5264,
		5266,5,49,0,0,5265,5267,5,579,0,0,5266,5265,1,0,0,0,5266,5267,1,0,0,0,
		5267,5331,1,0,0,0,5268,5331,5,404,0,0,5269,5331,5,682,0,0,5270,5331,5,
		683,0,0,5271,5272,5,69,0,0,5272,5331,5,116,0,0,5273,5331,5,78,0,0,5274,
		5331,5,82,0,0,5275,5276,5,99,0,0,5276,5331,5,680,0,0,5277,5331,5,684,0,
		0,5278,5331,5,550,0,0,5279,5331,5,132,0,0,5280,5331,5,685,0,0,5281,5282,
		5,572,0,0,5282,5331,7,70,0,0,5283,5331,5,148,0,0,5284,5285,5,151,0,0,5285,
		5331,7,71,0,0,5286,5331,5,686,0,0,5287,5331,5,687,0,0,5288,5331,5,171,
		0,0,5289,5331,5,178,0,0,5290,5331,5,179,0,0,5291,5331,5,689,0,0,5292,5331,
		5,690,0,0,5293,5331,5,691,0,0,5294,5331,5,692,0,0,5295,5331,5,693,0,0,
		5296,5331,5,694,0,0,5297,5331,5,695,0,0,5298,5331,5,696,0,0,5299,5331,
		5,697,0,0,5300,5331,5,698,0,0,5301,5331,5,699,0,0,5302,5331,5,700,0,0,
		5303,5331,5,701,0,0,5304,5331,5,702,0,0,5305,5331,5,704,0,0,5306,5331,
		5,705,0,0,5307,5331,5,706,0,0,5308,5331,5,707,0,0,5309,5331,5,708,0,0,
		5310,5331,5,709,0,0,5311,5331,5,710,0,0,5312,5331,5,711,0,0,5313,5331,
		5,712,0,0,5314,5331,5,713,0,0,5315,5331,5,714,0,0,5316,5331,5,715,0,0,
		5317,5331,5,716,0,0,5318,5331,5,717,0,0,5319,5331,5,718,0,0,5320,5331,
		5,1053,0,0,5321,5331,5,719,0,0,5322,5331,5,720,0,0,5323,5331,5,721,0,0,
		5324,5331,5,722,0,0,5325,5331,5,1089,0,0,5326,5331,5,1090,0,0,5327,5331,
		5,1091,0,0,5328,5331,5,1092,0,0,5329,5331,5,1094,0,0,5330,5245,1,0,0,0,
		5330,5249,1,0,0,0,5330,5253,1,0,0,0,5330,5263,1,0,0,0,5330,5264,1,0,0,
		0,5330,5268,1,0,0,0,5330,5269,1,0,0,0,5330,5270,1,0,0,0,5330,5271,1,0,
		0,0,5330,5273,1,0,0,0,5330,5274,1,0,0,0,5330,5275,1,0,0,0,5330,5277,1,
		0,0,0,5330,5278,1,0,0,0,5330,5279,1,0,0,0,5330,5280,1,0,0,0,5330,5281,
		1,0,0,0,5330,5283,1,0,0,0,5330,5284,1,0,0,0,5330,5286,1,0,0,0,5330,5287,
		1,0,0,0,5330,5288,1,0,0,0,5330,5289,1,0,0,0,5330,5290,1,0,0,0,5330,5291,
		1,0,0,0,5330,5292,1,0,0,0,5330,5293,1,0,0,0,5330,5294,1,0,0,0,5330,5295,
		1,0,0,0,5330,5296,1,0,0,0,5330,5297,1,0,0,0,5330,5298,1,0,0,0,5330,5299,
		1,0,0,0,5330,5300,1,0,0,0,5330,5301,1,0,0,0,5330,5302,1,0,0,0,5330,5303,
		1,0,0,0,5330,5304,1,0,0,0,5330,5305,1,0,0,0,5330,5306,1,0,0,0,5330,5307,
		1,0,0,0,5330,5308,1,0,0,0,5330,5309,1,0,0,0,5330,5310,1,0,0,0,5330,5311,
		1,0,0,0,5330,5312,1,0,0,0,5330,5313,1,0,0,0,5330,5314,1,0,0,0,5330,5315,
		1,0,0,0,5330,5316,1,0,0,0,5330,5317,1,0,0,0,5330,5318,1,0,0,0,5330,5319,
		1,0,0,0,5330,5320,1,0,0,0,5330,5321,1,0,0,0,5330,5322,1,0,0,0,5330,5323,
		1,0,0,0,5330,5324,1,0,0,0,5330,5325,1,0,0,0,5330,5326,1,0,0,0,5330,5327,
		1,0,0,0,5330,5328,1,0,0,0,5330,5329,1,0,0,0,5331,449,1,0,0,0,5332,5349,
		5,1104,0,0,5333,5334,5,1104,0,0,5334,5335,5,1119,0,0,5335,5349,5,1104,
		0,0,5336,5337,3,558,279,0,5337,5338,5,1119,0,0,5338,5339,5,1104,0,0,5339,
		5349,1,0,0,0,5340,5341,3,558,279,0,5341,5342,5,1119,0,0,5342,5343,3,558,
		279,0,5343,5349,1,0,0,0,5344,5345,3,558,279,0,5345,5346,3,562,281,0,5346,
		5349,1,0,0,0,5347,5349,3,558,279,0,5348,5332,1,0,0,0,5348,5333,1,0,0,0,
		5348,5336,1,0,0,0,5348,5340,1,0,0,0,5348,5344,1,0,0,0,5348,5347,1,0,0,
		0,5349,451,1,0,0,0,5350,5351,3,540,270,0,5351,5352,5,169,0,0,5352,5353,
		3,540,270,0,5353,453,1,0,0,0,5354,5356,5,9,0,0,5355,5357,7,72,0,0,5356,
		5355,1,0,0,0,5356,5357,1,0,0,0,5357,5358,1,0,0,0,5358,5359,7,56,0,0,5359,
		5377,3,592,296,0,5360,5361,5,178,0,0,5361,5362,5,73,0,0,5362,5363,5,114,
		0,0,5363,5368,3,536,268,0,5364,5365,5,1122,0,0,5365,5367,3,536,268,0,5366,
		5364,1,0,0,0,5367,5370,1,0,0,0,5368,5366,1,0,0,0,5368,5369,1,0,0,0,5369,
		5375,1,0,0,0,5370,5368,1,0,0,0,5371,5372,5,186,0,0,5372,5373,3,564,282,
		0,5373,5374,5,17,0,0,5374,5376,1,0,0,0,5375,5371,1,0,0,0,5375,5376,1,0,
		0,0,5376,5378,1,0,0,0,5377,5360,1,0,0,0,5377,5378,1,0,0,0,5378,5390,1,
		0,0,0,5379,5380,5,49,0,0,5380,5381,5,73,0,0,5381,5382,5,114,0,0,5382,5387,
		3,536,268,0,5383,5384,5,1122,0,0,5384,5386,3,536,268,0,5385,5383,1,0,0,
		0,5386,5389,1,0,0,0,5387,5385,1,0,0,0,5387,5388,1,0,0,0,5388,5391,1,0,
		0,0,5389,5387,1,0,0,0,5390,5379,1,0,0,0,5390,5391,1,0,0,0,5391,455,1,0,
		0,0,5392,5393,5,25,0,0,5393,5394,5,166,0,0,5394,5398,3,592,296,0,5395,
		5397,3,464,232,0,5396,5395,1,0,0,0,5397,5400,1,0,0,0,5398,5396,1,0,0,0,
		5398,5399,1,0,0,0,5399,457,1,0,0,0,5400,5398,1,0,0,0,5401,5402,5,347,0,
		0,5402,5403,5,166,0,0,5403,5405,3,592,296,0,5404,5406,7,73,0,0,5405,5404,
		1,0,0,0,5405,5406,1,0,0,0,5406,459,1,0,0,0,5407,5409,5,115,0,0,5408,5410,
		7,72,0,0,5409,5408,1,0,0,0,5409,5410,1,0,0,0,5410,5411,1,0,0,0,5411,5412,
		7,56,0,0,5412,5414,3,592,296,0,5413,5415,3,616,308,0,5414,5413,1,0,0,0,
		5414,5415,1,0,0,0,5415,461,1,0,0,0,5416,5418,5,564,0,0,5417,5419,7,72,
		0,0,5418,5417,1,0,0,0,5418,5419,1,0,0,0,5419,5420,1,0,0,0,5420,5421,5,
		166,0,0,5421,5423,3,592,296,0,5422,5424,5,552,0,0,5423,5422,1,0,0,0,5423,
		5424,1,0,0,0,5424,5426,1,0,0,0,5425,5427,5,411,0,0,5426,5425,1,0,0,0,5426,
		5427,1,0,0,0,5427,5429,1,0,0,0,5428,5430,5,649,0,0,5429,5428,1,0,0,0,5429,
		5430,1,0,0,0,5430,463,1,0,0,0,5431,5432,5,62,0,0,5432,5439,5,647,0,0,5433,
		5439,5,552,0,0,5434,5439,5,413,0,0,5435,5439,5,491,0,0,5436,5439,5,411,
		0,0,5437,5439,5,345,0,0,5438,5431,1,0,0,0,5438,5433,1,0,0,0,5438,5434,
		1,0,0,0,5438,5435,1,0,0,0,5438,5436,1,0,0,0,5438,5437,1,0,0,0,5439,465,
		1,0,0,0,5440,5442,5,32,0,0,5441,5443,5,326,0,0,5442,5441,1,0,0,0,5442,
		5443,1,0,0,0,5443,5444,1,0,0,0,5444,5445,5,425,0,0,5445,5446,3,558,279,
		0,5446,5447,5,578,0,0,5447,5448,7,74,0,0,5448,5449,5,602,0,0,5449,5450,
		5,1135,0,0,5450,467,1,0,0,0,5451,5452,5,443,0,0,5452,5453,5,538,0,0,5453,
		5454,3,558,279,0,5454,5455,5,602,0,0,5455,5456,5,1135,0,0,5456,469,1,0,
		0,0,5457,5458,5,644,0,0,5458,5459,5,538,0,0,5459,5460,3,558,279,0,5460,
		471,1,0,0,0,5461,5462,5,149,0,0,5462,5463,3,476,238,0,5463,5466,7,75,0,
		0,5464,5467,3,660,330,0,5465,5467,5,114,0,0,5466,5464,1,0,0,0,5466,5465,
		1,0,0,0,5467,5477,1,0,0,0,5468,5469,5,1122,0,0,5469,5470,3,476,238,0,5470,
		5473,7,75,0,0,5471,5474,3,660,330,0,5472,5474,5,114,0,0,5473,5471,1,0,
		0,0,5473,5472,1,0,0,0,5474,5476,1,0,0,0,5475,5468,1,0,0,0,5476,5479,1,
		0,0,0,5477,5475,1,0,0,0,5477,5478,1,0,0,0,5478,5514,1,0,0,0,5479,5477,
		1,0,0,0,5480,5481,5,149,0,0,5481,5484,3,64,32,0,5482,5485,3,544,272,0,
		5483,5485,5,40,0,0,5484,5482,1,0,0,0,5484,5483,1,0,0,0,5485,5514,1,0,0,
		0,5486,5487,5,149,0,0,5487,5494,5,504,0,0,5488,5491,3,544,272,0,5489,5490,
		5,26,0,0,5490,5492,3,546,273,0,5491,5489,1,0,0,0,5491,5492,1,0,0,0,5492,
		5495,1,0,0,0,5493,5495,5,40,0,0,5494,5488,1,0,0,0,5494,5493,1,0,0,0,5495,
		5514,1,0,0,0,5496,5514,3,432,216,0,5497,5514,3,306,153,0,5498,5514,3,304,
		152,0,5499,5500,5,149,0,0,5500,5501,3,530,265,0,5501,5502,7,75,0,0,5502,
		5510,3,660,330,0,5503,5504,5,1122,0,0,5504,5505,3,530,265,0,5505,5506,
		7,75,0,0,5506,5507,3,660,330,0,5507,5509,1,0,0,0,5508,5503,1,0,0,0,5509,
		5512,1,0,0,0,5510,5508,1,0,0,0,5510,5511,1,0,0,0,5511,5514,1,0,0,0,5512,
		5510,1,0,0,0,5513,5461,1,0,0,0,5513,5480,1,0,0,0,5513,5486,1,0,0,0,5513,
		5496,1,0,0,0,5513,5497,1,0,0,0,5513,5498,1,0,0,0,5513,5499,1,0,0,0,5514,
		473,1,0,0,0,5515,5516,5,151,0,0,5516,5517,7,58,0,0,5517,5669,5,463,0,0,
		5518,5519,5,151,0,0,5519,5520,7,76,0,0,5520,5523,5,405,0,0,5521,5522,5,
		77,0,0,5522,5524,5,1135,0,0,5523,5521,1,0,0,0,5523,5524,1,0,0,0,5524,5527,
		1,0,0,0,5525,5526,5,65,0,0,5526,5528,3,564,282,0,5527,5525,1,0,0,0,5527,
		5528,1,0,0,0,5528,5536,1,0,0,0,5529,5533,5,95,0,0,5530,5531,3,564,282,
		0,5531,5532,5,1122,0,0,5532,5534,1,0,0,0,5533,5530,1,0,0,0,5533,5534,1,
		0,0,0,5534,5535,1,0,0,0,5535,5537,3,564,282,0,5536,5529,1,0,0,0,5536,5537,
		1,0,0,0,5537,5669,1,0,0,0,5538,5539,5,151,0,0,5539,5541,3,478,239,0,5540,
		5542,3,480,240,0,5541,5540,1,0,0,0,5541,5542,1,0,0,0,5542,5669,1,0,0,0,
		5543,5545,5,151,0,0,5544,5546,5,424,0,0,5545,5544,1,0,0,0,5545,5546,1,
		0,0,0,5546,5547,1,0,0,0,5547,5548,7,43,0,0,5548,5549,7,77,0,0,5549,5552,
		3,532,266,0,5550,5551,7,77,0,0,5551,5553,3,558,279,0,5552,5550,1,0,0,0,
		5552,5553,1,0,0,0,5553,5555,1,0,0,0,5554,5556,3,480,240,0,5555,5554,1,
		0,0,0,5555,5556,1,0,0,0,5556,5669,1,0,0,0,5557,5558,5,151,0,0,5558,5559,
		5,32,0,0,5559,5561,7,0,0,0,5560,5562,3,614,307,0,5561,5560,1,0,0,0,5561,
		5562,1,0,0,0,5562,5563,1,0,0,0,5563,5669,3,558,279,0,5564,5565,5,151,0,
		0,5565,5566,5,32,0,0,5566,5567,7,78,0,0,5567,5669,3,530,265,0,5568,5569,
		5,151,0,0,5569,5570,5,32,0,0,5570,5571,5,648,0,0,5571,5669,3,540,270,0,
		5572,5573,5,151,0,0,5573,5574,5,398,0,0,5574,5575,3,548,274,0,5575,5576,
		7,79,0,0,5576,5669,1,0,0,0,5577,5578,5,151,0,0,5578,5669,3,482,241,0,5579,
		5580,5,151,0,0,5580,5588,7,80,0,0,5581,5585,5,95,0,0,5582,5583,3,564,282,
		0,5583,5584,5,1122,0,0,5584,5586,1,0,0,0,5585,5582,1,0,0,0,5585,5586,1,
		0,0,0,5586,5587,1,0,0,0,5587,5589,3,564,282,0,5588,5581,1,0,0,0,5588,5589,
		1,0,0,0,5589,5669,1,0,0,0,5590,5591,5,151,0,0,5591,5592,5,281,0,0,5592,
		5593,5,1120,0,0,5593,5594,5,1104,0,0,5594,5595,5,1121,0,0,5595,5669,7,
		80,0,0,5596,5597,5,151,0,0,5597,5600,3,484,242,0,5598,5599,7,77,0,0,5599,
		5601,3,558,279,0,5600,5598,1,0,0,0,5600,5601,1,0,0,0,5601,5603,1,0,0,0,
		5602,5604,3,480,240,0,5603,5602,1,0,0,0,5603,5604,1,0,0,0,5604,5669,1,
		0,0,0,5605,5606,5,151,0,0,5606,5607,7,81,0,0,5607,5608,5,355,0,0,5608,
		5669,3,530,265,0,5609,5610,5,151,0,0,5610,5613,5,428,0,0,5611,5612,5,62,
		0,0,5612,5614,3,540,270,0,5613,5611,1,0,0,0,5613,5614,1,0,0,0,5614,5669,
		1,0,0,0,5615,5616,5,151,0,0,5616,5617,7,82,0,0,5617,5618,7,77,0,0,5618,
		5621,3,532,266,0,5619,5620,7,77,0,0,5620,5622,3,558,279,0,5621,5619,1,
		0,0,0,5621,5622,1,0,0,0,5622,5625,1,0,0,0,5623,5624,5,184,0,0,5624,5626,
		3,660,330,0,5625,5623,1,0,0,0,5625,5626,1,0,0,0,5626,5669,1,0,0,0,5627,
		5628,5,151,0,0,5628,5629,5,526,0,0,5629,5632,5,680,0,0,5630,5631,7,77,
		0,0,5631,5633,3,558,279,0,5632,5630,1,0,0,0,5632,5633,1,0,0,0,5633,5635,
		1,0,0,0,5634,5636,3,480,240,0,5635,5634,1,0,0,0,5635,5636,1,0,0,0,5636,
		5669,1,0,0,0,5637,5638,5,151,0,0,5638,5639,5,548,0,0,5639,5644,3,486,243,
		0,5640,5641,5,1122,0,0,5641,5643,3,486,243,0,5642,5640,1,0,0,0,5643,5646,
		1,0,0,0,5644,5642,1,0,0,0,5644,5645,1,0,0,0,5645,5650,1,0,0,0,5646,5644,
		1,0,0,0,5647,5648,5,62,0,0,5648,5649,5,551,0,0,5649,5651,3,564,282,0,5650,
		5647,1,0,0,0,5650,5651,1,0,0,0,5651,5652,1,0,0,0,5652,5656,5,95,0,0,5653,
		5654,3,564,282,0,5654,5655,5,1122,0,0,5655,5657,1,0,0,0,5656,5653,1,0,
		0,0,5656,5657,1,0,0,0,5657,5658,1,0,0,0,5658,5659,3,564,282,0,5659,5669,
		1,0,0,0,5660,5661,5,151,0,0,5661,5662,5,597,0,0,5662,5666,5,617,0,0,5663,
		5664,5,62,0,0,5664,5665,5,346,0,0,5665,5667,5,1135,0,0,5666,5663,1,0,0,
		0,5666,5667,1,0,0,0,5667,5669,1,0,0,0,5668,5515,1,0,0,0,5668,5518,1,0,
		0,0,5668,5538,1,0,0,0,5668,5543,1,0,0,0,5668,5557,1,0,0,0,5668,5564,1,
		0,0,0,5668,5568,1,0,0,0,5668,5572,1,0,0,0,5668,5577,1,0,0,0,5668,5579,
		1,0,0,0,5668,5590,1,0,0,0,5668,5596,1,0,0,0,5668,5605,1,0,0,0,5668,5609,
		1,0,0,0,5668,5615,1,0,0,0,5668,5627,1,0,0,0,5668,5637,1,0,0,0,5668,5660,
		1,0,0,0,5669,475,1,0,0,0,5670,5681,5,1148,0,0,5671,5681,5,1149,0,0,5672,
		5673,5,1124,0,0,5673,5675,5,1124,0,0,5674,5672,1,0,0,0,5674,5675,1,0,0,
		0,5675,5676,1,0,0,0,5676,5678,7,83,0,0,5677,5674,1,0,0,0,5677,5678,1,0,
		0,0,5678,5679,1,0,0,0,5679,5681,3,558,279,0,5680,5670,1,0,0,0,5680,5671,
		1,0,0,0,5680,5677,1,0,0,0,5681,477,1,0,0,0,5682,5683,5,24,0,0,5683,5696,
		5,149,0,0,5684,5696,5,821,0,0,5685,5696,5,38,0,0,5686,5696,5,147,0,0,5687,
		5688,5,425,0,0,5688,5696,5,617,0,0,5689,5690,5,127,0,0,5690,5696,5,617,
		0,0,5691,5693,7,57,0,0,5692,5691,1,0,0,0,5692,5693,1,0,0,0,5693,5694,1,
		0,0,0,5694,5696,7,84,0,0,5695,5682,1,0,0,0,5695,5684,1,0,0,0,5695,5685,
		1,0,0,0,5695,5686,1,0,0,0,5695,5687,1,0,0,0,5695,5689,1,0,0,0,5695,5692,
		1,0,0,0,5696,479,1,0,0,0,5697,5698,5,94,0,0,5698,5702,5,1135,0,0,5699,
		5700,5,184,0,0,5700,5702,3,660,330,0,5701,5697,1,0,0,0,5701,5699,1,0,0,
		0,5702,481,1,0,0,0,5703,5705,5,619,0,0,5704,5703,1,0,0,0,5704,5705,1,0,
		0,0,5705,5706,1,0,0,0,5706,5721,5,399,0,0,5707,5708,5,464,0,0,5708,5721,
		5,617,0,0,5709,5721,5,540,0,0,5710,5721,5,688,0,0,5711,5713,5,424,0,0,
		5712,5711,1,0,0,0,5712,5713,1,0,0,0,5713,5714,1,0,0,0,5714,5721,5,547,
		0,0,5715,5721,5,549,0,0,5716,5717,5,597,0,0,5717,5721,5,434,0,0,5718,5721,
		5,330,0,0,5719,5721,5,374,0,0,5720,5704,1,0,0,0,5720,5707,1,0,0,0,5720,
		5709,1,0,0,0,5720,5710,1,0,0,0,5720,5712,1,0,0,0,5720,5715,1,0,0,0,5720,
		5716,1,0,0,0,5720,5718,1,0,0,0,5720,5719,1,0,0,0,5721,483,1,0,0,0,5722,
		5731,5,405,0,0,5723,5724,5,166,0,0,5724,5731,5,617,0,0,5725,5727,5,424,
		0,0,5726,5725,1,0,0,0,5726,5727,1,0,0,0,5727,5728,1,0,0,0,5728,5731,5,
		680,0,0,5729,5731,5,638,0,0,5730,5722,1,0,0,0,5730,5723,1,0,0,0,5730,5726,
		1,0,0,0,5730,5729,1,0,0,0,5731,485,1,0,0,0,5732,5745,5,6,0,0,5733,5734,
		5,338,0,0,5734,5745,5,448,0,0,5735,5736,5,373,0,0,5736,5745,5,628,0,0,
		5737,5745,5,376,0,0,5738,5745,5,450,0,0,5739,5745,5,769,0,0,5740,5741,
		5,531,0,0,5741,5745,5,414,0,0,5742,5745,5,604,0,0,5743,5745,5,627,0,0,
		5744,5732,1,0,0,0,5744,5733,1,0,0,0,5744,5735,1,0,0,0,5744,5737,1,0,0,
		0,5744,5738,1,0,0,0,5744,5739,1,0,0,0,5744,5740,1,0,0,0,5744,5742,1,0,
		0,0,5744,5743,1,0,0,0,5745,487,1,0,0,0,5746,5747,5,336,0,0,5747,5748,5,
		1135,0,0,5748,489,1,0,0,0,5749,5750,5,342,0,0,5750,5751,5,78,0,0,5751,
		5756,3,502,251,0,5752,5753,5,1122,0,0,5753,5755,3,502,251,0,5754,5752,
		1,0,0,0,5755,5758,1,0,0,0,5756,5754,1,0,0,0,5756,5757,1,0,0,0,5757,5766,
		1,0,0,0,5758,5756,1,0,0,0,5759,5760,5,125,0,0,5760,5763,5,1120,0,0,5761,
		5764,3,590,295,0,5762,5764,5,6,0,0,5763,5761,1,0,0,0,5763,5762,1,0,0,0,
		5764,5765,1,0,0,0,5765,5767,5,1121,0,0,5766,5759,1,0,0,0,5766,5767,1,0,
		0,0,5767,5768,1,0,0,0,5768,5769,5,77,0,0,5769,5770,3,558,279,0,5770,491,
		1,0,0,0,5771,5773,5,420,0,0,5772,5774,7,72,0,0,5773,5772,1,0,0,0,5773,
		5774,1,0,0,0,5774,5775,1,0,0,0,5775,5780,3,504,252,0,5776,5777,5,1122,
		0,0,5777,5779,3,504,252,0,5778,5776,1,0,0,0,5779,5782,1,0,0,0,5780,5778,
		1,0,0,0,5780,5781,1,0,0,0,5781,493,1,0,0,0,5782,5780,1,0,0,0,5783,5785,
		5,90,0,0,5784,5786,7,85,0,0,5785,5784,1,0,0,0,5785,5786,1,0,0,0,5786,5793,
		1,0,0,0,5787,5789,3,564,282,0,5788,5787,1,0,0,0,5789,5790,1,0,0,0,5790,
		5788,1,0,0,0,5790,5791,1,0,0,0,5791,5794,1,0,0,0,5792,5794,3,542,271,0,
		5793,5788,1,0,0,0,5793,5792,1,0,0,0,5794,495,1,0,0,0,5795,5796,5,98,0,
		0,5796,5797,5,78,0,0,5797,5798,5,84,0,0,5798,5799,5,342,0,0,5799,5804,
		3,508,254,0,5800,5801,5,1122,0,0,5801,5803,3,508,254,0,5802,5800,1,0,0,
		0,5803,5806,1,0,0,0,5804,5802,1,0,0,0,5804,5805,1,0,0,0,5805,497,1,0,0,
		0,5806,5804,1,0,0,0,5807,5808,5,573,0,0,5808,5809,5,551,0,0,5809,5810,
		5,342,0,0,5810,499,1,0,0,0,5811,5812,5,686,0,0,5812,501,1,0,0,0,5813,5821,
		3,532,266,0,5814,5816,7,22,0,0,5815,5814,1,0,0,0,5815,5816,1,0,0,0,5816,
		5817,1,0,0,0,5817,5818,5,1120,0,0,5818,5819,3,590,295,0,5819,5820,5,1121,
		0,0,5820,5822,1,0,0,0,5821,5815,1,0,0,0,5821,5822,1,0,0,0,5822,503,1,0,
		0,0,5823,5842,5,385,0,0,5824,5842,5,434,0,0,5825,5827,7,86,0,0,5826,5825,
		1,0,0,0,5826,5827,1,0,0,0,5827,5828,1,0,0,0,5828,5842,5,463,0,0,5829,5842,
		5,527,0,0,5830,5842,5,688,0,0,5831,5832,5,551,0,0,5832,5842,5,342,0,0,
		5833,5842,5,617,0,0,5834,5842,5,650,0,0,5835,5839,5,680,0,0,5836,5837,
		5,186,0,0,5837,5838,5,130,0,0,5838,5840,5,99,0,0,5839,5836,1,0,0,0,5839,
		5840,1,0,0,0,5840,5842,1,0,0,0,5841,5823,1,0,0,0,5841,5824,1,0,0,0,5841,
		5826,1,0,0,0,5841,5829,1,0,0,0,5841,5830,1,0,0,0,5841,5831,1,0,0,0,5841,
		5833,1,0,0,0,5841,5834,1,0,0,0,5841,5835,1,0,0,0,5842,5856,1,0,0,0,5843,
		5844,5,558,0,0,5844,5846,5,463,0,0,5845,5847,3,344,172,0,5846,5845,1,0,
		0,0,5846,5847,1,0,0,0,5847,5856,1,0,0,0,5848,5850,7,56,0,0,5849,5851,3,
		592,296,0,5850,5849,1,0,0,0,5850,5851,1,0,0,0,5851,5853,1,0,0,0,5852,5854,
		3,506,253,0,5853,5852,1,0,0,0,5853,5854,1,0,0,0,5854,5856,1,0,0,0,5855,
		5841,1,0,0,0,5855,5843,1,0,0,0,5855,5848,1,0,0,0,5856,505,1,0,0,0,5857,
		5858,5,186,0,0,5858,5859,5,130,0,0,5859,5863,5,99,0,0,5860,5861,5,62,0,
		0,5861,5863,5,410,0,0,5862,5857,1,0,0,0,5862,5860,1,0,0,0,5863,507,1,0,
		0,0,5864,5872,3,532,266,0,5865,5866,5,125,0,0,5866,5869,5,1120,0,0,5867,
		5870,3,590,295,0,5868,5870,5,6,0,0,5869,5867,1,0,0,0,5869,5868,1,0,0,0,
		5870,5871,1,0,0,0,5871,5873,5,1121,0,0,5872,5865,1,0,0,0,5872,5873,1,0,
		0,0,5873,5881,1,0,0,0,5874,5876,7,22,0,0,5875,5874,1,0,0,0,5875,5876,1,
		0,0,0,5876,5877,1,0,0,0,5877,5878,5,1120,0,0,5878,5879,3,590,295,0,5879,
		5880,5,1121,0,0,5880,5882,1,0,0,0,5881,5875,1,0,0,0,5881,5882,1,0,0,0,
		5882,5885,1,0,0,0,5883,5884,5,75,0,0,5884,5886,5,457,0,0,5885,5883,1,0,
		0,0,5885,5886,1,0,0,0,5886,509,1,0,0,0,5887,5888,7,87,0,0,5888,5891,3,
		532,266,0,5889,5892,3,558,279,0,5890,5892,5,1135,0,0,5891,5889,1,0,0,0,
		5891,5890,1,0,0,0,5891,5892,1,0,0,0,5892,511,1,0,0,0,5893,5897,7,87,0,
		0,5894,5895,7,88,0,0,5895,5896,5,1111,0,0,5896,5898,7,89,0,0,5897,5894,
		1,0,0,0,5897,5898,1,0,0,0,5898,5899,1,0,0,0,5899,5900,3,528,264,0,5900,
		513,1,0,0,0,5901,5902,5,432,0,0,5902,5903,5,1135,0,0,5903,515,1,0,0,0,
		5904,5905,5,180,0,0,5905,5906,3,558,279,0,5906,517,1,0,0,0,5907,5915,5,
		152,0,0,5908,5910,5,157,0,0,5909,5911,5,652,0,0,5910,5909,1,0,0,0,5910,
		5911,1,0,0,0,5911,5912,1,0,0,0,5912,5916,3,568,284,0,5913,5916,5,1143,
		0,0,5914,5916,5,1144,0,0,5915,5908,1,0,0,0,5915,5913,1,0,0,0,5915,5914,
		1,0,0,0,5916,5926,1,0,0,0,5917,5918,5,149,0,0,5918,5923,3,522,261,0,5919,
		5920,5,1122,0,0,5920,5922,3,522,261,0,5921,5919,1,0,0,0,5922,5925,1,0,
		0,0,5923,5921,1,0,0,0,5923,5924,1,0,0,0,5924,5927,1,0,0,0,5925,5923,1,
		0,0,0,5926,5917,1,0,0,0,5926,5927,1,0,0,0,5927,519,1,0,0,0,5928,5936,5,
		139,0,0,5929,5931,5,157,0,0,5930,5932,5,652,0,0,5931,5930,1,0,0,0,5931,
		5932,1,0,0,0,5932,5933,1,0,0,0,5933,5937,3,568,284,0,5934,5937,5,1143,
		0,0,5935,5937,5,1144,0,0,5936,5929,1,0,0,0,5936,5934,1,0,0,0,5936,5935,
		1,0,0,0,5936,5937,1,0,0,0,5937,5947,1,0,0,0,5938,5939,5,149,0,0,5939,5944,
		3,522,261,0,5940,5941,5,1122,0,0,5941,5943,3,522,261,0,5942,5940,1,0,0,
		0,5943,5946,1,0,0,0,5944,5942,1,0,0,0,5944,5945,1,0,0,0,5945,5948,1,0,
		0,0,5946,5944,1,0,0,0,5947,5938,1,0,0,0,5947,5948,1,0,0,0,5948,521,1,0,
		0,0,5949,5950,7,90,0,0,5950,5955,5,1111,0,0,5951,5956,3,568,284,0,5952,
		5956,5,1136,0,0,5953,5956,3,542,271,0,5954,5956,3,560,280,0,5955,5951,
		1,0,0,0,5955,5952,1,0,0,0,5955,5953,1,0,0,0,5955,5954,1,0,0,0,5956,523,
		1,0,0,0,5957,5959,5,68,0,0,5958,5960,7,91,0,0,5959,5958,1,0,0,0,5959,5960,
		1,0,0,0,5960,5961,1,0,0,0,5961,5993,5,46,0,0,5962,5963,3,476,238,0,5963,
		5964,5,1111,0,0,5964,5972,7,92,0,0,5965,5966,5,1122,0,0,5966,5967,3,476,
		238,0,5967,5968,5,1111,0,0,5968,5969,7,92,0,0,5969,5971,1,0,0,0,5970,5965,
		1,0,0,0,5971,5974,1,0,0,0,5972,5970,1,0,0,0,5972,5973,1,0,0,0,5973,5994,
		1,0,0,0,5974,5972,1,0,0,0,5975,5978,5,28,0,0,5976,5979,3,564,282,0,5977,
		5979,3,476,238,0,5978,5976,1,0,0,0,5978,5977,1,0,0,0,5979,5980,1,0,0,0,
		5980,5981,3,476,238,0,5981,5982,5,1111,0,0,5982,5990,3,526,263,0,5983,
		5984,5,1122,0,0,5984,5985,3,476,238,0,5985,5986,5,1111,0,0,5986,5987,3,
		526,263,0,5987,5989,1,0,0,0,5988,5983,1,0,0,0,5989,5992,1,0,0,0,5990,5988,
		1,0,0,0,5990,5991,1,0,0,0,5991,5994,1,0,0,0,5992,5990,1,0,0,0,5993,5962,
		1,0,0,0,5993,5975,1,0,0,0,5994,525,1,0,0,0,5995,5996,7,93,0,0,5996,527,
		1,0,0,0,5997,6003,3,204,102,0,5998,6003,3,190,95,0,5999,6003,3,196,98,
		0,6000,6003,3,202,101,0,6001,6003,3,206,103,0,6002,5997,1,0,0,0,6002,5998,
		1,0,0,0,6002,5999,1,0,0,0,6002,6000,1,0,0,0,6002,6001,1,0,0,0,6003,6008,
		1,0,0,0,6004,6005,5,62,0,0,6005,6006,5,367,0,0,6006,6008,3,558,279,0,6007,
		6002,1,0,0,0,6007,6004,1,0,0,0,6008,529,1,0,0,0,6009,6013,3,558,279,0,
		6010,6014,5,1142,0,0,6011,6012,5,1119,0,0,6012,6014,3,558,279,0,6013,6010,
		1,0,0,0,6013,6011,1,0,0,0,6013,6014,1,0,0,0,6014,531,1,0,0,0,6015,6016,
		3,530,265,0,6016,533,1,0,0,0,6017,6020,3,540,270,0,6018,6020,3,558,279,
		0,6019,6017,1,0,0,0,6019,6018,1,0,0,0,6020,535,1,0,0,0,6021,6026,3,558,
		279,0,6022,6024,3,562,281,0,6023,6025,3,562,281,0,6024,6023,1,0,0,0,6024,
		6025,1,0,0,0,6025,6027,1,0,0,0,6026,6022,1,0,0,0,6026,6027,1,0,0,0,6027,
		6034,1,0,0,0,6028,6029,9,0,0,0,6029,6031,3,562,281,0,6030,6032,3,562,281,
		0,6031,6030,1,0,0,0,6031,6032,1,0,0,0,6032,6034,1,0,0,0,6033,6021,1,0,
		0,0,6033,6028,1,0,0,0,6034,537,1,0,0,0,6035,6038,3,558,279,0,6036,6038,
		5,1135,0,0,6037,6035,1,0,0,0,6037,6036,1,0,0,0,6038,6043,1,0,0,0,6039,
		6040,5,1120,0,0,6040,6041,3,564,282,0,6041,6042,5,1121,0,0,6042,6044,1,
		0,0,0,6043,6039,1,0,0,0,6043,6044,1,0,0,0,6044,6047,1,0,0,0,6045,6047,
		3,660,330,0,6046,6037,1,0,0,0,6046,6045,1,0,0,0,6047,6049,1,0,0,0,6048,
		6050,7,50,0,0,6049,6048,1,0,0,0,6049,6050,1,0,0,0,6050,539,1,0,0,0,6051,
		6058,5,1145,0,0,6052,6058,5,1147,0,0,6053,6058,5,1143,0,0,6054,6058,5,
		1135,0,0,6055,6058,5,703,0,0,6056,6058,3,688,344,0,6057,6051,1,0,0,0,6057,
		6052,1,0,0,0,6057,6053,1,0,0,0,6057,6054,1,0,0,0,6057,6055,1,0,0,0,6057,
		6056,1,0,0,0,6058,541,1,0,0,0,6059,6060,7,94,0,0,6060,543,1,0,0,0,6061,
		6066,5,220,0,0,6062,6066,3,678,339,0,6063,6066,5,1135,0,0,6064,6066,5,
		1132,0,0,6065,6061,1,0,0,0,6065,6062,1,0,0,0,6065,6063,1,0,0,0,6065,6064,
		1,0,0,0,6066,545,1,0,0,0,6067,6070,3,558,279,0,6068,6070,5,1135,0,0,6069,
		6067,1,0,0,0,6069,6068,1,0,0,0,6070,547,1,0,0,0,6071,6072,7,95,0,0,6072,
		549,1,0,0,0,6073,6074,3,564,282,0,6074,6075,5,1108,0,0,6075,6076,3,564,
		282,0,6076,6077,5,1108,0,0,6077,6078,3,564,282,0,6078,6079,5,1108,0,0,
		6079,6080,3,564,282,0,6080,6081,5,1108,0,0,6081,6087,3,564,282,0,6082,
		6083,5,1131,0,0,6083,6084,3,564,282,0,6084,6085,5,1108,0,0,6085,6086,3,
		564,282,0,6086,6088,1,0,0,0,6087,6082,1,0,0,0,6088,6089,1,0,0,0,6089,6087,
		1,0,0,0,6089,6090,1,0,0,0,6090,551,1,0,0,0,6091,6098,3,554,277,0,6092,
		6093,5,1122,0,0,6093,6096,3,554,277,0,6094,6095,5,1122,0,0,6095,6097,3,
		564,282,0,6096,6094,1,0,0,0,6096,6097,1,0,0,0,6097,6099,1,0,0,0,6098,6092,
		1,0,0,0,6098,6099,1,0,0,0,6099,553,1,0,0,0,6100,6108,5,1135,0,0,6101,6108,
		5,1140,0,0,6102,6104,5,1137,0,0,6103,6102,1,0,0,0,6104,6105,1,0,0,0,6105,
		6103,1,0,0,0,6105,6106,1,0,0,0,6106,6108,1,0,0,0,6107,6100,1,0,0,0,6107,
		6101,1,0,0,0,6107,6103,1,0,0,0,6108,555,1,0,0,0,6109,6112,3,558,279,0,
		6110,6112,5,1135,0,0,6111,6109,1,0,0,0,6111,6110,1,0,0,0,6112,557,1,0,
		0,0,6113,6117,3,560,280,0,6114,6117,5,1144,0,0,6115,6117,5,1132,0,0,6116,
		6113,1,0,0,0,6116,6114,1,0,0,0,6116,6115,1,0,0,0,6117,559,1,0,0,0,6118,
		6128,5,1143,0,0,6119,6128,3,678,339,0,6120,6128,3,680,340,0,6121,6128,
		3,548,274,0,6122,6128,3,682,341,0,6123,6128,3,684,342,0,6124,6128,3,686,
		343,0,6125,6128,3,688,344,0,6126,6128,3,690,345,0,6127,6118,1,0,0,0,6127,
		6119,1,0,0,0,6127,6120,1,0,0,0,6127,6121,1,0,0,0,6127,6122,1,0,0,0,6127,
		6123,1,0,0,0,6127,6124,1,0,0,0,6127,6125,1,0,0,0,6127,6126,1,0,0,0,6128,
		561,1,0,0,0,6129,6133,5,1142,0,0,6130,6131,5,1119,0,0,6131,6133,3,558,
		279,0,6132,6129,1,0,0,0,6132,6130,1,0,0,0,6133,563,1,0,0,0,6134,6135,7,
		96,0,0,6135,565,1,0,0,0,6136,6139,5,1133,0,0,6137,6139,3,564,282,0,6138,
		6136,1,0,0,0,6138,6137,1,0,0,0,6139,567,1,0,0,0,6140,6142,5,1141,0,0,6141,
		6140,1,0,0,0,6141,6142,1,0,0,0,6142,6143,1,0,0,0,6143,6146,5,1135,0,0,
		6144,6146,5,1134,0,0,6145,6141,1,0,0,0,6145,6144,1,0,0,0,6146,6148,1,0,
		0,0,6147,6149,5,1135,0,0,6148,6147,1,0,0,0,6149,6150,1,0,0,0,6150,6148,
		1,0,0,0,6150,6151,1,0,0,0,6151,6164,1,0,0,0,6152,6154,5,1141,0,0,6153,
		6152,1,0,0,0,6153,6154,1,0,0,0,6154,6155,1,0,0,0,6155,6158,5,1135,0,0,
		6156,6158,5,1134,0,0,6157,6153,1,0,0,0,6157,6156,1,0,0,0,6158,6161,1,0,
		0,0,6159,6160,5,26,0,0,6160,6162,3,546,273,0,6161,6159,1,0,0,0,6161,6162,
		1,0,0,0,6162,6164,1,0,0,0,6163,6145,1,0,0,0,6163,6157,1,0,0,0,6164,569,
		1,0,0,0,6165,6166,7,97,0,0,6166,571,1,0,0,0,6167,6169,5,1141,0,0,6168,
		6167,1,0,0,0,6168,6169,1,0,0,0,6169,6170,1,0,0,0,6170,6171,5,1137,0,0,
		6171,573,1,0,0,0,6172,6174,5,110,0,0,6173,6172,1,0,0,0,6173,6174,1,0,0,
		0,6174,6175,1,0,0,0,6175,6176,7,98,0,0,6176,575,1,0,0,0,6177,6190,3,568,
		284,0,6178,6190,3,564,282,0,6179,6180,5,1108,0,0,6180,6190,3,564,282,0,
		6181,6190,3,572,286,0,6182,6190,3,570,285,0,6183,6190,5,1138,0,0,6184,
		6190,5,1140,0,0,6185,6187,5,110,0,0,6186,6185,1,0,0,0,6186,6187,1,0,0,
		0,6187,6188,1,0,0,0,6188,6190,7,98,0,0,6189,6177,1,0,0,0,6189,6178,1,0,
		0,0,6189,6179,1,0,0,0,6189,6181,1,0,0,0,6189,6182,1,0,0,0,6189,6183,1,
		0,0,0,6189,6184,1,0,0,0,6189,6186,1,0,0,0,6190,577,1,0,0,0,6191,6193,7,
		99,0,0,6192,6194,5,232,0,0,6193,6192,1,0,0,0,6193,6194,1,0,0,0,6194,6196,
		1,0,0,0,6195,6197,3,584,292,0,6196,6195,1,0,0,0,6196,6197,1,0,0,0,6197,
		6199,1,0,0,0,6198,6200,5,220,0,0,6199,6198,1,0,0,0,6199,6200,1,0,0,0,6200,
		6204,1,0,0,0,6201,6202,3,64,32,0,6202,6203,3,544,272,0,6203,6205,1,0,0,
		0,6204,6201,1,0,0,0,6204,6205,1,0,0,0,6205,6209,1,0,0,0,6206,6207,5,26,
		0,0,6207,6210,3,546,273,0,6208,6210,5,220,0,0,6209,6206,1,0,0,0,6209,6208,
		1,0,0,0,6209,6210,1,0,0,0,6210,6314,1,0,0,0,6211,6212,5,219,0,0,6212,6214,
		7,100,0,0,6213,6215,3,584,292,0,6214,6213,1,0,0,0,6214,6215,1,0,0,0,6215,
		6217,1,0,0,0,6216,6218,5,220,0,0,6217,6216,1,0,0,0,6217,6218,1,0,0,0,6218,
		6314,1,0,0,0,6219,6220,5,505,0,0,6220,6222,5,217,0,0,6221,6223,3,584,292,
		0,6222,6221,1,0,0,0,6222,6223,1,0,0,0,6223,6225,1,0,0,0,6224,6226,5,220,
		0,0,6225,6224,1,0,0,0,6225,6226,1,0,0,0,6226,6314,1,0,0,0,6227,6228,5,
		219,0,0,6228,6229,7,101,0,0,6229,6231,5,232,0,0,6230,6232,3,584,292,0,
		6231,6230,1,0,0,0,6231,6232,1,0,0,0,6232,6234,1,0,0,0,6233,6235,5,220,
		0,0,6234,6233,1,0,0,0,6234,6235,1,0,0,0,6235,6314,1,0,0,0,6236,6238,7,
		102,0,0,6237,6239,3,584,292,0,6238,6237,1,0,0,0,6238,6239,1,0,0,0,6239,
		6243,1,0,0,0,6240,6242,7,103,0,0,6241,6240,1,0,0,0,6242,6245,1,0,0,0,6243,
		6241,1,0,0,0,6243,6244,1,0,0,0,6244,6314,1,0,0,0,6245,6243,1,0,0,0,6246,
		6248,5,202,0,0,6247,6249,3,586,293,0,6248,6247,1,0,0,0,6248,6249,1,0,0,
		0,6249,6253,1,0,0,0,6250,6252,7,103,0,0,6251,6250,1,0,0,0,6252,6255,1,
		0,0,0,6253,6251,1,0,0,0,6253,6254,1,0,0,0,6254,6314,1,0,0,0,6255,6253,
		1,0,0,0,6256,6258,5,203,0,0,6257,6259,5,204,0,0,6258,6257,1,0,0,0,6258,
		6259,1,0,0,0,6259,6261,1,0,0,0,6260,6262,3,586,293,0,6261,6260,1,0,0,0,
		6261,6262,1,0,0,0,6262,6266,1,0,0,0,6263,6265,7,103,0,0,6264,6263,1,0,
		0,0,6265,6268,1,0,0,0,6266,6264,1,0,0,0,6266,6267,1,0,0,0,6267,6314,1,
		0,0,0,6268,6266,1,0,0,0,6269,6271,7,104,0,0,6270,6272,3,588,294,0,6271,
		6270,1,0,0,0,6271,6272,1,0,0,0,6272,6276,1,0,0,0,6273,6275,7,103,0,0,6274,
		6273,1,0,0,0,6275,6278,1,0,0,0,6276,6274,1,0,0,0,6276,6277,1,0,0,0,6277,
		6314,1,0,0,0,6278,6276,1,0,0,0,6279,6314,7,105,0,0,6280,6282,7,106,0,0,
		6281,6283,3,584,292,0,6282,6281,1,0,0,0,6282,6283,1,0,0,0,6283,6314,1,
		0,0,0,6284,6285,7,107,0,0,6285,6287,3,580,290,0,6286,6288,5,220,0,0,6287,
		6286,1,0,0,0,6287,6288,1,0,0,0,6288,6292,1,0,0,0,6289,6290,3,64,32,0,6290,
		6291,3,544,272,0,6291,6293,1,0,0,0,6292,6289,1,0,0,0,6292,6293,1,0,0,0,
		6293,6314,1,0,0,0,6294,6314,7,108,0,0,6295,6297,5,225,0,0,6296,6298,5,
		217,0,0,6297,6296,1,0,0,0,6297,6298,1,0,0,0,6298,6300,1,0,0,0,6299,6301,
		5,220,0,0,6300,6299,1,0,0,0,6300,6301,1,0,0,0,6301,6305,1,0,0,0,6302,6303,
		3,64,32,0,6303,6304,3,544,272,0,6304,6306,1,0,0,0,6305,6302,1,0,0,0,6305,
		6306,1,0,0,0,6306,6309,1,0,0,0,6307,6308,5,26,0,0,6308,6310,3,546,273,
		0,6309,6307,1,0,0,0,6309,6310,1,0,0,0,6310,6314,1,0,0,0,6311,6312,5,225,
		0,0,6312,6314,5,221,0,0,6313,6191,1,0,0,0,6313,6211,1,0,0,0,6313,6219,
		1,0,0,0,6313,6227,1,0,0,0,6313,6236,1,0,0,0,6313,6246,1,0,0,0,6313,6256,
		1,0,0,0,6313,6269,1,0,0,0,6313,6279,1,0,0,0,6313,6280,1,0,0,0,6313,6284,
		1,0,0,0,6313,6294,1,0,0,0,6313,6295,1,0,0,0,6313,6311,1,0,0,0,6314,579,
		1,0,0,0,6315,6316,5,1120,0,0,6316,6321,5,1135,0,0,6317,6318,5,1122,0,0,
		6318,6320,5,1135,0,0,6319,6317,1,0,0,0,6320,6323,1,0,0,0,6321,6319,1,0,
		0,0,6321,6322,1,0,0,0,6322,6324,1,0,0,0,6323,6321,1,0,0,0,6324,6325,5,
		1121,0,0,6325,581,1,0,0,0,6326,6328,7,109,0,0,6327,6329,3,584,292,0,6328,
		6327,1,0,0,0,6328,6329,1,0,0,0,6329,6349,1,0,0,0,6330,6332,5,216,0,0,6331,
		6333,3,584,292,0,6332,6331,1,0,0,0,6332,6333,1,0,0,0,6333,6337,1,0,0,0,
		6334,6335,3,64,32,0,6335,6336,3,544,272,0,6336,6338,1,0,0,0,6337,6334,
		1,0,0,0,6337,6338,1,0,0,0,6338,6349,1,0,0,0,6339,6349,7,110,0,0,6340,6342,
		5,208,0,0,6341,6343,3,588,294,0,6342,6341,1,0,0,0,6342,6343,1,0,0,0,6343,
		6349,1,0,0,0,6344,6346,7,111,0,0,6345,6347,5,200,0,0,6346,6345,1,0,0,0,
		6346,6347,1,0,0,0,6347,6349,1,0,0,0,6348,6326,1,0,0,0,6348,6330,1,0,0,
		0,6348,6339,1,0,0,0,6348,6340,1,0,0,0,6348,6344,1,0,0,0,6349,6351,1,0,
		0,0,6350,6352,5,11,0,0,6351,6350,1,0,0,0,6351,6352,1,0,0,0,6352,583,1,
		0,0,0,6353,6354,5,1120,0,0,6354,6355,3,564,282,0,6355,6356,5,1121,0,0,
		6356,585,1,0,0,0,6357,6358,5,1120,0,0,6358,6359,3,564,282,0,6359,6360,
		5,1122,0,0,6360,6361,3,564,282,0,6361,6362,5,1121,0,0,6362,587,1,0,0,0,
		6363,6364,5,1120,0,0,6364,6367,3,564,282,0,6365,6366,5,1122,0,0,6366,6368,
		3,564,282,0,6367,6365,1,0,0,0,6367,6368,1,0,0,0,6368,6369,1,0,0,0,6369,
		6370,5,1121,0,0,6370,589,1,0,0,0,6371,6376,3,558,279,0,6372,6373,5,1122,
		0,0,6373,6375,3,558,279,0,6374,6372,1,0,0,0,6375,6378,1,0,0,0,6376,6374,
		1,0,0,0,6376,6377,1,0,0,0,6377,591,1,0,0,0,6378,6376,1,0,0,0,6379,6384,
		3,532,266,0,6380,6381,5,1122,0,0,6381,6383,3,532,266,0,6382,6380,1,0,0,
		0,6383,6386,1,0,0,0,6384,6382,1,0,0,0,6384,6385,1,0,0,0,6385,593,1,0,0,
		0,6386,6384,1,0,0,0,6387,6388,5,1120,0,0,6388,6393,3,538,269,0,6389,6390,
		5,1122,0,0,6390,6392,3,538,269,0,6391,6389,1,0,0,0,6392,6395,1,0,0,0,6393,
		6391,1,0,0,0,6393,6394,1,0,0,0,6394,6396,1,0,0,0,6395,6393,1,0,0,0,6396,
		6397,5,1121,0,0,6397,595,1,0,0,0,6398,6403,3,660,330,0,6399,6400,5,1122,
		0,0,6400,6402,3,660,330,0,6401,6399,1,0,0,0,6402,6405,1,0,0,0,6403,6401,
		1,0,0,0,6403,6404,1,0,0,0,6404,597,1,0,0,0,6405,6403,1,0,0,0,6406,6411,
		3,610,305,0,6407,6408,5,1122,0,0,6408,6410,3,610,305,0,6409,6407,1,0,0,
		0,6410,6413,1,0,0,0,6411,6409,1,0,0,0,6411,6412,1,0,0,0,6412,599,1,0,0,
		0,6413,6411,1,0,0,0,6414,6419,3,576,288,0,6415,6416,5,1122,0,0,6416,6418,
		3,576,288,0,6417,6415,1,0,0,0,6418,6421,1,0,0,0,6419,6417,1,0,0,0,6419,
		6420,1,0,0,0,6420,601,1,0,0,0,6421,6419,1,0,0,0,6422,6427,5,1135,0,0,6423,
		6424,5,1122,0,0,6424,6426,5,1135,0,0,6425,6423,1,0,0,0,6426,6429,1,0,0,
		0,6427,6425,1,0,0,0,6427,6428,1,0,0,0,6428,603,1,0,0,0,6429,6427,1,0,0,
		0,6430,6435,5,1148,0,0,6431,6432,5,1122,0,0,6432,6434,5,1148,0,0,6433,
		6431,1,0,0,0,6434,6437,1,0,0,0,6435,6433,1,0,0,0,6435,6436,1,0,0,0,6436,
		605,1,0,0,0,6437,6435,1,0,0,0,6438,6474,5,112,0,0,6439,6440,5,22,0,0,6440,
		6441,5,1120,0,0,6441,6442,3,660,330,0,6442,6443,5,12,0,0,6443,6444,3,582,
		291,0,6444,6445,5,1121,0,0,6445,6474,1,0,0,0,6446,6448,3,666,333,0,6447,
		6446,1,0,0,0,6447,6448,1,0,0,0,6448,6449,1,0,0,0,6449,6474,3,576,288,0,
		6450,6454,3,608,304,0,6451,6452,5,114,0,0,6452,6453,5,178,0,0,6453,6455,
		3,608,304,0,6454,6451,1,0,0,0,6454,6455,1,0,0,0,6455,6474,1,0,0,0,6456,
		6457,5,1120,0,0,6457,6458,3,660,330,0,6458,6459,5,1121,0,0,6459,6474,1,
		0,0,0,6460,6461,7,112,0,0,6461,6462,5,1120,0,0,6462,6463,3,530,265,0,6463,
		6464,5,1121,0,0,6464,6474,1,0,0,0,6465,6466,5,1120,0,0,6466,6467,7,113,
		0,0,6467,6468,5,652,0,0,6468,6469,5,62,0,0,6469,6470,3,530,265,0,6470,
		6471,5,1121,0,0,6471,6474,1,0,0,0,6472,6474,3,660,330,0,6473,6438,1,0,
		0,0,6473,6439,1,0,0,0,6473,6447,1,0,0,0,6473,6450,1,0,0,0,6473,6456,1,
		0,0,0,6473,6460,1,0,0,0,6473,6465,1,0,0,0,6473,6472,1,0,0,0,6474,607,1,
		0,0,0,6475,6481,7,114,0,0,6476,6478,5,1120,0,0,6477,6479,3,564,282,0,6478,
		6477,1,0,0,0,6478,6479,1,0,0,0,6479,6480,1,0,0,0,6480,6482,5,1121,0,0,
		6481,6476,1,0,0,0,6481,6482,1,0,0,0,6482,6490,1,0,0,0,6483,6484,5,314,
		0,0,6484,6486,5,1120,0,0,6485,6487,3,564,282,0,6486,6485,1,0,0,0,6486,
		6487,1,0,0,0,6487,6488,1,0,0,0,6488,6490,5,1121,0,0,6489,6475,1,0,0,0,
		6489,6483,1,0,0,0,6490,609,1,0,0,0,6491,6494,3,660,330,0,6492,6494,5,40,
		0,0,6493,6491,1,0,0,0,6493,6492,1,0,0,0,6494,611,1,0,0,0,6495,6496,5,74,
		0,0,6496,6497,5,57,0,0,6497,613,1,0,0,0,6498,6499,5,74,0,0,6499,6500,5,
		110,0,0,6500,6501,5,57,0,0,6501,615,1,0,0,0,6502,6503,5,657,0,0,6503,6506,
		3,564,282,0,6504,6506,5,514,0,0,6505,6502,1,0,0,0,6505,6504,1,0,0,0,6506,
		617,1,0,0,0,6507,6511,3,616,308,0,6508,6509,5,153,0,0,6509,6511,5,100,
		0,0,6510,6507,1,0,0,0,6510,6508,1,0,0,0,6511,619,1,0,0,0,6512,6531,3,622,
		311,0,6513,6531,3,630,315,0,6514,6531,3,632,316,0,6515,6516,3,652,326,
		0,6516,6518,5,1120,0,0,6517,6519,3,656,328,0,6518,6517,1,0,0,0,6518,6519,
		1,0,0,0,6519,6520,1,0,0,0,6520,6521,5,1121,0,0,6521,6531,1,0,0,0,6522,
		6523,3,530,265,0,6523,6525,5,1120,0,0,6524,6526,3,656,328,0,6525,6524,
		1,0,0,0,6525,6526,1,0,0,0,6526,6527,1,0,0,0,6527,6528,5,1121,0,0,6528,
		6531,1,0,0,0,6529,6531,3,654,327,0,6530,6512,1,0,0,0,6530,6513,1,0,0,0,
		6530,6514,1,0,0,0,6530,6515,1,0,0,0,6530,6522,1,0,0,0,6530,6529,1,0,0,
		0,6531,621,1,0,0,0,6532,6535,7,115,0,0,6533,6534,5,1120,0,0,6534,6536,
		5,1121,0,0,6535,6533,1,0,0,0,6535,6536,1,0,0,0,6536,6725,1,0,0,0,6537,
		6538,5,31,0,0,6538,6539,5,1120,0,0,6539,6540,3,660,330,0,6540,6541,5,1122,
		0,0,6541,6542,3,582,291,0,6542,6543,5,1121,0,0,6543,6725,1,0,0,0,6544,
		6545,5,31,0,0,6545,6546,5,1120,0,0,6546,6547,3,660,330,0,6547,6548,5,181,
		0,0,6548,6549,3,544,272,0,6549,6550,5,1121,0,0,6550,6725,1,0,0,0,6551,
		6552,5,22,0,0,6552,6553,5,1120,0,0,6553,6554,3,660,330,0,6554,6555,5,12,
		0,0,6555,6556,3,582,291,0,6556,6557,5,1121,0,0,6557,6725,1,0,0,0,6558,
		6559,5,182,0,0,6559,6560,5,1120,0,0,6560,6561,3,536,268,0,6561,6562,5,
		1121,0,0,6562,6725,1,0,0,0,6563,6564,5,21,0,0,6564,6566,3,660,330,0,6565,
		6567,3,624,312,0,6566,6565,1,0,0,0,6567,6568,1,0,0,0,6568,6566,1,0,0,0,
		6568,6569,1,0,0,0,6569,6572,1,0,0,0,6570,6571,5,51,0,0,6571,6573,3,658,
		329,0,6572,6570,1,0,0,0,6572,6573,1,0,0,0,6573,6574,1,0,0,0,6574,6575,
		5,396,0,0,6575,6725,1,0,0,0,6576,6578,5,21,0,0,6577,6579,3,624,312,0,6578,
		6577,1,0,0,0,6579,6580,1,0,0,0,6580,6578,1,0,0,0,6580,6581,1,0,0,0,6581,
		6584,1,0,0,0,6582,6583,5,51,0,0,6583,6585,3,658,329,0,6584,6582,1,0,0,
		0,6584,6585,1,0,0,0,6585,6586,1,0,0,0,6586,6587,5,396,0,0,6587,6725,1,
		0,0,0,6588,6589,5,216,0,0,6589,6590,5,1120,0,0,6590,6593,3,656,328,0,6591,
		6592,5,181,0,0,6592,6594,3,544,272,0,6593,6591,1,0,0,0,6593,6594,1,0,0,
		0,6594,6595,1,0,0,0,6595,6596,5,1121,0,0,6596,6725,1,0,0,0,6597,6598,5,
		315,0,0,6598,6601,5,1120,0,0,6599,6602,3,568,284,0,6600,6602,3,660,330,
		0,6601,6599,1,0,0,0,6601,6600,1,0,0,0,6602,6603,1,0,0,0,6603,6606,5,77,
		0,0,6604,6607,3,568,284,0,6605,6607,3,660,330,0,6606,6604,1,0,0,0,6606,
		6605,1,0,0,0,6607,6608,1,0,0,0,6608,6609,5,1121,0,0,6609,6725,1,0,0,0,
		6610,6611,7,116,0,0,6611,6614,5,1120,0,0,6612,6615,3,568,284,0,6613,6615,
		3,660,330,0,6614,6612,1,0,0,0,6614,6613,1,0,0,0,6615,6616,1,0,0,0,6616,
		6619,5,65,0,0,6617,6620,3,564,282,0,6618,6620,3,660,330,0,6619,6617,1,
		0,0,0,6619,6618,1,0,0,0,6620,6626,1,0,0,0,6621,6624,5,62,0,0,6622,6625,
		3,564,282,0,6623,6625,3,660,330,0,6624,6622,1,0,0,0,6624,6623,1,0,0,0,
		6625,6627,1,0,0,0,6626,6621,1,0,0,0,6626,6627,1,0,0,0,6627,6628,1,0,0,
		0,6628,6629,5,1121,0,0,6629,6725,1,0,0,0,6630,6631,5,319,0,0,6631,6632,
		5,1120,0,0,6632,6635,7,117,0,0,6633,6636,3,568,284,0,6634,6636,3,660,330,
		0,6635,6633,1,0,0,0,6635,6634,1,0,0,0,6635,6636,1,0,0,0,6636,6637,1,0,
		0,0,6637,6640,5,65,0,0,6638,6641,3,568,284,0,6639,6641,3,660,330,0,6640,
		6638,1,0,0,0,6640,6639,1,0,0,0,6641,6642,1,0,0,0,6642,6643,5,1121,0,0,
		6643,6725,1,0,0,0,6644,6645,5,319,0,0,6645,6648,5,1120,0,0,6646,6649,3,
		568,284,0,6647,6649,3,660,330,0,6648,6646,1,0,0,0,6648,6647,1,0,0,0,6649,
		6650,1,0,0,0,6650,6653,5,65,0,0,6651,6654,3,568,284,0,6652,6654,3,660,
		330,0,6653,6651,1,0,0,0,6653,6652,1,0,0,0,6654,6655,1,0,0,0,6655,6656,
		5,1121,0,0,6656,6725,1,0,0,0,6657,6658,5,1078,0,0,6658,6661,5,1120,0,0,
		6659,6662,3,568,284,0,6660,6662,3,660,330,0,6661,6659,1,0,0,0,6661,6660,
		1,0,0,0,6662,6669,1,0,0,0,6663,6664,5,12,0,0,6664,6665,7,118,0,0,6665,
		6666,5,1120,0,0,6666,6667,3,564,282,0,6667,6668,5,1121,0,0,6668,6670,1,
		0,0,0,6669,6663,1,0,0,0,6669,6670,1,0,0,0,6670,6672,1,0,0,0,6671,6673,
		3,626,313,0,6672,6671,1,0,0,0,6672,6673,1,0,0,0,6673,6674,1,0,0,0,6674,
		6675,5,1121,0,0,6675,6725,1,0,0,0,6676,6677,5,312,0,0,6677,6678,5,1120,
		0,0,6678,6679,3,74,37,0,6679,6682,5,65,0,0,6680,6683,3,568,284,0,6681,
		6683,3,660,330,0,6682,6680,1,0,0,0,6682,6681,1,0,0,0,6683,6684,1,0,0,0,
		6684,6685,5,1121,0,0,6685,6725,1,0,0,0,6686,6687,5,877,0,0,6687,6688,5,
		1120,0,0,6688,6689,7,119,0,0,6689,6690,5,1122,0,0,6690,6691,3,568,284,
		0,6691,6692,5,1121,0,0,6692,6725,1,0,0,0,6693,6694,5,254,0,0,6694,6695,
		5,1120,0,0,6695,6696,3,660,330,0,6696,6697,5,1122,0,0,6697,6700,3,660,
		330,0,6698,6699,5,577,0,0,6699,6701,3,582,291,0,6700,6698,1,0,0,0,6700,
		6701,1,0,0,0,6701,6710,1,0,0,0,6702,6707,5,112,0,0,6703,6707,5,400,0,0,
		6704,6705,5,40,0,0,6705,6707,3,606,303,0,6706,6702,1,0,0,0,6706,6703,1,
		0,0,0,6706,6704,1,0,0,0,6707,6708,1,0,0,0,6708,6709,5,114,0,0,6709,6711,
		5,53,0,0,6710,6706,1,0,0,0,6710,6711,1,0,0,0,6711,6720,1,0,0,0,6712,6717,
		5,112,0,0,6713,6717,5,400,0,0,6714,6715,5,40,0,0,6715,6717,3,606,303,0,
		6716,6712,1,0,0,0,6716,6713,1,0,0,0,6716,6714,1,0,0,0,6717,6718,1,0,0,
		0,6718,6719,5,114,0,0,6719,6721,5,400,0,0,6720,6716,1,0,0,0,6720,6721,
		1,0,0,0,6721,6722,1,0,0,0,6722,6723,5,1121,0,0,6723,6725,1,0,0,0,6724,
		6532,1,0,0,0,6724,6537,1,0,0,0,6724,6544,1,0,0,0,6724,6551,1,0,0,0,6724,
		6558,1,0,0,0,6724,6563,1,0,0,0,6724,6576,1,0,0,0,6724,6588,1,0,0,0,6724,
		6597,1,0,0,0,6724,6610,1,0,0,0,6724,6630,1,0,0,0,6724,6644,1,0,0,0,6724,
		6657,1,0,0,0,6724,6676,1,0,0,0,6724,6686,1,0,0,0,6724,6693,1,0,0,0,6725,
		623,1,0,0,0,6726,6727,5,183,0,0,6727,6728,3,658,329,0,6728,6729,5,168,
		0,0,6729,6730,3,658,329,0,6730,625,1,0,0,0,6731,6732,5,459,0,0,6732,6737,
		3,628,314,0,6733,6734,5,1122,0,0,6734,6736,3,628,314,0,6735,6733,1,0,0,
		0,6736,6739,1,0,0,0,6737,6735,1,0,0,0,6737,6738,1,0,0,0,6738,6746,1,0,
		0,0,6739,6737,1,0,0,0,6740,6741,5,459,0,0,6741,6742,3,564,282,0,6742,6743,
		5,1108,0,0,6743,6744,3,564,282,0,6744,6746,1,0,0,0,6745,6731,1,0,0,0,6745,
		6740,1,0,0,0,6746,627,1,0,0,0,6747,6749,3,564,282,0,6748,6750,7,120,0,
		0,6749,6748,1,0,0,0,6749,6750,1,0,0,0,6750,629,1,0,0,0,6751,6752,7,121,
		0,0,6752,6754,5,1120,0,0,6753,6755,7,46,0,0,6754,6753,1,0,0,0,6754,6755,
		1,0,0,0,6755,6756,1,0,0,0,6756,6757,3,658,329,0,6757,6759,5,1121,0,0,6758,
		6760,3,634,317,0,6759,6758,1,0,0,0,6759,6760,1,0,0,0,6760,6811,1,0,0,0,
		6761,6762,5,281,0,0,6762,6770,5,1120,0,0,6763,6771,5,1104,0,0,6764,6766,
		5,6,0,0,6765,6764,1,0,0,0,6765,6766,1,0,0,0,6766,6767,1,0,0,0,6767,6771,
		3,658,329,0,6768,6769,5,47,0,0,6769,6771,3,656,328,0,6770,6763,1,0,0,0,
		6770,6765,1,0,0,0,6770,6768,1,0,0,0,6771,6772,1,0,0,0,6772,6774,5,1121,
		0,0,6773,6775,3,634,317,0,6774,6773,1,0,0,0,6774,6775,1,0,0,0,6775,6811,
		1,0,0,0,6776,6777,7,122,0,0,6777,6779,5,1120,0,0,6778,6780,5,6,0,0,6779,
		6778,1,0,0,0,6779,6780,1,0,0,0,6780,6781,1,0,0,0,6781,6782,3,658,329,0,
		6782,6784,5,1121,0,0,6783,6785,3,634,317,0,6784,6783,1,0,0,0,6784,6785,
		1,0,0,0,6785,6811,1,0,0,0,6786,6787,5,285,0,0,6787,6789,5,1120,0,0,6788,
		6790,5,47,0,0,6789,6788,1,0,0,0,6789,6790,1,0,0,0,6790,6791,1,0,0,0,6791,
		6802,3,656,328,0,6792,6793,5,120,0,0,6793,6794,5,18,0,0,6794,6799,3,234,
		117,0,6795,6796,5,1122,0,0,6796,6798,3,234,117,0,6797,6795,1,0,0,0,6798,
		6801,1,0,0,0,6799,6797,1,0,0,0,6799,6800,1,0,0,0,6800,6803,1,0,0,0,6801,
		6799,1,0,0,0,6802,6792,1,0,0,0,6802,6803,1,0,0,0,6803,6806,1,0,0,0,6804,
		6805,5,150,0,0,6805,6807,5,1135,0,0,6806,6804,1,0,0,0,6806,6807,1,0,0,
		0,6807,6808,1,0,0,0,6808,6809,5,1121,0,0,6809,6811,1,0,0,0,6810,6751,1,
		0,0,0,6810,6761,1,0,0,0,6810,6776,1,0,0,0,6810,6786,1,0,0,0,6811,631,1,
		0,0,0,6812,6813,7,123,0,0,6813,6814,5,1120,0,0,6814,6817,3,660,330,0,6815,
		6816,5,1122,0,0,6816,6818,3,564,282,0,6817,6815,1,0,0,0,6817,6818,1,0,
		0,0,6818,6821,1,0,0,0,6819,6820,5,1122,0,0,6820,6822,3,564,282,0,6821,
		6819,1,0,0,0,6821,6822,1,0,0,0,6822,6823,1,0,0,0,6823,6824,5,1121,0,0,
		6824,6825,3,634,317,0,6825,6851,1,0,0,0,6826,6827,7,124,0,0,6827,6828,
		5,1120,0,0,6828,6829,3,660,330,0,6829,6830,5,1121,0,0,6830,6831,3,634,
		317,0,6831,6851,1,0,0,0,6832,6833,7,125,0,0,6833,6834,5,1120,0,0,6834,
		6835,5,1121,0,0,6835,6851,3,634,317,0,6836,6837,5,292,0,0,6837,6838,5,
		1120,0,0,6838,6839,3,660,330,0,6839,6840,5,1122,0,0,6840,6841,3,564,282,
		0,6841,6842,5,1121,0,0,6842,6843,3,634,317,0,6843,6851,1,0,0,0,6844,6845,
		5,291,0,0,6845,6846,5,1120,0,0,6846,6847,3,564,282,0,6847,6848,5,1121,
		0,0,6848,6849,3,634,317,0,6849,6851,1,0,0,0,6850,6812,1,0,0,0,6850,6826,
		1,0,0,0,6850,6832,1,0,0,0,6850,6836,1,0,0,0,6850,6844,1,0,0,0,6851,633,
		1,0,0,0,6852,6859,5,122,0,0,6853,6855,5,1120,0,0,6854,6856,3,636,318,0,
		6855,6854,1,0,0,0,6855,6856,1,0,0,0,6856,6857,1,0,0,0,6857,6860,5,1121,
		0,0,6858,6860,3,638,319,0,6859,6853,1,0,0,0,6859,6858,1,0,0,0,6860,635,
		1,0,0,0,6861,6863,3,638,319,0,6862,6861,1,0,0,0,6862,6863,1,0,0,0,6863,
		6865,1,0,0,0,6864,6866,3,650,325,0,6865,6864,1,0,0,0,6865,6866,1,0,0,0,
		6866,6868,1,0,0,0,6867,6869,3,232,116,0,6868,6867,1,0,0,0,6868,6869,1,
		0,0,0,6869,6871,1,0,0,0,6870,6872,3,640,320,0,6871,6870,1,0,0,0,6871,6872,
		1,0,0,0,6872,637,1,0,0,0,6873,6874,3,558,279,0,6874,639,1,0,0,0,6875,6876,
		3,642,321,0,6876,6877,3,644,322,0,6877,641,1,0,0,0,6878,6879,7,126,0,0,
		6879,643,1,0,0,0,6880,6883,3,648,324,0,6881,6883,3,646,323,0,6882,6880,
		1,0,0,0,6882,6881,1,0,0,0,6883,645,1,0,0,0,6884,6885,5,15,0,0,6885,6886,
		3,648,324,0,6886,6887,5,10,0,0,6887,6888,3,648,324,0,6888,647,1,0,0,0,
		6889,6890,5,34,0,0,6890,6897,5,583,0,0,6891,6892,5,640,0,0,6892,6897,7,
		127,0,0,6893,6894,3,660,330,0,6894,6895,7,127,0,0,6895,6897,1,0,0,0,6896,
		6889,1,0,0,0,6896,6891,1,0,0,0,6896,6893,1,0,0,0,6897,649,1,0,0,0,6898,
		6899,5,125,0,0,6899,6900,5,18,0,0,6900,6905,3,660,330,0,6901,6902,5,1122,
		0,0,6902,6904,3,660,330,0,6903,6901,1,0,0,0,6904,6907,1,0,0,0,6905,6903,
		1,0,0,0,6905,6906,1,0,0,0,6906,651,1,0,0,0,6907,6905,1,0,0,0,6908,6932,
		3,690,345,0,6909,6932,5,724,0,0,6910,6932,5,308,0,0,6911,6932,5,304,0,
		0,6912,6932,5,305,0,0,6913,6932,5,306,0,0,6914,6932,5,309,0,0,6915,6932,
		5,310,0,0,6916,6932,5,311,0,0,6917,6932,5,74,0,0,6918,6932,5,82,0,0,6919,
		6932,5,307,0,0,6920,6932,5,313,0,0,6921,6932,5,495,0,0,6922,6932,5,314,
		0,0,6923,6932,5,137,0,0,6924,6932,5,316,0,0,6925,6932,5,317,0,0,6926,6932,
		5,318,0,0,6927,6932,5,319,0,0,6928,6932,5,320,0,0,6929,6932,5,321,0,0,
		6930,6932,5,322,0,0,6931,6908,1,0,0,0,6931,6909,1,0,0,0,6931,6910,1,0,
		0,0,6931,6911,1,0,0,0,6931,6912,1,0,0,0,6931,6913,1,0,0,0,6931,6914,1,
		0,0,0,6931,6915,1,0,0,0,6931,6916,1,0,0,0,6931,6917,1,0,0,0,6931,6918,
		1,0,0,0,6931,6919,1,0,0,0,6931,6920,1,0,0,0,6931,6921,1,0,0,0,6931,6922,
		1,0,0,0,6931,6923,1,0,0,0,6931,6924,1,0,0,0,6931,6925,1,0,0,0,6931,6926,
		1,0,0,0,6931,6927,1,0,0,0,6931,6928,1,0,0,0,6931,6929,1,0,0,0,6931,6930,
		1,0,0,0,6932,653,1,0,0,0,6933,6934,7,128,0,0,6934,6935,5,1120,0,0,6935,
		6936,3,658,329,0,6936,6937,5,1121,0,0,6937,655,1,0,0,0,6938,6943,3,576,
		288,0,6939,6943,3,536,268,0,6940,6943,3,620,310,0,6941,6943,3,660,330,
		0,6942,6938,1,0,0,0,6942,6939,1,0,0,0,6942,6940,1,0,0,0,6942,6941,1,0,
		0,0,6943,6953,1,0,0,0,6944,6949,5,1122,0,0,6945,6950,3,576,288,0,6946,
		6950,3,536,268,0,6947,6950,3,620,310,0,6948,6950,3,660,330,0,6949,6945,
		1,0,0,0,6949,6946,1,0,0,0,6949,6947,1,0,0,0,6949,6948,1,0,0,0,6950,6952,
		1,0,0,0,6951,6944,1,0,0,0,6952,6955,1,0,0,0,6953,6951,1,0,0,0,6953,6954,
		1,0,0,0,6954,657,1,0,0,0,6955,6953,1,0,0,0,6956,6961,3,576,288,0,6957,
		6961,3,536,268,0,6958,6961,3,620,310,0,6959,6961,3,660,330,0,6960,6956,
		1,0,0,0,6960,6957,1,0,0,0,6960,6958,1,0,0,0,6960,6959,1,0,0,0,6961,659,
		1,0,0,0,6962,6963,6,330,-1,0,6963,6964,7,129,0,0,6964,6974,3,660,330,4,
		6965,6966,3,662,331,0,6966,6968,5,85,0,0,6967,6969,5,110,0,0,6968,6967,
		1,0,0,0,6968,6969,1,0,0,0,6969,6970,1,0,0,0,6970,6971,7,130,0,0,6971,6974,
		1,0,0,0,6972,6974,3,662,331,0,6973,6962,1,0,0,0,6973,6965,1,0,0,0,6973,
		6972,1,0,0,0,6974,6981,1,0,0,0,6975,6976,10,3,0,0,6976,6977,3,670,335,
		0,6977,6978,3,660,330,4,6978,6980,1,0,0,0,6979,6975,1,0,0,0,6980,6983,
		1,0,0,0,6981,6979,1,0,0,0,6981,6982,1,0,0,0,6982,661,1,0,0,0,6983,6981,
		1,0,0,0,6984,6987,6,331,-1,0,6985,6986,5,1148,0,0,6986,6988,5,1095,0,0,
		6987,6985,1,0,0,0,6987,6988,1,0,0,0,6988,6989,1,0,0,0,6989,6990,3,664,
		332,0,6990,7055,1,0,0,0,6991,6992,10,8,0,0,6992,6993,3,668,334,0,6993,
		6994,3,662,331,9,6994,7054,1,0,0,0,6995,6997,10,6,0,0,6996,6998,5,110,
		0,0,6997,6996,1,0,0,0,6997,6998,1,0,0,0,6998,6999,1,0,0,0,6999,7000,5,
		15,0,0,7000,7001,3,662,331,0,7001,7002,5,10,0,0,7002,7003,3,662,331,7,
		7003,7054,1,0,0,0,7004,7005,10,5,0,0,7005,7006,5,603,0,0,7006,7007,5,94,
		0,0,7007,7054,3,662,331,6,7008,7010,10,3,0,0,7009,7011,5,110,0,0,7010,
		7009,1,0,0,0,7010,7011,1,0,0,0,7011,7012,1,0,0,0,7012,7013,7,131,0,0,7013,
		7054,3,662,331,4,7014,7016,10,10,0,0,7015,7017,5,110,0,0,7016,7015,1,0,
		0,0,7016,7017,1,0,0,0,7017,7018,1,0,0,0,7018,7019,5,77,0,0,7019,7022,5,
		1120,0,0,7020,7023,3,204,102,0,7021,7023,3,596,298,0,7022,7020,1,0,0,0,
		7022,7021,1,0,0,0,7023,7024,1,0,0,0,7024,7025,5,1121,0,0,7025,7054,1,0,
		0,0,7026,7027,10,9,0,0,7027,7028,5,85,0,0,7028,7054,3,574,287,0,7029,7030,
		10,7,0,0,7030,7031,3,668,334,0,7031,7032,7,132,0,0,7032,7033,5,1120,0,
		0,7033,7034,3,204,102,0,7034,7035,5,1121,0,0,7035,7054,1,0,0,0,7036,7038,
		10,4,0,0,7037,7039,5,110,0,0,7038,7037,1,0,0,0,7038,7039,1,0,0,0,7039,
		7040,1,0,0,0,7040,7041,5,94,0,0,7041,7044,3,662,331,0,7042,7043,5,402,
		0,0,7043,7045,5,1135,0,0,7044,7042,1,0,0,0,7044,7045,1,0,0,0,7045,7054,
		1,0,0,0,7046,7047,10,1,0,0,7047,7048,5,492,0,0,7048,7049,5,520,0,0,7049,
		7050,5,1120,0,0,7050,7051,3,662,331,0,7051,7052,5,1121,0,0,7052,7054,1,
		0,0,0,7053,6991,1,0,0,0,7053,6995,1,0,0,0,7053,7004,1,0,0,0,7053,7008,
		1,0,0,0,7053,7014,1,0,0,0,7053,7026,1,0,0,0,7053,7029,1,0,0,0,7053,7036,
		1,0,0,0,7053,7046,1,0,0,0,7054,7057,1,0,0,0,7055,7053,1,0,0,0,7055,7056,
		1,0,0,0,7056,663,1,0,0,0,7057,7055,1,0,0,0,7058,7059,6,332,-1,0,7059,7104,
		3,576,288,0,7060,7104,3,536,268,0,7061,7104,3,620,310,0,7062,7104,3,542,
		271,0,7063,7064,3,666,333,0,7064,7065,3,664,332,10,7065,7104,1,0,0,0,7066,
		7067,5,220,0,0,7067,7104,3,664,332,9,7068,7069,5,1120,0,0,7069,7074,3,
		660,330,0,7070,7071,5,1122,0,0,7071,7073,3,660,330,0,7072,7070,1,0,0,0,
		7073,7076,1,0,0,0,7074,7072,1,0,0,0,7074,7075,1,0,0,0,7075,7077,1,0,0,
		0,7076,7074,1,0,0,0,7077,7078,5,1121,0,0,7078,7104,1,0,0,0,7079,7080,5,
		583,0,0,7080,7081,5,1120,0,0,7081,7084,3,660,330,0,7082,7083,5,1122,0,
		0,7083,7085,3,660,330,0,7084,7082,1,0,0,0,7085,7086,1,0,0,0,7086,7084,
		1,0,0,0,7086,7087,1,0,0,0,7087,7088,1,0,0,0,7088,7089,5,1121,0,0,7089,
		7104,1,0,0,0,7090,7091,5,57,0,0,7091,7092,5,1120,0,0,7092,7093,3,204,102,
		0,7093,7094,5,1121,0,0,7094,7104,1,0,0,0,7095,7096,5,1120,0,0,7096,7097,
		3,204,102,0,7097,7098,5,1121,0,0,7098,7104,1,0,0,0,7099,7100,5,83,0,0,
		7100,7101,3,660,330,0,7101,7102,3,74,37,0,7102,7104,1,0,0,0,7103,7058,
		1,0,0,0,7103,7060,1,0,0,0,7103,7061,1,0,0,0,7103,7062,1,0,0,0,7103,7063,
		1,0,0,0,7103,7066,1,0,0,0,7103,7068,1,0,0,0,7103,7079,1,0,0,0,7103,7090,
		1,0,0,0,7103,7095,1,0,0,0,7103,7099,1,0,0,0,7104,7122,1,0,0,0,7105,7106,
		10,3,0,0,7106,7107,3,672,336,0,7107,7108,3,664,332,4,7108,7121,1,0,0,0,
		7109,7110,10,2,0,0,7110,7111,3,674,337,0,7111,7112,3,664,332,3,7112,7121,
		1,0,0,0,7113,7114,10,1,0,0,7114,7115,3,676,338,0,7115,7116,3,664,332,2,
		7116,7121,1,0,0,0,7117,7118,10,12,0,0,7118,7119,5,26,0,0,7119,7121,3,546,
		273,0,7120,7105,1,0,0,0,7120,7109,1,0,0,0,7120,7113,1,0,0,0,7120,7117,
		1,0,0,0,7121,7124,1,0,0,0,7122,7120,1,0,0,0,7122,7123,1,0,0,0,7123,665,
		1,0,0,0,7124,7122,1,0,0,0,7125,7126,7,133,0,0,7126,667,1,0,0,0,7127,7142,
		5,1111,0,0,7128,7142,5,1112,0,0,7129,7142,5,1113,0,0,7130,7131,5,1113,
		0,0,7131,7142,5,1111,0,0,7132,7133,5,1112,0,0,7133,7142,5,1111,0,0,7134,
		7135,5,1113,0,0,7135,7142,5,1112,0,0,7136,7137,5,1114,0,0,7137,7142,5,
		1111,0,0,7138,7139,5,1113,0,0,7139,7140,5,1111,0,0,7140,7142,5,1112,0,
		0,7141,7127,1,0,0,0,7141,7128,1,0,0,0,7141,7129,1,0,0,0,7141,7130,1,0,
		0,0,7141,7132,1,0,0,0,7141,7134,1,0,0,0,7141,7136,1,0,0,0,7141,7138,1,
		0,0,0,7142,669,1,0,0,0,7143,7151,5,10,0,0,7144,7145,5,1117,0,0,7145,7151,
		5,1117,0,0,7146,7151,5,188,0,0,7147,7151,5,119,0,0,7148,7149,5,1116,0,
		0,7149,7151,5,1116,0,0,7150,7143,1,0,0,0,7150,7144,1,0,0,0,7150,7146,1,
		0,0,0,7150,7147,1,0,0,0,7150,7148,1,0,0,0,7151,671,1,0,0,0,7152,7153,5,
		1113,0,0,7153,7160,5,1113,0,0,7154,7155,5,1112,0,0,7155,7160,5,1112,0,
		0,7156,7160,5,1117,0,0,7157,7160,5,1118,0,0,7158,7160,5,1116,0,0,7159,
		7152,1,0,0,0,7159,7154,1,0,0,0,7159,7156,1,0,0,0,7159,7157,1,0,0,0,7159,
		7158,1,0,0,0,7160,673,1,0,0,0,7161,7162,7,134,0,0,7162,675,1,0,0,0,7163,
		7164,5,1108,0,0,7164,7169,5,1112,0,0,7165,7166,5,1108,0,0,7166,7167,5,
		1112,0,0,7167,7169,5,1112,0,0,7168,7163,1,0,0,0,7168,7165,1,0,0,0,7169,
		677,1,0,0,0,7170,7171,7,135,0,0,7171,679,1,0,0,0,7172,7173,7,136,0,0,7173,
		681,1,0,0,0,7174,7175,7,137,0,0,7175,683,1,0,0,0,7176,7177,7,138,0,0,7177,
		685,1,0,0,0,7178,7179,7,139,0,0,7179,687,1,0,0,0,7180,7181,7,140,0,0,7181,
		689,1,0,0,0,7182,7183,7,141,0,0,7183,691,1,0,0,0,1054,693,697,704,707,
		710,712,718,721,724,733,778,790,801,818,823,835,862,871,876,882,887,891,
		900,903,906,910,918,921,924,930,934,940,945,950,955,958,960,972,975,979,
		982,986,989,993,996,999,1003,1006,1010,1016,1022,1028,1035,1042,1048,1054,
		1063,1068,1075,1082,1099,1107,1110,1114,1124,1129,1132,1136,1140,1144,
		1149,1152,1155,1158,1161,1168,1171,1175,1181,1186,1189,1192,1194,1205,
		1209,1212,1226,1229,1233,1236,1240,1243,1247,1250,1254,1257,1260,1264,
		1267,1271,1278,1281,1294,1300,1311,1316,1324,1333,1338,1341,1346,1354,
		1358,1363,1367,1372,1375,1379,1384,1386,1391,1396,1404,1412,1417,1425,
		1428,1431,1435,1439,1442,1446,1449,1456,1464,1466,1473,1479,1487,1490,
		1497,1500,1502,1508,1514,1531,1538,1545,1557,1562,1571,1573,1576,1589,
		1602,1607,1623,1631,1641,1647,1659,1662,1667,1680,1687,1694,1696,1703,
		1707,1709,1714,1717,1723,1728,1730,1734,1737,1740,1746,1751,1753,1758,
		1765,1767,1774,1779,1783,1786,1794,1802,1804,1812,1816,1819,1825,1830,
		1833,1839,1842,1846,1849,1853,1858,1863,1868,1872,1876,1880,1884,1888,
		1892,1897,1902,1907,1913,1918,1923,1929,1934,1939,1944,1949,1954,1959,
		1964,1971,1976,1981,1986,1992,2000,2006,2018,2025,2027,2035,2040,2043,
		2051,2057,2073,2085,2087,2090,2098,2104,2110,2123,2130,2139,2144,2155,
		2164,2169,2181,2188,2197,2202,2214,2221,2230,2235,2242,2251,2256,2258,
		2263,2271,2280,2284,2287,2291,2296,2302,2308,2313,2318,2323,2328,2331,
		2336,2341,2351,2355,2362,2367,2370,2375,2378,2382,2386,2394,2413,2416,
		2419,2423,2433,2446,2453,2456,2461,2468,2471,2474,2485,2488,2492,2500,
		2503,2508,2516,2522,2526,2531,2537,2541,2546,2551,2554,2561,2565,2568,
		2579,2587,2590,2593,2599,2605,2607,2612,2615,2621,2627,2629,2633,2636,
		2639,2645,2651,2654,2660,2666,2668,2673,2676,2684,2686,2695,2700,2708,
		2712,2715,2723,2733,2738,2741,2748,2752,2755,2759,2764,2784,2791,2800,
		2804,2816,2819,2828,2840,2848,2856,2863,2870,2877,2892,2905,2911,2917,
		2923,2929,2935,2941,2946,2953,2960,2967,2972,2975,2977,2981,2994,3001,
		3008,3014,3018,3022,3025,3032,3035,3040,3047,3054,3058,3063,3070,3083,
		3086,3091,3096,3100,3106,3110,3114,3117,3124,3134,3139,3146,3150,3157,
		3160,3164,3173,3177,3180,3183,3189,3192,3198,3207,3210,3221,3224,3229,
		3232,3237,3247,3252,3258,3260,3266,3268,3274,3282,3287,3295,3298,3303,
		3306,3311,3319,3327,3333,3341,3346,3354,3357,3361,3364,3372,3378,3387,
		3390,3394,3398,3404,3408,3412,3414,3417,3420,3423,3429,3433,3436,3439,
		3442,3445,3447,3451,3457,3463,3468,3471,3477,3481,3489,3492,3496,3499,
		3502,3511,3515,3518,3522,3526,3529,3532,3537,3543,3547,3557,3563,3567,
		3573,3577,3583,3586,3598,3602,3606,3614,3618,3626,3629,3633,3636,3644,
		3649,3652,3655,3659,3662,3671,3676,3685,3690,3697,3704,3712,3717,3725,
		3728,3731,3738,3741,3748,3751,3759,3765,3776,3779,3790,3796,3800,3811,
		3816,3818,3822,3832,3842,3848,3853,3856,3859,3862,3865,3868,3871,3877,
		3882,3885,3888,3891,3894,3897,3900,3902,3908,3913,3916,3919,3922,3925,
		3928,3932,3938,3942,3952,3956,3962,3971,3974,3978,3981,3985,3989,3992,
		3994,4002,4014,4020,4022,4028,4030,4032,4038,4046,4054,4058,4062,4071,
		4076,4096,4101,4107,4114,4119,4128,4131,4135,4139,4143,4146,4149,4152,
		4156,4160,4163,4166,4169,4176,4180,4195,4199,4211,4219,4229,4233,4236,
		4242,4245,4248,4257,4266,4276,4280,4290,4300,4308,4311,4320,4323,4327,
		4332,4336,4345,4348,4379,4382,4385,4441,4446,4474,4488,4495,4499,4505,
		4513,4515,4526,4536,4543,4549,4557,4562,4570,4578,4586,4594,4600,4603,
		4607,4612,4617,4623,4625,4636,4641,4648,4650,4664,4670,4675,4680,4686,
		4693,4701,4709,4714,4720,4723,4731,4738,4747,4750,4767,4775,4783,4787,
		4794,4800,4808,4817,4823,4830,4837,4842,4845,4847,4853,4855,4859,4861,
		4864,4873,4879,4886,4893,4898,4901,4903,4909,4911,4915,4917,4920,4925,
		4932,4941,4946,4955,4962,4967,4970,4972,4978,4980,4983,4991,4996,5001,
		5005,5011,5016,5020,5026,5028,5039,5042,5049,5052,5064,5070,5079,5088,
		5093,5102,5108,5119,5128,5134,5139,5143,5146,5158,5165,5170,5185,5192,
		5200,5203,5213,5223,5233,5243,5247,5251,5261,5266,5330,5348,5356,5368,
		5375,5377,5387,5390,5398,5405,5409,5414,5418,5423,5426,5429,5438,5442,
		5466,5473,5477,5484,5491,5494,5510,5513,5523,5527,5533,5536,5541,5545,
		5552,5555,5561,5585,5588,5600,5603,5613,5621,5625,5632,5635,5644,5650,
		5656,5666,5668,5674,5677,5680,5692,5695,5701,5704,5712,5720,5726,5730,
		5744,5756,5763,5766,5773,5780,5785,5790,5793,5804,5815,5821,5826,5839,
		5841,5846,5850,5853,5855,5862,5869,5872,5875,5881,5885,5891,5897,5910,
		5915,5923,5926,5931,5936,5944,5947,5955,5959,5972,5978,5990,5993,6002,
		6007,6013,6019,6024,6026,6031,6033,6037,6043,6046,6049,6057,6065,6069,
		6089,6096,6098,6105,6107,6111,6116,6127,6132,6138,6141,6145,6150,6153,
		6157,6161,6163,6168,6173,6186,6189,6193,6196,6199,6204,6209,6214,6217,
		6222,6225,6231,6234,6238,6243,6248,6253,6258,6261,6266,6271,6276,6282,
		6287,6292,6297,6300,6305,6309,6313,6321,6328,6332,6337,6342,6346,6348,
		6351,6367,6376,6384,6393,6403,6411,6419,6427,6435,6447,6454,6473,6478,
		6481,6486,6489,6493,6505,6510,6518,6525,6530,6535,6568,6572,6580,6584,
		6593,6601,6606,6614,6619,6624,6626,6635,6640,6648,6653,6661,6669,6672,
		6682,6700,6706,6710,6716,6720,6724,6737,6745,6749,6754,6759,6765,6770,
		6774,6779,6784,6789,6799,6802,6806,6810,6817,6821,6850,6855,6859,6862,
		6865,6868,6871,6882,6896,6905,6931,6942,6949,6953,6960,6968,6973,6981,
		6987,6997,7010,7016,7022,7038,7044,7053,7055,7074,7086,7103,7120,7122,
		7141,7150,7159,7168
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
